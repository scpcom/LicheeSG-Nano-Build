From 14419b5016af565dae46bb4b1c49ad35eb5b26bb Mon Sep 17 00:00:00 2001
From: Lu Hui <luhui@sipeed.com>
Date: Wed, 21 Feb 2024 14:20:41 +0800
Subject: [PATCH 2/7] src: add qt5

---
 .gitmodules                                   |     3 +
 .../qtbase/0001-src-fix-header-missing.patch  | 40495 ++++++++++++++++
 ...pecs-add-linux-riscv64-musl-g-target.patch |    94 +
 src/qt5                                       |     1 +
 src/qt5.org                                   |    32 +
 src/qt5_apply_patches.sh                      |     8 +
 6 files changed, 40633 insertions(+)
 create mode 100644 .gitmodules
 create mode 100644 src/patches/qt5/qtbase/0001-src-fix-header-missing.patch
 create mode 100644 src/patches/qt5/qtbase/0002-mkspecs-add-linux-riscv64-musl-g-target.patch
 create mode 160000 src/qt5
 create mode 100644 src/qt5.org
 create mode 100755 src/qt5_apply_patches.sh

diff --git a/.gitmodules b/.gitmodules
new file mode 100644
index 0000000..f737973
--- /dev/null
+++ b/.gitmodules
@@ -0,0 +1,3 @@
+[submodule "src/qt5"]
+	path = src/qt5
+	url = https://code.qt.io/qt/qt5.git
diff --git a/src/patches/qt5/qtbase/0001-src-fix-header-missing.patch b/src/patches/qt5/qtbase/0001-src-fix-header-missing.patch
new file mode 100644
index 0000000..2644998
--- /dev/null
+++ b/src/patches/qt5/qtbase/0001-src-fix-header-missing.patch
@@ -0,0 +1,40495 @@
+From 2c73f6d1616d6ee5588c6d4286e596d29e277f2b Mon Sep 17 00:00:00 2001
+From: Lu Hui <luhui@sipeed.com>
+Date: Wed, 21 Feb 2024 13:41:52 +0800
+Subject: [PATCH 1/2] src: fix header missing
+
+---
+ src/corelib/.tracegen/qtcore_tracepoints_p.h  |     1 +
+ src/corelib/codecs/qutfcodec.cpp              |     1 +
+ src/corelib/global/qendian.h                  |     1 +
+ src/corelib/global/qfloat16.h                 |     1 +
+ src/corelib/qt5core_metatypes.json            |  9325 ++++++
+ src/corelib/text/qbytearraymatcher.h          |     1 +
+ src/corelib/tools/qoffsetstringarray_p.h      |     1 +
+ src/gui/.tracegen/qtgui_tracepoints_p.h       |     1 +
+ src/gui/qt5gui_metatypes.json                 |  6096 ++++
+ .../.tracegen/qtwidgets_tracepoints_p.h       |     1 +
+ src/widgets/qt5widgets_metatypes.json         | 24947 ++++++++++++++++
+ 11 files changed, 40376 insertions(+)
+ create mode 100644 src/corelib/.tracegen/qtcore_tracepoints_p.h
+ create mode 100644 src/corelib/qt5core_metatypes.json
+ create mode 100644 src/gui/.tracegen/qtgui_tracepoints_p.h
+ create mode 100644 src/gui/qt5gui_metatypes.json
+ create mode 100644 src/widgets/.tracegen/qtwidgets_tracepoints_p.h
+ create mode 100644 src/widgets/qt5widgets_metatypes.json
+
+diff --git a/src/corelib/.tracegen/qtcore_tracepoints_p.h b/src/corelib/.tracegen/qtcore_tracepoints_p.h
+new file mode 100644
+index 0000000000..ff8d10144f
+--- /dev/null
++++ b/src/corelib/.tracegen/qtcore_tracepoints_p.h
+@@ -0,0 +1 @@
++#include <private/qtrace_p.h>
+diff --git a/src/corelib/codecs/qutfcodec.cpp b/src/corelib/codecs/qutfcodec.cpp
+index 8561f908b9..33508c3c9f 100644
+--- a/src/corelib/codecs/qutfcodec.cpp
++++ b/src/corelib/codecs/qutfcodec.cpp
+@@ -38,6 +38,7 @@
+ **
+ ****************************************************************************/
+ 
++#include <limits>
+ #include "qutfcodec_p.h"
+ #include "qlist.h"
+ #include "qendian.h"
+diff --git a/src/corelib/global/qendian.h b/src/corelib/global/qendian.h
+index 257efbbdbe..05f11d6f81 100644
+--- a/src/corelib/global/qendian.h
++++ b/src/corelib/global/qendian.h
+@@ -47,6 +47,7 @@
+ // include stdlib.h and hope that it defines __GLIBC__ for glibc-based systems
+ #include <stdlib.h>
+ #include <string.h>
++#include <limits>
+ 
+ #ifdef min // MSVC
+ #undef min
+diff --git a/src/corelib/global/qfloat16.h b/src/corelib/global/qfloat16.h
+index c7a9c87af3..d1f31a0a30 100644
+--- a/src/corelib/global/qfloat16.h
++++ b/src/corelib/global/qfloat16.h
+@@ -41,6 +41,7 @@
+ #ifndef QFLOAT16_H
+ #define QFLOAT16_H
+ 
++#include <limits>
+ #include <QtCore/qglobal.h>
+ #include <QtCore/qmetatype.h>
+ #include <string.h>
+diff --git a/src/corelib/qt5core_metatypes.json b/src/corelib/qt5core_metatypes.json
+new file mode 100644
+index 0000000000..8f62b3c077
+--- /dev/null
++++ b/src/corelib/qt5core_metatypes.json
+@@ -0,0 +1,9325 @@
++[
++    {
++        "classes": [
++            {
++                "className": "QAbstractAnimation",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Direction",
++                        "values": [
++                            "Forward",
++                            "Backward"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "State",
++                        "values": [
++                            "Stopped",
++                            "Paused",
++                            "Running"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "state",
++                        "notify": "stateChanged",
++                        "read": "state",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "State",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "loopCount",
++                        "read": "loopCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setLoopCount"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentTime",
++                        "read": "currentTime",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentLoop",
++                        "notify": "currentLoopChanged",
++                        "read": "currentLoop",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "direction",
++                        "notify": "directionChanged",
++                        "read": "direction",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Direction",
++                        "user": false,
++                        "write": "setDirection"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "duration",
++                        "read": "duration",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QAbstractAnimation",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "finished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newState",
++                                "type": "QAbstractAnimation::State"
++                            },
++                            {
++                                "name": "oldState",
++                                "type": "QAbstractAnimation::State"
++                            }
++                        ],
++                        "name": "stateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "currentLoop",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentLoopChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAbstractAnimation::Direction"
++                            }
++                        ],
++                        "name": "directionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "policy",
++                                "type": "QAbstractAnimation::DeletionPolicy"
++                            }
++                        ],
++                        "name": "start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "pause",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resume",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setPaused",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "stop",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "msecs",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentTime",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QAnimationDriver",
++                "object": true,
++                "qualifiedClassName": "QAnimationDriver",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "started",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "stopped",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractanimation.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDefaultAnimationDriver",
++                "object": true,
++                "qualifiedClassName": "QDefaultAnimationDriver",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "startTimer",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "stopTimer",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAnimationDriver"
++                    }
++                ]
++            },
++            {
++                "className": "QAbstractAnimationTimer",
++                "object": true,
++                "qualifiedClassName": "QAbstractAnimationTimer",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QUnifiedTimer",
++                "object": true,
++                "qualifiedClassName": "QUnifiedTimer",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "startTimers",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "stopTimer",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QAnimationTimer",
++                "object": true,
++                "qualifiedClassName": "QAnimationTimer",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "startAnimations",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "stopTimer",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractAnimationTimer"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractanimation_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QVariantAnimation",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "startValue",
++                        "read": "startValue",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QVariant",
++                        "user": false,
++                        "write": "setStartValue"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "endValue",
++                        "read": "endValue",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QVariant",
++                        "user": false,
++                        "write": "setEndValue"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentValue",
++                        "notify": "valueChanged",
++                        "read": "currentValue",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QVariant",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "duration",
++                        "read": "duration",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDuration"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "easingCurve",
++                        "read": "easingCurve",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QEasingCurve",
++                        "user": false,
++                        "write": "setEasingCurve"
++                    }
++                ],
++                "qualifiedClassName": "QVariantAnimation",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "QVariant"
++                            }
++                        ],
++                        "name": "valueChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractAnimation"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qvariantanimation.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPropertyAnimation",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "propertyName",
++                        "read": "propertyName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QByteArray",
++                        "user": false,
++                        "write": "setPropertyName"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "targetObject",
++                        "read": "targetObject",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QObject*",
++                        "user": false,
++                        "write": "setTargetObject"
++                    }
++                ],
++                "qualifiedClassName": "QPropertyAnimation",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QVariantAnimation"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpropertyanimation.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAnimationGroup",
++                "object": true,
++                "qualifiedClassName": "QAnimationGroup",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractAnimation"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qanimationgroup.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSequentialAnimationGroup",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentAnimation",
++                        "notify": "currentAnimationChanged",
++                        "read": "currentAnimation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QAbstractAnimation*",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QSequentialAnimationGroup",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "current",
++                                "type": "QAbstractAnimation*"
++                            }
++                        ],
++                        "name": "currentAnimationChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_uncontrolledAnimationFinished",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAnimationGroup"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsequentialanimationgroup.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QParallelAnimationGroup",
++                "object": true,
++                "qualifiedClassName": "QParallelAnimationGroup",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_uncontrolledAnimationFinished",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAnimationGroup"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qparallelanimationgroup.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPauseAnimation",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "duration",
++                        "read": "duration",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDuration"
++                    }
++                ],
++                "qualifiedClassName": "QPauseAnimation",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractAnimation"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpauseanimation.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "Qt",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "GlobalColor",
++                        "values": [
++                            "color0",
++                            "color1",
++                            "black",
++                            "white",
++                            "darkGray",
++                            "gray",
++                            "lightGray",
++                            "red",
++                            "green",
++                            "blue",
++                            "cyan",
++                            "magenta",
++                            "yellow",
++                            "darkRed",
++                            "darkGreen",
++                            "darkBlue",
++                            "darkCyan",
++                            "darkMagenta",
++                            "darkYellow",
++                            "transparent"
++                        ]
++                    },
++                    {
++                        "alias": "KeyboardModifier",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "KeyboardModifiers",
++                        "values": [
++                            "NoModifier",
++                            "ShiftModifier",
++                            "ControlModifier",
++                            "AltModifier",
++                            "MetaModifier",
++                            "KeypadModifier",
++                            "GroupSwitchModifier",
++                            "KeyboardModifierMask"
++                        ]
++                    },
++                    {
++                        "alias": "MouseButton",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "MouseButtons",
++                        "values": [
++                            "NoButton",
++                            "LeftButton",
++                            "RightButton",
++                            "MiddleButton",
++                            "MidButton",
++                            "BackButton",
++                            "XButton1",
++                            "ExtraButton1",
++                            "ForwardButton",
++                            "XButton2",
++                            "ExtraButton2",
++                            "TaskButton",
++                            "ExtraButton3",
++                            "ExtraButton4",
++                            "ExtraButton5",
++                            "ExtraButton6",
++                            "ExtraButton7",
++                            "ExtraButton8",
++                            "ExtraButton9",
++                            "ExtraButton10",
++                            "ExtraButton11",
++                            "ExtraButton12",
++                            "ExtraButton13",
++                            "ExtraButton14",
++                            "ExtraButton15",
++                            "ExtraButton16",
++                            "ExtraButton17",
++                            "ExtraButton18",
++                            "ExtraButton19",
++                            "ExtraButton20",
++                            "ExtraButton21",
++                            "ExtraButton22",
++                            "ExtraButton23",
++                            "ExtraButton24",
++                            "AllButtons",
++                            "MaxMouseButton",
++                            "MouseButtonMask"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Orientation",
++                        "values": [
++                            "Horizontal",
++                            "Vertical"
++                        ]
++                    },
++                    {
++                        "alias": "Orientation",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "Orientations",
++                        "values": [
++                            "Horizontal",
++                            "Vertical"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "FocusPolicy",
++                        "values": [
++                            "NoFocus",
++                            "TabFocus",
++                            "ClickFocus",
++                            "StrongFocus",
++                            "WheelFocus"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TabFocusBehavior",
++                        "values": [
++                            "NoTabFocus",
++                            "TabFocusTextControls",
++                            "TabFocusListControls",
++                            "TabFocusAllControls"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SortOrder",
++                        "values": [
++                            "AscendingOrder",
++                            "DescendingOrder"
++                        ]
++                    },
++                    {
++                        "alias": "SplitBehaviorFlags",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "SplitBehavior",
++                        "values": [
++                            "KeepEmptyParts",
++                            "SkipEmptyParts"
++                        ]
++                    },
++                    {
++                        "alias": "AlignmentFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "Alignment",
++                        "values": [
++                            "AlignLeft",
++                            "AlignLeading",
++                            "AlignRight",
++                            "AlignTrailing",
++                            "AlignHCenter",
++                            "AlignJustify",
++                            "AlignAbsolute",
++                            "AlignHorizontal_Mask",
++                            "AlignTop",
++                            "AlignBottom",
++                            "AlignVCenter",
++                            "AlignBaseline",
++                            "AlignVertical_Mask",
++                            "AlignCenter"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TextFlag",
++                        "values": [
++                            "TextSingleLine",
++                            "TextDontClip",
++                            "TextExpandTabs",
++                            "TextShowMnemonic",
++                            "TextWordWrap",
++                            "TextWrapAnywhere",
++                            "TextDontPrint",
++                            "TextIncludeTrailingSpaces",
++                            "TextHideMnemonic",
++                            "TextJustificationForced",
++                            "TextForceLeftToRight",
++                            "TextForceRightToLeft",
++                            "TextLongestVariant",
++                            "TextBypassShaping"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TextElideMode",
++                        "values": [
++                            "ElideLeft",
++                            "ElideRight",
++                            "ElideMiddle",
++                            "ElideNone"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "WindowType",
++                        "values": [
++                            "Widget",
++                            "Window",
++                            "Dialog",
++                            "Sheet",
++                            "Drawer",
++                            "Popup",
++                            "Tool",
++                            "ToolTip",
++                            "SplashScreen",
++                            "Desktop",
++                            "SubWindow",
++                            "ForeignWindow",
++                            "CoverWindow",
++                            "WindowType_Mask",
++                            "MSWindowsFixedSizeDialogHint",
++                            "MSWindowsOwnDC",
++                            "BypassWindowManagerHint",
++                            "X11BypassWindowManagerHint",
++                            "FramelessWindowHint",
++                            "WindowTitleHint",
++                            "WindowSystemMenuHint",
++                            "WindowMinimizeButtonHint",
++                            "WindowMaximizeButtonHint",
++                            "WindowMinMaxButtonsHint",
++                            "WindowContextHelpButtonHint",
++                            "WindowShadeButtonHint",
++                            "WindowStaysOnTopHint",
++                            "WindowTransparentForInput",
++                            "WindowOverridesSystemGestures",
++                            "WindowDoesNotAcceptFocus",
++                            "MaximizeUsingFullscreenGeometryHint",
++                            "CustomizeWindowHint",
++                            "WindowStaysOnBottomHint",
++                            "WindowCloseButtonHint",
++                            "MacWindowToolBarButtonHint",
++                            "BypassGraphicsProxyWidget",
++                            "NoDropShadowWindowHint",
++                            "WindowFullscreenButtonHint"
++                        ]
++                    },
++                    {
++                        "alias": "WindowType",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "WindowFlags",
++                        "values": [
++                            "Widget",
++                            "Window",
++                            "Dialog",
++                            "Sheet",
++                            "Drawer",
++                            "Popup",
++                            "Tool",
++                            "ToolTip",
++                            "SplashScreen",
++                            "Desktop",
++                            "SubWindow",
++                            "ForeignWindow",
++                            "CoverWindow",
++                            "WindowType_Mask",
++                            "MSWindowsFixedSizeDialogHint",
++                            "MSWindowsOwnDC",
++                            "BypassWindowManagerHint",
++                            "X11BypassWindowManagerHint",
++                            "FramelessWindowHint",
++                            "WindowTitleHint",
++                            "WindowSystemMenuHint",
++                            "WindowMinimizeButtonHint",
++                            "WindowMaximizeButtonHint",
++                            "WindowMinMaxButtonsHint",
++                            "WindowContextHelpButtonHint",
++                            "WindowShadeButtonHint",
++                            "WindowStaysOnTopHint",
++                            "WindowTransparentForInput",
++                            "WindowOverridesSystemGestures",
++                            "WindowDoesNotAcceptFocus",
++                            "MaximizeUsingFullscreenGeometryHint",
++                            "CustomizeWindowHint",
++                            "WindowStaysOnBottomHint",
++                            "WindowCloseButtonHint",
++                            "MacWindowToolBarButtonHint",
++                            "BypassGraphicsProxyWidget",
++                            "NoDropShadowWindowHint",
++                            "WindowFullscreenButtonHint"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "WindowState",
++                        "values": [
++                            "WindowNoState",
++                            "WindowMinimized",
++                            "WindowMaximized",
++                            "WindowFullScreen",
++                            "WindowActive"
++                        ]
++                    },
++                    {
++                        "alias": "WindowState",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "WindowStates",
++                        "values": [
++                            "WindowNoState",
++                            "WindowMinimized",
++                            "WindowMaximized",
++                            "WindowFullScreen",
++                            "WindowActive"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ApplicationState",
++                        "values": [
++                            "ApplicationSuspended",
++                            "ApplicationHidden",
++                            "ApplicationInactive",
++                            "ApplicationActive"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ScreenOrientation",
++                        "values": [
++                            "PrimaryOrientation",
++                            "PortraitOrientation",
++                            "LandscapeOrientation",
++                            "InvertedPortraitOrientation",
++                            "InvertedLandscapeOrientation"
++                        ]
++                    },
++                    {
++                        "alias": "ScreenOrientation",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "ScreenOrientations",
++                        "values": [
++                            "PrimaryOrientation",
++                            "PortraitOrientation",
++                            "LandscapeOrientation",
++                            "InvertedPortraitOrientation",
++                            "InvertedLandscapeOrientation"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "WidgetAttribute",
++                        "values": [
++                            "WA_Disabled",
++                            "WA_UnderMouse",
++                            "WA_MouseTracking",
++                            "WA_ContentsPropagated",
++                            "WA_OpaquePaintEvent",
++                            "WA_NoBackground",
++                            "WA_StaticContents",
++                            "WA_LaidOut",
++                            "WA_PaintOnScreen",
++                            "WA_NoSystemBackground",
++                            "WA_UpdatesDisabled",
++                            "WA_Mapped",
++                            "WA_MacNoClickThrough",
++                            "WA_InputMethodEnabled",
++                            "WA_WState_Visible",
++                            "WA_WState_Hidden",
++                            "WA_ForceDisabled",
++                            "WA_KeyCompression",
++                            "WA_PendingMoveEvent",
++                            "WA_PendingResizeEvent",
++                            "WA_SetPalette",
++                            "WA_SetFont",
++                            "WA_SetCursor",
++                            "WA_NoChildEventsFromChildren",
++                            "WA_WindowModified",
++                            "WA_Resized",
++                            "WA_Moved",
++                            "WA_PendingUpdate",
++                            "WA_InvalidSize",
++                            "WA_MacBrushedMetal",
++                            "WA_MacMetalStyle",
++                            "WA_CustomWhatsThis",
++                            "WA_LayoutOnEntireRect",
++                            "WA_OutsideWSRange",
++                            "WA_GrabbedShortcut",
++                            "WA_TransparentForMouseEvents",
++                            "WA_PaintUnclipped",
++                            "WA_SetWindowIcon",
++                            "WA_NoMouseReplay",
++                            "WA_DeleteOnClose",
++                            "WA_RightToLeft",
++                            "WA_SetLayoutDirection",
++                            "WA_NoChildEventsForParent",
++                            "WA_ForceUpdatesDisabled",
++                            "WA_WState_Created",
++                            "WA_WState_CompressKeys",
++                            "WA_WState_InPaintEvent",
++                            "WA_WState_Reparented",
++                            "WA_WState_ConfigPending",
++                            "WA_WState_Polished",
++                            "WA_WState_DND",
++                            "WA_WState_OwnSizePolicy",
++                            "WA_WState_ExplicitShowHide",
++                            "WA_ShowModal",
++                            "WA_MouseNoMask",
++                            "WA_GroupLeader",
++                            "WA_NoMousePropagation",
++                            "WA_Hover",
++                            "WA_InputMethodTransparent",
++                            "WA_QuitOnClose",
++                            "WA_KeyboardFocusChange",
++                            "WA_AcceptDrops",
++                            "WA_DropSiteRegistered",
++                            "WA_ForceAcceptDrops",
++                            "WA_WindowPropagation",
++                            "WA_NoX11EventCompression",
++                            "WA_TintedBackground",
++                            "WA_X11OpenGLOverlay",
++                            "WA_AlwaysShowToolTips",
++                            "WA_MacOpaqueSizeGrip",
++                            "WA_SetStyle",
++                            "WA_SetLocale",
++                            "WA_MacShowFocusRect",
++                            "WA_MacNormalSize",
++                            "WA_MacSmallSize",
++                            "WA_MacMiniSize",
++                            "WA_LayoutUsesWidgetRect",
++                            "WA_StyledBackground",
++                            "WA_MSWindowsUseDirect3D",
++                            "WA_CanHostQMdiSubWindowTitleBar",
++                            "WA_MacAlwaysShowToolWindow",
++                            "WA_StyleSheet",
++                            "WA_ShowWithoutActivating",
++                            "WA_X11BypassTransientForHint",
++                            "WA_NativeWindow",
++                            "WA_DontCreateNativeAncestors",
++                            "WA_MacVariableSize",
++                            "WA_DontShowOnScreen",
++                            "WA_X11NetWmWindowTypeDesktop",
++                            "WA_X11NetWmWindowTypeDock",
++                            "WA_X11NetWmWindowTypeToolBar",
++                            "WA_X11NetWmWindowTypeMenu",
++                            "WA_X11NetWmWindowTypeUtility",
++                            "WA_X11NetWmWindowTypeSplash",
++                            "WA_X11NetWmWindowTypeDialog",
++                            "WA_X11NetWmWindowTypeDropDownMenu",
++                            "WA_X11NetWmWindowTypePopupMenu",
++                            "WA_X11NetWmWindowTypeToolTip",
++                            "WA_X11NetWmWindowTypeNotification",
++                            "WA_X11NetWmWindowTypeCombo",
++                            "WA_X11NetWmWindowTypeDND",
++                            "WA_MacFrameworkScaled",
++                            "WA_SetWindowModality",
++                            "WA_WState_WindowOpacitySet",
++                            "WA_TranslucentBackground",
++                            "WA_AcceptTouchEvents",
++                            "WA_WState_AcceptedTouchBeginEvent",
++                            "WA_TouchPadAcceptSingleTouchEvents",
++                            "WA_X11DoNotAcceptFocus",
++                            "WA_MacNoShadow",
++                            "WA_AlwaysStackOnTop",
++                            "WA_TabletTracking",
++                            "WA_ContentsMarginsRespectsSafeArea",
++                            "WA_StyleSheetTarget",
++                            "WA_AttributeCount"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ApplicationAttribute",
++                        "values": [
++                            "AA_ImmediateWidgetCreation",
++                            "AA_MSWindowsUseDirect3DByDefault",
++                            "AA_DontShowIconsInMenus",
++                            "AA_NativeWindows",
++                            "AA_DontCreateNativeWidgetSiblings",
++                            "AA_PluginApplication",
++                            "AA_MacPluginApplication",
++                            "AA_DontUseNativeMenuBar",
++                            "AA_MacDontSwapCtrlAndMeta",
++                            "AA_Use96Dpi",
++                            "AA_DisableNativeVirtualKeyboard",
++                            "AA_X11InitThreads",
++                            "AA_SynthesizeTouchForUnhandledMouseEvents",
++                            "AA_SynthesizeMouseForUnhandledTouchEvents",
++                            "AA_UseHighDpiPixmaps",
++                            "AA_ForceRasterWidgets",
++                            "AA_UseDesktopOpenGL",
++                            "AA_UseOpenGLES",
++                            "AA_UseSoftwareOpenGL",
++                            "AA_ShareOpenGLContexts",
++                            "AA_SetPalette",
++                            "AA_EnableHighDpiScaling",
++                            "AA_DisableHighDpiScaling",
++                            "AA_UseStyleSheetPropagationInWidgetStyles",
++                            "AA_DontUseNativeDialogs",
++                            "AA_SynthesizeMouseForUnhandledTabletEvents",
++                            "AA_CompressHighFrequencyEvents",
++                            "AA_DontCheckOpenGLContextThreadAffinity",
++                            "AA_DisableShaderDiskCache",
++                            "AA_DontShowShortcutsInContextMenus",
++                            "AA_CompressTabletEvents",
++                            "AA_DisableWindowContextHelpButton",
++                            "AA_DisableSessionManager",
++                            "AA_AttributeCount"
++                        ]
++                    },
++                    {
++                        "alias": "ImageConversionFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "ImageConversionFlags",
++                        "values": [
++                            "ColorMode_Mask",
++                            "AutoColor",
++                            "ColorOnly",
++                            "MonoOnly",
++                            "AlphaDither_Mask",
++                            "ThresholdAlphaDither",
++                            "OrderedAlphaDither",
++                            "DiffuseAlphaDither",
++                            "NoAlpha",
++                            "Dither_Mask",
++                            "DiffuseDither",
++                            "OrderedDither",
++                            "ThresholdDither",
++                            "DitherMode_Mask",
++                            "AutoDither",
++                            "PreferDither",
++                            "AvoidDither",
++                            "NoOpaqueDetection",
++                            "NoFormatConversion"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "BGMode",
++                        "values": [
++                            "TransparentMode",
++                            "OpaqueMode"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Key",
++                        "values": [
++                            "Key_Escape",
++                            "Key_Tab",
++                            "Key_Backtab",
++                            "Key_Backspace",
++                            "Key_Return",
++                            "Key_Enter",
++                            "Key_Insert",
++                            "Key_Delete",
++                            "Key_Pause",
++                            "Key_Print",
++                            "Key_SysReq",
++                            "Key_Clear",
++                            "Key_Home",
++                            "Key_End",
++                            "Key_Left",
++                            "Key_Up",
++                            "Key_Right",
++                            "Key_Down",
++                            "Key_PageUp",
++                            "Key_PageDown",
++                            "Key_Shift",
++                            "Key_Control",
++                            "Key_Meta",
++                            "Key_Alt",
++                            "Key_CapsLock",
++                            "Key_NumLock",
++                            "Key_ScrollLock",
++                            "Key_F1",
++                            "Key_F2",
++                            "Key_F3",
++                            "Key_F4",
++                            "Key_F5",
++                            "Key_F6",
++                            "Key_F7",
++                            "Key_F8",
++                            "Key_F9",
++                            "Key_F10",
++                            "Key_F11",
++                            "Key_F12",
++                            "Key_F13",
++                            "Key_F14",
++                            "Key_F15",
++                            "Key_F16",
++                            "Key_F17",
++                            "Key_F18",
++                            "Key_F19",
++                            "Key_F20",
++                            "Key_F21",
++                            "Key_F22",
++                            "Key_F23",
++                            "Key_F24",
++                            "Key_F25",
++                            "Key_F26",
++                            "Key_F27",
++                            "Key_F28",
++                            "Key_F29",
++                            "Key_F30",
++                            "Key_F31",
++                            "Key_F32",
++                            "Key_F33",
++                            "Key_F34",
++                            "Key_F35",
++                            "Key_Super_L",
++                            "Key_Super_R",
++                            "Key_Menu",
++                            "Key_Hyper_L",
++                            "Key_Hyper_R",
++                            "Key_Help",
++                            "Key_Direction_L",
++                            "Key_Direction_R",
++                            "Key_Space",
++                            "Key_Any",
++                            "Key_Exclam",
++                            "Key_QuoteDbl",
++                            "Key_NumberSign",
++                            "Key_Dollar",
++                            "Key_Percent",
++                            "Key_Ampersand",
++                            "Key_Apostrophe",
++                            "Key_ParenLeft",
++                            "Key_ParenRight",
++                            "Key_Asterisk",
++                            "Key_Plus",
++                            "Key_Comma",
++                            "Key_Minus",
++                            "Key_Period",
++                            "Key_Slash",
++                            "Key_0",
++                            "Key_1",
++                            "Key_2",
++                            "Key_3",
++                            "Key_4",
++                            "Key_5",
++                            "Key_6",
++                            "Key_7",
++                            "Key_8",
++                            "Key_9",
++                            "Key_Colon",
++                            "Key_Semicolon",
++                            "Key_Less",
++                            "Key_Equal",
++                            "Key_Greater",
++                            "Key_Question",
++                            "Key_At",
++                            "Key_A",
++                            "Key_B",
++                            "Key_C",
++                            "Key_D",
++                            "Key_E",
++                            "Key_F",
++                            "Key_G",
++                            "Key_H",
++                            "Key_I",
++                            "Key_J",
++                            "Key_K",
++                            "Key_L",
++                            "Key_M",
++                            "Key_N",
++                            "Key_O",
++                            "Key_P",
++                            "Key_Q",
++                            "Key_R",
++                            "Key_S",
++                            "Key_T",
++                            "Key_U",
++                            "Key_V",
++                            "Key_W",
++                            "Key_X",
++                            "Key_Y",
++                            "Key_Z",
++                            "Key_BracketLeft",
++                            "Key_Backslash",
++                            "Key_BracketRight",
++                            "Key_AsciiCircum",
++                            "Key_Underscore",
++                            "Key_QuoteLeft",
++                            "Key_BraceLeft",
++                            "Key_Bar",
++                            "Key_BraceRight",
++                            "Key_AsciiTilde",
++                            "Key_nobreakspace",
++                            "Key_exclamdown",
++                            "Key_cent",
++                            "Key_sterling",
++                            "Key_currency",
++                            "Key_yen",
++                            "Key_brokenbar",
++                            "Key_section",
++                            "Key_diaeresis",
++                            "Key_copyright",
++                            "Key_ordfeminine",
++                            "Key_guillemotleft",
++                            "Key_notsign",
++                            "Key_hyphen",
++                            "Key_registered",
++                            "Key_macron",
++                            "Key_degree",
++                            "Key_plusminus",
++                            "Key_twosuperior",
++                            "Key_threesuperior",
++                            "Key_acute",
++                            "Key_mu",
++                            "Key_paragraph",
++                            "Key_periodcentered",
++                            "Key_cedilla",
++                            "Key_onesuperior",
++                            "Key_masculine",
++                            "Key_guillemotright",
++                            "Key_onequarter",
++                            "Key_onehalf",
++                            "Key_threequarters",
++                            "Key_questiondown",
++                            "Key_Agrave",
++                            "Key_Aacute",
++                            "Key_Acircumflex",
++                            "Key_Atilde",
++                            "Key_Adiaeresis",
++                            "Key_Aring",
++                            "Key_AE",
++                            "Key_Ccedilla",
++                            "Key_Egrave",
++                            "Key_Eacute",
++                            "Key_Ecircumflex",
++                            "Key_Ediaeresis",
++                            "Key_Igrave",
++                            "Key_Iacute",
++                            "Key_Icircumflex",
++                            "Key_Idiaeresis",
++                            "Key_ETH",
++                            "Key_Ntilde",
++                            "Key_Ograve",
++                            "Key_Oacute",
++                            "Key_Ocircumflex",
++                            "Key_Otilde",
++                            "Key_Odiaeresis",
++                            "Key_multiply",
++                            "Key_Ooblique",
++                            "Key_Ugrave",
++                            "Key_Uacute",
++                            "Key_Ucircumflex",
++                            "Key_Udiaeresis",
++                            "Key_Yacute",
++                            "Key_THORN",
++                            "Key_ssharp",
++                            "Key_division",
++                            "Key_ydiaeresis",
++                            "Key_AltGr",
++                            "Key_Multi_key",
++                            "Key_Codeinput",
++                            "Key_SingleCandidate",
++                            "Key_MultipleCandidate",
++                            "Key_PreviousCandidate",
++                            "Key_Mode_switch",
++                            "Key_Kanji",
++                            "Key_Muhenkan",
++                            "Key_Henkan",
++                            "Key_Romaji",
++                            "Key_Hiragana",
++                            "Key_Katakana",
++                            "Key_Hiragana_Katakana",
++                            "Key_Zenkaku",
++                            "Key_Hankaku",
++                            "Key_Zenkaku_Hankaku",
++                            "Key_Touroku",
++                            "Key_Massyo",
++                            "Key_Kana_Lock",
++                            "Key_Kana_Shift",
++                            "Key_Eisu_Shift",
++                            "Key_Eisu_toggle",
++                            "Key_Hangul",
++                            "Key_Hangul_Start",
++                            "Key_Hangul_End",
++                            "Key_Hangul_Hanja",
++                            "Key_Hangul_Jamo",
++                            "Key_Hangul_Romaja",
++                            "Key_Hangul_Jeonja",
++                            "Key_Hangul_Banja",
++                            "Key_Hangul_PreHanja",
++                            "Key_Hangul_PostHanja",
++                            "Key_Hangul_Special",
++                            "Key_Dead_Grave",
++                            "Key_Dead_Acute",
++                            "Key_Dead_Circumflex",
++                            "Key_Dead_Tilde",
++                            "Key_Dead_Macron",
++                            "Key_Dead_Breve",
++                            "Key_Dead_Abovedot",
++                            "Key_Dead_Diaeresis",
++                            "Key_Dead_Abovering",
++                            "Key_Dead_Doubleacute",
++                            "Key_Dead_Caron",
++                            "Key_Dead_Cedilla",
++                            "Key_Dead_Ogonek",
++                            "Key_Dead_Iota",
++                            "Key_Dead_Voiced_Sound",
++                            "Key_Dead_Semivoiced_Sound",
++                            "Key_Dead_Belowdot",
++                            "Key_Dead_Hook",
++                            "Key_Dead_Horn",
++                            "Key_Dead_Stroke",
++                            "Key_Dead_Abovecomma",
++                            "Key_Dead_Abovereversedcomma",
++                            "Key_Dead_Doublegrave",
++                            "Key_Dead_Belowring",
++                            "Key_Dead_Belowmacron",
++                            "Key_Dead_Belowcircumflex",
++                            "Key_Dead_Belowtilde",
++                            "Key_Dead_Belowbreve",
++                            "Key_Dead_Belowdiaeresis",
++                            "Key_Dead_Invertedbreve",
++                            "Key_Dead_Belowcomma",
++                            "Key_Dead_Currency",
++                            "Key_Dead_a",
++                            "Key_Dead_A",
++                            "Key_Dead_e",
++                            "Key_Dead_E",
++                            "Key_Dead_i",
++                            "Key_Dead_I",
++                            "Key_Dead_o",
++                            "Key_Dead_O",
++                            "Key_Dead_u",
++                            "Key_Dead_U",
++                            "Key_Dead_Small_Schwa",
++                            "Key_Dead_Capital_Schwa",
++                            "Key_Dead_Greek",
++                            "Key_Dead_Lowline",
++                            "Key_Dead_Aboveverticalline",
++                            "Key_Dead_Belowverticalline",
++                            "Key_Dead_Longsolidusoverlay",
++                            "Key_Back",
++                            "Key_Forward",
++                            "Key_Stop",
++                            "Key_Refresh",
++                            "Key_VolumeDown",
++                            "Key_VolumeMute",
++                            "Key_VolumeUp",
++                            "Key_BassBoost",
++                            "Key_BassUp",
++                            "Key_BassDown",
++                            "Key_TrebleUp",
++                            "Key_TrebleDown",
++                            "Key_MediaPlay",
++                            "Key_MediaStop",
++                            "Key_MediaPrevious",
++                            "Key_MediaNext",
++                            "Key_MediaRecord",
++                            "Key_MediaPause",
++                            "Key_MediaTogglePlayPause",
++                            "Key_HomePage",
++                            "Key_Favorites",
++                            "Key_Search",
++                            "Key_Standby",
++                            "Key_OpenUrl",
++                            "Key_LaunchMail",
++                            "Key_LaunchMedia",
++                            "Key_Launch0",
++                            "Key_Launch1",
++                            "Key_Launch2",
++                            "Key_Launch3",
++                            "Key_Launch4",
++                            "Key_Launch5",
++                            "Key_Launch6",
++                            "Key_Launch7",
++                            "Key_Launch8",
++                            "Key_Launch9",
++                            "Key_LaunchA",
++                            "Key_LaunchB",
++                            "Key_LaunchC",
++                            "Key_LaunchD",
++                            "Key_LaunchE",
++                            "Key_LaunchF",
++                            "Key_MonBrightnessUp",
++                            "Key_MonBrightnessDown",
++                            "Key_KeyboardLightOnOff",
++                            "Key_KeyboardBrightnessUp",
++                            "Key_KeyboardBrightnessDown",
++                            "Key_PowerOff",
++                            "Key_WakeUp",
++                            "Key_Eject",
++                            "Key_ScreenSaver",
++                            "Key_WWW",
++                            "Key_Memo",
++                            "Key_LightBulb",
++                            "Key_Shop",
++                            "Key_History",
++                            "Key_AddFavorite",
++                            "Key_HotLinks",
++                            "Key_BrightnessAdjust",
++                            "Key_Finance",
++                            "Key_Community",
++                            "Key_AudioRewind",
++                            "Key_BackForward",
++                            "Key_ApplicationLeft",
++                            "Key_ApplicationRight",
++                            "Key_Book",
++                            "Key_CD",
++                            "Key_Calculator",
++                            "Key_ToDoList",
++                            "Key_ClearGrab",
++                            "Key_Close",
++                            "Key_Copy",
++                            "Key_Cut",
++                            "Key_Display",
++                            "Key_DOS",
++                            "Key_Documents",
++                            "Key_Excel",
++                            "Key_Explorer",
++                            "Key_Game",
++                            "Key_Go",
++                            "Key_iTouch",
++                            "Key_LogOff",
++                            "Key_Market",
++                            "Key_Meeting",
++                            "Key_MenuKB",
++                            "Key_MenuPB",
++                            "Key_MySites",
++                            "Key_News",
++                            "Key_OfficeHome",
++                            "Key_Option",
++                            "Key_Paste",
++                            "Key_Phone",
++                            "Key_Calendar",
++                            "Key_Reply",
++                            "Key_Reload",
++                            "Key_RotateWindows",
++                            "Key_RotationPB",
++                            "Key_RotationKB",
++                            "Key_Save",
++                            "Key_Send",
++                            "Key_Spell",
++                            "Key_SplitScreen",
++                            "Key_Support",
++                            "Key_TaskPane",
++                            "Key_Terminal",
++                            "Key_Tools",
++                            "Key_Travel",
++                            "Key_Video",
++                            "Key_Word",
++                            "Key_Xfer",
++                            "Key_ZoomIn",
++                            "Key_ZoomOut",
++                            "Key_Away",
++                            "Key_Messenger",
++                            "Key_WebCam",
++                            "Key_MailForward",
++                            "Key_Pictures",
++                            "Key_Music",
++                            "Key_Battery",
++                            "Key_Bluetooth",
++                            "Key_WLAN",
++                            "Key_UWB",
++                            "Key_AudioForward",
++                            "Key_AudioRepeat",
++                            "Key_AudioRandomPlay",
++                            "Key_Subtitle",
++                            "Key_AudioCycleTrack",
++                            "Key_Time",
++                            "Key_Hibernate",
++                            "Key_View",
++                            "Key_TopMenu",
++                            "Key_PowerDown",
++                            "Key_Suspend",
++                            "Key_ContrastAdjust",
++                            "Key_LaunchG",
++                            "Key_LaunchH",
++                            "Key_TouchpadToggle",
++                            "Key_TouchpadOn",
++                            "Key_TouchpadOff",
++                            "Key_MicMute",
++                            "Key_Red",
++                            "Key_Green",
++                            "Key_Yellow",
++                            "Key_Blue",
++                            "Key_ChannelUp",
++                            "Key_ChannelDown",
++                            "Key_Guide",
++                            "Key_Info",
++                            "Key_Settings",
++                            "Key_MicVolumeUp",
++                            "Key_MicVolumeDown",
++                            "Key_New",
++                            "Key_Open",
++                            "Key_Find",
++                            "Key_Undo",
++                            "Key_Redo",
++                            "Key_MediaLast",
++                            "Key_Select",
++                            "Key_Yes",
++                            "Key_No",
++                            "Key_Cancel",
++                            "Key_Printer",
++                            "Key_Execute",
++                            "Key_Sleep",
++                            "Key_Play",
++                            "Key_Zoom",
++                            "Key_Exit",
++                            "Key_Context1",
++                            "Key_Context2",
++                            "Key_Context3",
++                            "Key_Context4",
++                            "Key_Call",
++                            "Key_Hangup",
++                            "Key_Flip",
++                            "Key_ToggleCallHangup",
++                            "Key_VoiceDial",
++                            "Key_LastNumberRedial",
++                            "Key_Camera",
++                            "Key_CameraFocus",
++                            "Key_unknown"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ArrowType",
++                        "values": [
++                            "NoArrow",
++                            "UpArrow",
++                            "DownArrow",
++                            "LeftArrow",
++                            "RightArrow"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "PenStyle",
++                        "values": [
++                            "NoPen",
++                            "SolidLine",
++                            "DashLine",
++                            "DotLine",
++                            "DashDotLine",
++                            "DashDotDotLine",
++                            "CustomDashLine"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "PenCapStyle",
++                        "values": [
++                            "FlatCap",
++                            "SquareCap",
++                            "RoundCap",
++                            "MPenCapStyle"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "PenJoinStyle",
++                        "values": [
++                            "MiterJoin",
++                            "BevelJoin",
++                            "RoundJoin",
++                            "SvgMiterJoin",
++                            "MPenJoinStyle"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "BrushStyle",
++                        "values": [
++                            "NoBrush",
++                            "SolidPattern",
++                            "Dense1Pattern",
++                            "Dense2Pattern",
++                            "Dense3Pattern",
++                            "Dense4Pattern",
++                            "Dense5Pattern",
++                            "Dense6Pattern",
++                            "Dense7Pattern",
++                            "HorPattern",
++                            "VerPattern",
++                            "CrossPattern",
++                            "BDiagPattern",
++                            "FDiagPattern",
++                            "DiagCrossPattern",
++                            "LinearGradientPattern",
++                            "RadialGradientPattern",
++                            "ConicalGradientPattern",
++                            "TexturePattern"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SizeMode",
++                        "values": [
++                            "AbsoluteSize",
++                            "RelativeSize"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "CursorShape",
++                        "values": [
++                            "ArrowCursor",
++                            "UpArrowCursor",
++                            "CrossCursor",
++                            "WaitCursor",
++                            "IBeamCursor",
++                            "SizeVerCursor",
++                            "SizeHorCursor",
++                            "SizeBDiagCursor",
++                            "SizeFDiagCursor",
++                            "SizeAllCursor",
++                            "BlankCursor",
++                            "SplitVCursor",
++                            "SplitHCursor",
++                            "PointingHandCursor",
++                            "ForbiddenCursor",
++                            "WhatsThisCursor",
++                            "BusyCursor",
++                            "OpenHandCursor",
++                            "ClosedHandCursor",
++                            "DragCopyCursor",
++                            "DragMoveCursor",
++                            "DragLinkCursor",
++                            "LastCursor",
++                            "BitmapCursor",
++                            "CustomCursor"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TextFormat",
++                        "values": [
++                            "PlainText",
++                            "RichText",
++                            "AutoText",
++                            "MarkdownText"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "AspectRatioMode",
++                        "values": [
++                            "IgnoreAspectRatio",
++                            "KeepAspectRatio",
++                            "KeepAspectRatioByExpanding"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "DockWidgetArea",
++                        "values": [
++                            "LeftDockWidgetArea",
++                            "RightDockWidgetArea",
++                            "TopDockWidgetArea",
++                            "BottomDockWidgetArea",
++                            "DockWidgetArea_Mask",
++                            "AllDockWidgetAreas",
++                            "NoDockWidgetArea"
++                        ]
++                    },
++                    {
++                        "alias": "DockWidgetArea",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "DockWidgetAreas",
++                        "values": [
++                            "LeftDockWidgetArea",
++                            "RightDockWidgetArea",
++                            "TopDockWidgetArea",
++                            "BottomDockWidgetArea",
++                            "DockWidgetArea_Mask",
++                            "AllDockWidgetAreas",
++                            "NoDockWidgetArea"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ToolBarArea",
++                        "values": [
++                            "LeftToolBarArea",
++                            "RightToolBarArea",
++                            "TopToolBarArea",
++                            "BottomToolBarArea",
++                            "ToolBarArea_Mask",
++                            "AllToolBarAreas",
++                            "NoToolBarArea"
++                        ]
++                    },
++                    {
++                        "alias": "ToolBarArea",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "ToolBarAreas",
++                        "values": [
++                            "LeftToolBarArea",
++                            "RightToolBarArea",
++                            "TopToolBarArea",
++                            "BottomToolBarArea",
++                            "ToolBarArea_Mask",
++                            "AllToolBarAreas",
++                            "NoToolBarArea"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "DateFormat",
++                        "values": [
++                            "TextDate",
++                            "ISODate",
++                            "SystemLocaleDate",
++                            "LocalDate",
++                            "LocaleDate",
++                            "SystemLocaleShortDate",
++                            "SystemLocaleLongDate",
++                            "DefaultLocaleShortDate",
++                            "DefaultLocaleLongDate",
++                            "RFC2822Date",
++                            "ISODateWithMs"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TimeSpec",
++                        "values": [
++                            "LocalTime",
++                            "UTC",
++                            "OffsetFromUTC",
++                            "TimeZone"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "DayOfWeek",
++                        "values": [
++                            "Monday",
++                            "Tuesday",
++                            "Wednesday",
++                            "Thursday",
++                            "Friday",
++                            "Saturday",
++                            "Sunday"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ScrollBarPolicy",
++                        "values": [
++                            "ScrollBarAsNeeded",
++                            "ScrollBarAlwaysOff",
++                            "ScrollBarAlwaysOn"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "CaseSensitivity",
++                        "values": [
++                            "CaseInsensitive",
++                            "CaseSensitive"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Corner",
++                        "values": [
++                            "TopLeftCorner",
++                            "TopRightCorner",
++                            "BottomLeftCorner",
++                            "BottomRightCorner"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Edge",
++                        "values": [
++                            "TopEdge",
++                            "LeftEdge",
++                            "RightEdge",
++                            "BottomEdge"
++                        ]
++                    },
++                    {
++                        "alias": "Edge",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "Edges",
++                        "values": [
++                            "TopEdge",
++                            "LeftEdge",
++                            "RightEdge",
++                            "BottomEdge"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ConnectionType",
++                        "values": [
++                            "AutoConnection",
++                            "DirectConnection",
++                            "QueuedConnection",
++                            "BlockingQueuedConnection",
++                            "UniqueConnection"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ShortcutContext",
++                        "values": [
++                            "WidgetShortcut",
++                            "WindowShortcut",
++                            "ApplicationShortcut",
++                            "WidgetWithChildrenShortcut"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "FillRule",
++                        "values": [
++                            "OddEvenFill",
++                            "WindingFill"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "MaskMode",
++                        "values": [
++                            "MaskInColor",
++                            "MaskOutColor"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ClipOperation",
++                        "values": [
++                            "NoClip",
++                            "ReplaceClip",
++                            "IntersectClip"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ItemSelectionMode",
++                        "values": [
++                            "ContainsItemShape",
++                            "IntersectsItemShape",
++                            "ContainsItemBoundingRect",
++                            "IntersectsItemBoundingRect"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ItemSelectionOperation",
++                        "values": [
++                            "ReplaceSelection",
++                            "AddToSelection"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TransformationMode",
++                        "values": [
++                            "FastTransformation",
++                            "SmoothTransformation"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Axis",
++                        "values": [
++                            "XAxis",
++                            "YAxis",
++                            "ZAxis"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "FocusReason",
++                        "values": [
++                            "MouseFocusReason",
++                            "TabFocusReason",
++                            "BacktabFocusReason",
++                            "ActiveWindowFocusReason",
++                            "PopupFocusReason",
++                            "ShortcutFocusReason",
++                            "MenuBarFocusReason",
++                            "OtherFocusReason",
++                            "NoFocusReason"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ContextMenuPolicy",
++                        "values": [
++                            "NoContextMenu",
++                            "DefaultContextMenu",
++                            "ActionsContextMenu",
++                            "CustomContextMenu",
++                            "PreventContextMenu"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "InputMethodQuery",
++                        "values": [
++                            "ImEnabled",
++                            "ImCursorRectangle",
++                            "ImMicroFocus",
++                            "ImFont",
++                            "ImCursorPosition",
++                            "ImSurroundingText",
++                            "ImCurrentSelection",
++                            "ImMaximumTextLength",
++                            "ImAnchorPosition",
++                            "ImHints",
++                            "ImPreferredLanguage",
++                            "ImAbsolutePosition",
++                            "ImTextBeforeCursor",
++                            "ImTextAfterCursor",
++                            "ImEnterKeyType",
++                            "ImAnchorRectangle",
++                            "ImInputItemClipRectangle",
++                            "ImPlatformData",
++                            "ImQueryInput",
++                            "ImQueryAll"
++                        ]
++                    },
++                    {
++                        "alias": "InputMethodQuery",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "InputMethodQueries",
++                        "values": [
++                            "ImEnabled",
++                            "ImCursorRectangle",
++                            "ImMicroFocus",
++                            "ImFont",
++                            "ImCursorPosition",
++                            "ImSurroundingText",
++                            "ImCurrentSelection",
++                            "ImMaximumTextLength",
++                            "ImAnchorPosition",
++                            "ImHints",
++                            "ImPreferredLanguage",
++                            "ImAbsolutePosition",
++                            "ImTextBeforeCursor",
++                            "ImTextAfterCursor",
++                            "ImEnterKeyType",
++                            "ImAnchorRectangle",
++                            "ImInputItemClipRectangle",
++                            "ImPlatformData",
++                            "ImQueryInput",
++                            "ImQueryAll"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "InputMethodHint",
++                        "values": [
++                            "ImhNone",
++                            "ImhHiddenText",
++                            "ImhSensitiveData",
++                            "ImhNoAutoUppercase",
++                            "ImhPreferNumbers",
++                            "ImhPreferUppercase",
++                            "ImhPreferLowercase",
++                            "ImhNoPredictiveText",
++                            "ImhDate",
++                            "ImhTime",
++                            "ImhPreferLatin",
++                            "ImhMultiLine",
++                            "ImhNoEditMenu",
++                            "ImhNoTextHandles",
++                            "ImhDigitsOnly",
++                            "ImhFormattedNumbersOnly",
++                            "ImhUppercaseOnly",
++                            "ImhLowercaseOnly",
++                            "ImhDialableCharactersOnly",
++                            "ImhEmailCharactersOnly",
++                            "ImhUrlCharactersOnly",
++                            "ImhLatinOnly",
++                            "ImhExclusiveInputMask"
++                        ]
++                    },
++                    {
++                        "alias": "InputMethodHint",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "InputMethodHints",
++                        "values": [
++                            "ImhNone",
++                            "ImhHiddenText",
++                            "ImhSensitiveData",
++                            "ImhNoAutoUppercase",
++                            "ImhPreferNumbers",
++                            "ImhPreferUppercase",
++                            "ImhPreferLowercase",
++                            "ImhNoPredictiveText",
++                            "ImhDate",
++                            "ImhTime",
++                            "ImhPreferLatin",
++                            "ImhMultiLine",
++                            "ImhNoEditMenu",
++                            "ImhNoTextHandles",
++                            "ImhDigitsOnly",
++                            "ImhFormattedNumbersOnly",
++                            "ImhUppercaseOnly",
++                            "ImhLowercaseOnly",
++                            "ImhDialableCharactersOnly",
++                            "ImhEmailCharactersOnly",
++                            "ImhUrlCharactersOnly",
++                            "ImhLatinOnly",
++                            "ImhExclusiveInputMask"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "EnterKeyType",
++                        "values": [
++                            "EnterKeyDefault",
++                            "EnterKeyReturn",
++                            "EnterKeyDone",
++                            "EnterKeyGo",
++                            "EnterKeySend",
++                            "EnterKeySearch",
++                            "EnterKeyNext",
++                            "EnterKeyPrevious"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ToolButtonStyle",
++                        "values": [
++                            "ToolButtonIconOnly",
++                            "ToolButtonTextOnly",
++                            "ToolButtonTextBesideIcon",
++                            "ToolButtonTextUnderIcon",
++                            "ToolButtonFollowStyle"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "LayoutDirection",
++                        "values": [
++                            "LeftToRight",
++                            "RightToLeft",
++                            "LayoutDirectionAuto"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "DropAction",
++                        "values": [
++                            "CopyAction",
++                            "MoveAction",
++                            "LinkAction",
++                            "ActionMask",
++                            "TargetMoveAction",
++                            "IgnoreAction"
++                        ]
++                    },
++                    {
++                        "alias": "DropAction",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "DropActions",
++                        "values": [
++                            "CopyAction",
++                            "MoveAction",
++                            "LinkAction",
++                            "ActionMask",
++                            "TargetMoveAction",
++                            "IgnoreAction"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "CheckState",
++                        "values": [
++                            "Unchecked",
++                            "PartiallyChecked",
++                            "Checked"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ItemDataRole",
++                        "values": [
++                            "DisplayRole",
++                            "DecorationRole",
++                            "EditRole",
++                            "ToolTipRole",
++                            "StatusTipRole",
++                            "WhatsThisRole",
++                            "FontRole",
++                            "TextAlignmentRole",
++                            "BackgroundRole",
++                            "ForegroundRole",
++                            "BackgroundColorRole",
++                            "TextColorRole",
++                            "CheckStateRole",
++                            "AccessibleTextRole",
++                            "AccessibleDescriptionRole",
++                            "SizeHintRole",
++                            "InitialSortOrderRole",
++                            "DisplayPropertyRole",
++                            "DecorationPropertyRole",
++                            "ToolTipPropertyRole",
++                            "StatusTipPropertyRole",
++                            "WhatsThisPropertyRole",
++                            "UserRole"
++                        ]
++                    },
++                    {
++                        "alias": "ItemFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "ItemFlags",
++                        "values": [
++                            "NoItemFlags",
++                            "ItemIsSelectable",
++                            "ItemIsEditable",
++                            "ItemIsDragEnabled",
++                            "ItemIsDropEnabled",
++                            "ItemIsUserCheckable",
++                            "ItemIsEnabled",
++                            "ItemIsAutoTristate",
++                            "ItemIsTristate",
++                            "ItemNeverHasChildren",
++                            "ItemIsUserTristate"
++                        ]
++                    },
++                    {
++                        "alias": "MatchFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "MatchFlags",
++                        "values": [
++                            "MatchExactly",
++                            "MatchContains",
++                            "MatchStartsWith",
++                            "MatchEndsWith",
++                            "MatchRegExp",
++                            "MatchWildcard",
++                            "MatchFixedString",
++                            "MatchRegularExpression",
++                            "MatchCaseSensitive",
++                            "MatchWrap",
++                            "MatchRecursive"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "WindowModality",
++                        "values": [
++                            "NonModal",
++                            "WindowModal",
++                            "ApplicationModal"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TextInteractionFlag",
++                        "values": [
++                            "NoTextInteraction",
++                            "TextSelectableByMouse",
++                            "TextSelectableByKeyboard",
++                            "LinksAccessibleByMouse",
++                            "LinksAccessibleByKeyboard",
++                            "TextEditable",
++                            "TextEditorInteraction",
++                            "TextBrowserInteraction"
++                        ]
++                    },
++                    {
++                        "alias": "TextInteractionFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "TextInteractionFlags",
++                        "values": [
++                            "NoTextInteraction",
++                            "TextSelectableByMouse",
++                            "TextSelectableByKeyboard",
++                            "LinksAccessibleByMouse",
++                            "LinksAccessibleByKeyboard",
++                            "TextEditable",
++                            "TextEditorInteraction",
++                            "TextBrowserInteraction"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SizeHint",
++                        "values": [
++                            "MinimumSize",
++                            "PreferredSize",
++                            "MaximumSize",
++                            "MinimumDescent",
++                            "NSizeHints"
++                        ]
++                    },
++                    {
++                        "alias": "TouchPointState",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "TouchPointStates",
++                        "values": [
++                            "TouchPointPressed",
++                            "TouchPointMoved",
++                            "TouchPointStationary",
++                            "TouchPointReleased"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "GestureState",
++                        "values": [
++                            "NoGesture",
++                            "GestureStarted",
++                            "GestureUpdated",
++                            "GestureFinished",
++                            "GestureCanceled"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "GestureType",
++                        "values": [
++                            "TapGesture",
++                            "TapAndHoldGesture",
++                            "PanGesture",
++                            "PinchGesture",
++                            "SwipeGesture",
++                            "CustomGesture",
++                            "LastGestureType"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "NativeGestureType",
++                        "values": [
++                            "BeginNativeGesture",
++                            "EndNativeGesture",
++                            "PanNativeGesture",
++                            "ZoomNativeGesture",
++                            "SmartZoomNativeGesture",
++                            "RotateNativeGesture",
++                            "SwipeNativeGesture"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "CursorMoveStyle",
++                        "values": [
++                            "LogicalMoveStyle",
++                            "VisualMoveStyle"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TimerType",
++                        "values": [
++                            "PreciseTimer",
++                            "CoarseTimer",
++                            "VeryCoarseTimer"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ScrollPhase",
++                        "values": [
++                            "NoScrollPhase",
++                            "ScrollBegin",
++                            "ScrollUpdate",
++                            "ScrollEnd",
++                            "ScrollMomentum"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "MouseEventSource",
++                        "values": [
++                            "MouseEventNotSynthesized",
++                            "MouseEventSynthesizedBySystem",
++                            "MouseEventSynthesizedByQt",
++                            "MouseEventSynthesizedByApplication"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "MouseEventFlag",
++                        "values": [
++                            "MouseEventCreatedDoubleClick",
++                            "MouseEventFlagMask"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ChecksumType",
++                        "values": [
++                            "ChecksumIso3309",
++                            "ChecksumItuV41"
++                        ]
++                    },
++                    {
++                        "isClass": true,
++                        "isFlag": false,
++                        "name": "HighDpiScaleFactorRoundingPolicy",
++                        "values": [
++                            "Unset",
++                            "Round",
++                            "Ceil",
++                            "Floor",
++                            "RoundPreferFloor",
++                            "PassThrough"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "Qt"
++            }
++        ],
++        "inputFile": "qnamespace.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QThread",
++                "object": true,
++                "qualifiedClassName": "QThread",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "started",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "finished",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "Priority"
++                            }
++                        ],
++                        "name": "start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "terminate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "quit",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qthread.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QThreadPool",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "expiryTimeout",
++                        "read": "expiryTimeout",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setExpiryTimeout"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maxThreadCount",
++                        "read": "maxThreadCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaxThreadCount"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "activeThreadCount",
++                        "read": "activeThreadCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "stackSize",
++                        "read": "stackSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "uint",
++                        "user": false,
++                        "write": "setStackSize"
++                    }
++                ],
++                "qualifiedClassName": "QThreadPool",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qthreadpool.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFutureWatcherBase",
++                "object": true,
++                "qualifiedClassName": "QFutureWatcherBase",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "started",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "finished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "canceled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "paused",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resumed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "resultIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "resultReadyAt",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "beginIndex",
++                                "type": "int"
++                            },
++                            {
++                                "name": "endIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "resultsReadyAt",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "minimum",
++                                "type": "int"
++                            },
++                            {
++                                "name": "maximum",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "progressRangeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "progressValue",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "progressValueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "progressText",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "progressTextChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "cancel",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "paused",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setPaused",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "pause",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resume",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "togglePaused",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfuturewatcher.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCryptographicHash",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Algorithm",
++                        "values": [
++                            "Md4",
++                            "Md5",
++                            "Sha1",
++                            "Sha224",
++                            "Sha256",
++                            "Sha384",
++                            "Sha512",
++                            "Keccak_224",
++                            "Keccak_256",
++                            "Keccak_384",
++                            "Keccak_512",
++                            "RealSha3_224",
++                            "RealSha3_256",
++                            "RealSha3_384",
++                            "RealSha3_512",
++                            "Sha3_224",
++                            "Sha3_256",
++                            "Sha3_384",
++                            "Sha3_512"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QCryptographicHash"
++            }
++        ],
++        "inputFile": "qcryptographichash.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QEasingCurve",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Type",
++                        "values": [
++                            "Linear",
++                            "InQuad",
++                            "OutQuad",
++                            "InOutQuad",
++                            "OutInQuad",
++                            "InCubic",
++                            "OutCubic",
++                            "InOutCubic",
++                            "OutInCubic",
++                            "InQuart",
++                            "OutQuart",
++                            "InOutQuart",
++                            "OutInQuart",
++                            "InQuint",
++                            "OutQuint",
++                            "InOutQuint",
++                            "OutInQuint",
++                            "InSine",
++                            "OutSine",
++                            "InOutSine",
++                            "OutInSine",
++                            "InExpo",
++                            "OutExpo",
++                            "InOutExpo",
++                            "OutInExpo",
++                            "InCirc",
++                            "OutCirc",
++                            "InOutCirc",
++                            "OutInCirc",
++                            "InElastic",
++                            "OutElastic",
++                            "InOutElastic",
++                            "OutInElastic",
++                            "InBack",
++                            "OutBack",
++                            "InOutBack",
++                            "OutInBack",
++                            "InBounce",
++                            "OutBounce",
++                            "InOutBounce",
++                            "OutInBounce",
++                            "InCurve",
++                            "OutCurve",
++                            "SineCurve",
++                            "CosineCurve",
++                            "BezierSpline",
++                            "TCBSpline",
++                            "Custom",
++                            "NCurveTypes"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QEasingCurve"
++            }
++        ],
++        "inputFile": "qeasingcurve.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTimeLine",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "duration",
++                        "read": "duration",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDuration"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "updateInterval",
++                        "read": "updateInterval",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setUpdateInterval"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentTime",
++                        "read": "currentTime",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "direction",
++                        "read": "direction",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Direction",
++                        "user": false,
++                        "write": "setDirection"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "loopCount",
++                        "read": "loopCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setLoopCount"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "curveShape",
++                        "read": "curveShape",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "CurveShape",
++                        "user": false,
++                        "write": "setCurveShape"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "easingCurve",
++                        "read": "easingCurve",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QEasingCurve",
++                        "user": false,
++                        "write": "setEasingCurve"
++                    }
++                ],
++                "qualifiedClassName": "QTimeLine",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "x",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "valueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "frameChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newState",
++                                "type": "QTimeLine::State"
++                            }
++                        ],
++                        "name": "stateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "finished",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resume",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "stop",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "paused",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setPaused",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "msec",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentTime",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "toggleDirection",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtimeline.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QLocale",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Language",
++                        "values": [
++                            "AnyLanguage",
++                            "C",
++                            "Abkhazian",
++                            "Oromo",
++                            "Afar",
++                            "Afrikaans",
++                            "Albanian",
++                            "Amharic",
++                            "Arabic",
++                            "Armenian",
++                            "Assamese",
++                            "Aymara",
++                            "Azerbaijani",
++                            "Bashkir",
++                            "Basque",
++                            "Bengali",
++                            "Dzongkha",
++                            "Bihari",
++                            "Bislama",
++                            "Breton",
++                            "Bulgarian",
++                            "Burmese",
++                            "Belarusian",
++                            "Khmer",
++                            "Catalan",
++                            "Chinese",
++                            "Corsican",
++                            "Croatian",
++                            "Czech",
++                            "Danish",
++                            "Dutch",
++                            "English",
++                            "Esperanto",
++                            "Estonian",
++                            "Faroese",
++                            "Fijian",
++                            "Finnish",
++                            "French",
++                            "WesternFrisian",
++                            "Gaelic",
++                            "Galician",
++                            "Georgian",
++                            "German",
++                            "Greek",
++                            "Greenlandic",
++                            "Guarani",
++                            "Gujarati",
++                            "Hausa",
++                            "Hebrew",
++                            "Hindi",
++                            "Hungarian",
++                            "Icelandic",
++                            "Indonesian",
++                            "Interlingua",
++                            "Interlingue",
++                            "Inuktitut",
++                            "Inupiak",
++                            "Irish",
++                            "Italian",
++                            "Japanese",
++                            "Javanese",
++                            "Kannada",
++                            "Kashmiri",
++                            "Kazakh",
++                            "Kinyarwanda",
++                            "Kirghiz",
++                            "Korean",
++                            "Kurdish",
++                            "Rundi",
++                            "Lao",
++                            "Latin",
++                            "Latvian",
++                            "Lingala",
++                            "Lithuanian",
++                            "Macedonian",
++                            "Malagasy",
++                            "Malay",
++                            "Malayalam",
++                            "Maltese",
++                            "Maori",
++                            "Marathi",
++                            "Marshallese",
++                            "Mongolian",
++                            "NauruLanguage",
++                            "Nepali",
++                            "NorwegianBokmal",
++                            "Occitan",
++                            "Oriya",
++                            "Pashto",
++                            "Persian",
++                            "Polish",
++                            "Portuguese",
++                            "Punjabi",
++                            "Quechua",
++                            "Romansh",
++                            "Romanian",
++                            "Russian",
++                            "Samoan",
++                            "Sango",
++                            "Sanskrit",
++                            "Serbian",
++                            "Ossetic",
++                            "SouthernSotho",
++                            "Tswana",
++                            "Shona",
++                            "Sindhi",
++                            "Sinhala",
++                            "Swati",
++                            "Slovak",
++                            "Slovenian",
++                            "Somali",
++                            "Spanish",
++                            "Sundanese",
++                            "Swahili",
++                            "Swedish",
++                            "Sardinian",
++                            "Tajik",
++                            "Tamil",
++                            "Tatar",
++                            "Telugu",
++                            "Thai",
++                            "Tibetan",
++                            "Tigrinya",
++                            "Tongan",
++                            "Tsonga",
++                            "Turkish",
++                            "Turkmen",
++                            "Tahitian",
++                            "Uighur",
++                            "Ukrainian",
++                            "Urdu",
++                            "Uzbek",
++                            "Vietnamese",
++                            "Volapuk",
++                            "Welsh",
++                            "Wolof",
++                            "Xhosa",
++                            "Yiddish",
++                            "Yoruba",
++                            "Zhuang",
++                            "Zulu",
++                            "NorwegianNynorsk",
++                            "Bosnian",
++                            "Divehi",
++                            "Manx",
++                            "Cornish",
++                            "Akan",
++                            "Konkani",
++                            "Ga",
++                            "Igbo",
++                            "Kamba",
++                            "Syriac",
++                            "Blin",
++                            "Geez",
++                            "Koro",
++                            "Sidamo",
++                            "Atsam",
++                            "Tigre",
++                            "Jju",
++                            "Friulian",
++                            "Venda",
++                            "Ewe",
++                            "Walamo",
++                            "Hawaiian",
++                            "Tyap",
++                            "Nyanja",
++                            "Filipino",
++                            "SwissGerman",
++                            "SichuanYi",
++                            "Kpelle",
++                            "LowGerman",
++                            "SouthNdebele",
++                            "NorthernSotho",
++                            "NorthernSami",
++                            "Taroko",
++                            "Gusii",
++                            "Taita",
++                            "Fulah",
++                            "Kikuyu",
++                            "Samburu",
++                            "Sena",
++                            "NorthNdebele",
++                            "Rombo",
++                            "Tachelhit",
++                            "Kabyle",
++                            "Nyankole",
++                            "Bena",
++                            "Vunjo",
++                            "Bambara",
++                            "Embu",
++                            "Cherokee",
++                            "Morisyen",
++                            "Makonde",
++                            "Langi",
++                            "Ganda",
++                            "Bemba",
++                            "Kabuverdianu",
++                            "Meru",
++                            "Kalenjin",
++                            "Nama",
++                            "Machame",
++                            "Colognian",
++                            "Masai",
++                            "Soga",
++                            "Luyia",
++                            "Asu",
++                            "Teso",
++                            "Saho",
++                            "KoyraChiini",
++                            "Rwa",
++                            "Luo",
++                            "Chiga",
++                            "CentralMoroccoTamazight",
++                            "KoyraboroSenni",
++                            "Shambala",
++                            "Bodo",
++                            "Avaric",
++                            "Chamorro",
++                            "Chechen",
++                            "Church",
++                            "Chuvash",
++                            "Cree",
++                            "Haitian",
++                            "Herero",
++                            "HiriMotu",
++                            "Kanuri",
++                            "Komi",
++                            "Kongo",
++                            "Kwanyama",
++                            "Limburgish",
++                            "LubaKatanga",
++                            "Luxembourgish",
++                            "Navaho",
++                            "Ndonga",
++                            "Ojibwa",
++                            "Pali",
++                            "Walloon",
++                            "Aghem",
++                            "Basaa",
++                            "Zarma",
++                            "Duala",
++                            "JolaFonyi",
++                            "Ewondo",
++                            "Bafia",
++                            "MakhuwaMeetto",
++                            "Mundang",
++                            "Kwasio",
++                            "Nuer",
++                            "Sakha",
++                            "Sangu",
++                            "CongoSwahili",
++                            "Tasawaq",
++                            "Vai",
++                            "Walser",
++                            "Yangben",
++                            "Avestan",
++                            "Asturian",
++                            "Ngomba",
++                            "Kako",
++                            "Meta",
++                            "Ngiemboon",
++                            "Aragonese",
++                            "Akkadian",
++                            "AncientEgyptian",
++                            "AncientGreek",
++                            "Aramaic",
++                            "Balinese",
++                            "Bamun",
++                            "BatakToba",
++                            "Buginese",
++                            "Buhid",
++                            "Carian",
++                            "Chakma",
++                            "ClassicalMandaic",
++                            "Coptic",
++                            "Dogri",
++                            "EasternCham",
++                            "EasternKayah",
++                            "Etruscan",
++                            "Gothic",
++                            "Hanunoo",
++                            "Ingush",
++                            "LargeFloweryMiao",
++                            "Lepcha",
++                            "Limbu",
++                            "Lisu",
++                            "Lu",
++                            "Lycian",
++                            "Lydian",
++                            "Mandingo",
++                            "Manipuri",
++                            "Meroitic",
++                            "NorthernThai",
++                            "OldIrish",
++                            "OldNorse",
++                            "OldPersian",
++                            "OldTurkish",
++                            "Pahlavi",
++                            "Parthian",
++                            "Phoenician",
++                            "PrakritLanguage",
++                            "Rejang",
++                            "Sabaean",
++                            "Samaritan",
++                            "Santali",
++                            "Saurashtra",
++                            "Sora",
++                            "Sylheti",
++                            "Tagbanwa",
++                            "TaiDam",
++                            "TaiNua",
++                            "Ugaritic",
++                            "Akoose",
++                            "Lakota",
++                            "StandardMoroccanTamazight",
++                            "Mapuche",
++                            "CentralKurdish",
++                            "LowerSorbian",
++                            "UpperSorbian",
++                            "Kenyang",
++                            "Mohawk",
++                            "Nko",
++                            "Prussian",
++                            "Kiche",
++                            "SouthernSami",
++                            "LuleSami",
++                            "InariSami",
++                            "SkoltSami",
++                            "Warlpiri",
++                            "ManichaeanMiddlePersian",
++                            "Mende",
++                            "AncientNorthArabian",
++                            "LinearA",
++                            "HmongNjua",
++                            "Ho",
++                            "Lezghian",
++                            "Bassa",
++                            "Mono",
++                            "TedimChin",
++                            "Maithili",
++                            "Ahom",
++                            "AmericanSignLanguage",
++                            "ArdhamagadhiPrakrit",
++                            "Bhojpuri",
++                            "HieroglyphicLuwian",
++                            "LiteraryChinese",
++                            "Mazanderani",
++                            "Mru",
++                            "Newari",
++                            "NorthernLuri",
++                            "Palauan",
++                            "Papiamento",
++                            "Saraiki",
++                            "TokelauLanguage",
++                            "TokPisin",
++                            "TuvaluLanguage",
++                            "UncodedLanguages",
++                            "Cantonese",
++                            "Osage",
++                            "Tangut",
++                            "Ido",
++                            "Lojban",
++                            "Sicilian",
++                            "SouthernKurdish",
++                            "WesternBalochi",
++                            "Cebuano",
++                            "Erzya",
++                            "Chickasaw",
++                            "Muscogee",
++                            "Silesian",
++                            "NigerianPidgin",
++                            "Afan",
++                            "Bhutani",
++                            "Byelorussian",
++                            "Cambodian",
++                            "Chewa",
++                            "Frisian",
++                            "Kurundi",
++                            "Moldavian",
++                            "Norwegian",
++                            "RhaetoRomance",
++                            "SerboCroatian",
++                            "Tagalog",
++                            "Twi",
++                            "Uigur",
++                            "LastLanguage"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Script",
++                        "values": [
++                            "AnyScript",
++                            "ArabicScript",
++                            "CyrillicScript",
++                            "DeseretScript",
++                            "GurmukhiScript",
++                            "SimplifiedHanScript",
++                            "TraditionalHanScript",
++                            "LatinScript",
++                            "MongolianScript",
++                            "TifinaghScript",
++                            "ArmenianScript",
++                            "BengaliScript",
++                            "CherokeeScript",
++                            "DevanagariScript",
++                            "EthiopicScript",
++                            "GeorgianScript",
++                            "GreekScript",
++                            "GujaratiScript",
++                            "HebrewScript",
++                            "JapaneseScript",
++                            "KhmerScript",
++                            "KannadaScript",
++                            "KoreanScript",
++                            "LaoScript",
++                            "MalayalamScript",
++                            "MyanmarScript",
++                            "OriyaScript",
++                            "TamilScript",
++                            "TeluguScript",
++                            "ThaanaScript",
++                            "ThaiScript",
++                            "TibetanScript",
++                            "SinhalaScript",
++                            "SyriacScript",
++                            "YiScript",
++                            "VaiScript",
++                            "AvestanScript",
++                            "BalineseScript",
++                            "BamumScript",
++                            "BatakScript",
++                            "BopomofoScript",
++                            "BrahmiScript",
++                            "BugineseScript",
++                            "BuhidScript",
++                            "CanadianAboriginalScript",
++                            "CarianScript",
++                            "ChakmaScript",
++                            "ChamScript",
++                            "CopticScript",
++                            "CypriotScript",
++                            "EgyptianHieroglyphsScript",
++                            "FraserScript",
++                            "GlagoliticScript",
++                            "GothicScript",
++                            "HanScript",
++                            "HangulScript",
++                            "HanunooScript",
++                            "ImperialAramaicScript",
++                            "InscriptionalPahlaviScript",
++                            "InscriptionalParthianScript",
++                            "JavaneseScript",
++                            "KaithiScript",
++                            "KatakanaScript",
++                            "KayahLiScript",
++                            "KharoshthiScript",
++                            "LannaScript",
++                            "LepchaScript",
++                            "LimbuScript",
++                            "LinearBScript",
++                            "LycianScript",
++                            "LydianScript",
++                            "MandaeanScript",
++                            "MeiteiMayekScript",
++                            "MeroiticScript",
++                            "MeroiticCursiveScript",
++                            "NkoScript",
++                            "NewTaiLueScript",
++                            "OghamScript",
++                            "OlChikiScript",
++                            "OldItalicScript",
++                            "OldPersianScript",
++                            "OldSouthArabianScript",
++                            "OrkhonScript",
++                            "OsmanyaScript",
++                            "PhagsPaScript",
++                            "PhoenicianScript",
++                            "PollardPhoneticScript",
++                            "RejangScript",
++                            "RunicScript",
++                            "SamaritanScript",
++                            "SaurashtraScript",
++                            "SharadaScript",
++                            "ShavianScript",
++                            "SoraSompengScript",
++                            "CuneiformScript",
++                            "SundaneseScript",
++                            "SylotiNagriScript",
++                            "TagalogScript",
++                            "TagbanwaScript",
++                            "TaiLeScript",
++                            "TaiVietScript",
++                            "TakriScript",
++                            "UgariticScript",
++                            "BrailleScript",
++                            "HiraganaScript",
++                            "CaucasianAlbanianScript",
++                            "BassaVahScript",
++                            "DuployanScript",
++                            "ElbasanScript",
++                            "GranthaScript",
++                            "PahawhHmongScript",
++                            "KhojkiScript",
++                            "LinearAScript",
++                            "MahajaniScript",
++                            "ManichaeanScript",
++                            "MendeKikakuiScript",
++                            "ModiScript",
++                            "MroScript",
++                            "OldNorthArabianScript",
++                            "NabataeanScript",
++                            "PalmyreneScript",
++                            "PauCinHauScript",
++                            "OldPermicScript",
++                            "PsalterPahlaviScript",
++                            "SiddhamScript",
++                            "KhudawadiScript",
++                            "TirhutaScript",
++                            "VarangKshitiScript",
++                            "AhomScript",
++                            "AnatolianHieroglyphsScript",
++                            "HatranScript",
++                            "MultaniScript",
++                            "OldHungarianScript",
++                            "SignWritingScript",
++                            "AdlamScript",
++                            "BhaiksukiScript",
++                            "MarchenScript",
++                            "NewaScript",
++                            "OsageScript",
++                            "TangutScript",
++                            "HanWithBopomofoScript",
++                            "JamoScript",
++                            "SimplifiedChineseScript",
++                            "TraditionalChineseScript",
++                            "LastScript"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Country",
++                        "values": [
++                            "AnyCountry",
++                            "Afghanistan",
++                            "Albania",
++                            "Algeria",
++                            "AmericanSamoa",
++                            "Andorra",
++                            "Angola",
++                            "Anguilla",
++                            "Antarctica",
++                            "AntiguaAndBarbuda",
++                            "Argentina",
++                            "Armenia",
++                            "Aruba",
++                            "Australia",
++                            "Austria",
++                            "Azerbaijan",
++                            "Bahamas",
++                            "Bahrain",
++                            "Bangladesh",
++                            "Barbados",
++                            "Belarus",
++                            "Belgium",
++                            "Belize",
++                            "Benin",
++                            "Bermuda",
++                            "Bhutan",
++                            "Bolivia",
++                            "BosniaAndHerzegowina",
++                            "Botswana",
++                            "BouvetIsland",
++                            "Brazil",
++                            "BritishIndianOceanTerritory",
++                            "Brunei",
++                            "Bulgaria",
++                            "BurkinaFaso",
++                            "Burundi",
++                            "Cambodia",
++                            "Cameroon",
++                            "Canada",
++                            "CapeVerde",
++                            "CaymanIslands",
++                            "CentralAfricanRepublic",
++                            "Chad",
++                            "Chile",
++                            "China",
++                            "ChristmasIsland",
++                            "CocosIslands",
++                            "Colombia",
++                            "Comoros",
++                            "CongoKinshasa",
++                            "CongoBrazzaville",
++                            "CookIslands",
++                            "CostaRica",
++                            "IvoryCoast",
++                            "Croatia",
++                            "Cuba",
++                            "Cyprus",
++                            "CzechRepublic",
++                            "Denmark",
++                            "Djibouti",
++                            "Dominica",
++                            "DominicanRepublic",
++                            "EastTimor",
++                            "Ecuador",
++                            "Egypt",
++                            "ElSalvador",
++                            "EquatorialGuinea",
++                            "Eritrea",
++                            "Estonia",
++                            "Ethiopia",
++                            "FalklandIslands",
++                            "FaroeIslands",
++                            "Fiji",
++                            "Finland",
++                            "France",
++                            "Guernsey",
++                            "FrenchGuiana",
++                            "FrenchPolynesia",
++                            "FrenchSouthernTerritories",
++                            "Gabon",
++                            "Gambia",
++                            "Georgia",
++                            "Germany",
++                            "Ghana",
++                            "Gibraltar",
++                            "Greece",
++                            "Greenland",
++                            "Grenada",
++                            "Guadeloupe",
++                            "Guam",
++                            "Guatemala",
++                            "Guinea",
++                            "GuineaBissau",
++                            "Guyana",
++                            "Haiti",
++                            "HeardAndMcDonaldIslands",
++                            "Honduras",
++                            "HongKong",
++                            "Hungary",
++                            "Iceland",
++                            "India",
++                            "Indonesia",
++                            "Iran",
++                            "Iraq",
++                            "Ireland",
++                            "Israel",
++                            "Italy",
++                            "Jamaica",
++                            "Japan",
++                            "Jordan",
++                            "Kazakhstan",
++                            "Kenya",
++                            "Kiribati",
++                            "NorthKorea",
++                            "SouthKorea",
++                            "Kuwait",
++                            "Kyrgyzstan",
++                            "Laos",
++                            "Latvia",
++                            "Lebanon",
++                            "Lesotho",
++                            "Liberia",
++                            "Libya",
++                            "Liechtenstein",
++                            "Lithuania",
++                            "Luxembourg",
++                            "Macau",
++                            "Macedonia",
++                            "Madagascar",
++                            "Malawi",
++                            "Malaysia",
++                            "Maldives",
++                            "Mali",
++                            "Malta",
++                            "MarshallIslands",
++                            "Martinique",
++                            "Mauritania",
++                            "Mauritius",
++                            "Mayotte",
++                            "Mexico",
++                            "Micronesia",
++                            "Moldova",
++                            "Monaco",
++                            "Mongolia",
++                            "Montserrat",
++                            "Morocco",
++                            "Mozambique",
++                            "Myanmar",
++                            "Namibia",
++                            "NauruCountry",
++                            "Nepal",
++                            "Netherlands",
++                            "CuraSao",
++                            "NewCaledonia",
++                            "NewZealand",
++                            "Nicaragua",
++                            "Niger",
++                            "Nigeria",
++                            "Niue",
++                            "NorfolkIsland",
++                            "NorthernMarianaIslands",
++                            "Norway",
++                            "Oman",
++                            "Pakistan",
++                            "Palau",
++                            "PalestinianTerritories",
++                            "Panama",
++                            "PapuaNewGuinea",
++                            "Paraguay",
++                            "Peru",
++                            "Philippines",
++                            "Pitcairn",
++                            "Poland",
++                            "Portugal",
++                            "PuertoRico",
++                            "Qatar",
++                            "Reunion",
++                            "Romania",
++                            "Russia",
++                            "Rwanda",
++                            "SaintKittsAndNevis",
++                            "SaintLucia",
++                            "SaintVincentAndTheGrenadines",
++                            "Samoa",
++                            "SanMarino",
++                            "SaoTomeAndPrincipe",
++                            "SaudiArabia",
++                            "Senegal",
++                            "Seychelles",
++                            "SierraLeone",
++                            "Singapore",
++                            "Slovakia",
++                            "Slovenia",
++                            "SolomonIslands",
++                            "Somalia",
++                            "SouthAfrica",
++                            "SouthGeorgiaAndTheSouthSandwichIslands",
++                            "Spain",
++                            "SriLanka",
++                            "SaintHelena",
++                            "SaintPierreAndMiquelon",
++                            "Sudan",
++                            "Suriname",
++                            "SvalbardAndJanMayenIslands",
++                            "Swaziland",
++                            "Sweden",
++                            "Switzerland",
++                            "Syria",
++                            "Taiwan",
++                            "Tajikistan",
++                            "Tanzania",
++                            "Thailand",
++                            "Togo",
++                            "TokelauCountry",
++                            "Tonga",
++                            "TrinidadAndTobago",
++                            "Tunisia",
++                            "Turkey",
++                            "Turkmenistan",
++                            "TurksAndCaicosIslands",
++                            "TuvaluCountry",
++                            "Uganda",
++                            "Ukraine",
++                            "UnitedArabEmirates",
++                            "UnitedKingdom",
++                            "UnitedStates",
++                            "UnitedStatesMinorOutlyingIslands",
++                            "Uruguay",
++                            "Uzbekistan",
++                            "Vanuatu",
++                            "VaticanCityState",
++                            "Venezuela",
++                            "Vietnam",
++                            "BritishVirginIslands",
++                            "UnitedStatesVirginIslands",
++                            "WallisAndFutunaIslands",
++                            "WesternSahara",
++                            "Yemen",
++                            "CanaryIslands",
++                            "Zambia",
++                            "Zimbabwe",
++                            "ClippertonIsland",
++                            "Montenegro",
++                            "Serbia",
++                            "SaintBarthelemy",
++                            "SaintMartin",
++                            "LatinAmerica",
++                            "AscensionIsland",
++                            "AlandIslands",
++                            "DiegoGarcia",
++                            "CeutaAndMelilla",
++                            "IsleOfMan",
++                            "Jersey",
++                            "TristanDaCunha",
++                            "SouthSudan",
++                            "Bonaire",
++                            "SintMaarten",
++                            "Kosovo",
++                            "EuropeanUnion",
++                            "OutlyingOceania",
++                            "World",
++                            "Europe",
++                            "DemocraticRepublicOfCongo",
++                            "DemocraticRepublicOfKorea",
++                            "LatinAmericaAndTheCaribbean",
++                            "PeoplesRepublicOfCongo",
++                            "RepublicOfKorea",
++                            "RussianFederation",
++                            "SyrianArabRepublic",
++                            "Tokelau",
++                            "Tuvalu",
++                            "LastCountry"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "MeasurementSystem",
++                        "values": [
++                            "MetricSystem",
++                            "ImperialUSSystem",
++                            "ImperialUKSystem",
++                            "ImperialSystem"
++                        ]
++                    },
++                    {
++                        "alias": "DataSizeFormat",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "DataSizeFormats",
++                        "values": [
++                            "DataSizeBase1000",
++                            "DataSizeSIQuantifiers",
++                            "DataSizeIecFormat",
++                            "DataSizeTraditionalFormat",
++                            "DataSizeSIFormat"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QLocale"
++            }
++        ],
++        "inputFile": "qlocale.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCalendar",
++                "enums": [
++                    {
++                        "isClass": true,
++                        "isFlag": false,
++                        "name": "System",
++                        "values": [
++                            "Gregorian",
++                            "Julian",
++                            "Milankovic",
++                            "Jalali",
++                            "IslamicCivil",
++                            "Last",
++                            "User"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QCalendar"
++            }
++        ],
++        "inputFile": "qcalendar.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QBuffer",
++                "object": true,
++                "qualifiedClassName": "QBuffer",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_emitSignals",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QIODevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qbuffer.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFile",
++                "object": true,
++                "qualifiedClassName": "QFile",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFileDevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfile.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFileDevice",
++                "object": true,
++                "qualifiedClassName": "QFileDevice",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QIODevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfiledevice.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QIODevice",
++                "object": true,
++                "qualifiedClassName": "QIODevice",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "readyRead",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "channel",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "channelReadyRead",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "bytes",
++                                "type": "qint64"
++                            }
++                        ],
++                        "name": "bytesWritten",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "channel",
++                                "type": "int"
++                            },
++                            {
++                                "name": "bytes",
++                                "type": "qint64"
++                            }
++                        ],
++                        "name": "channelBytesWritten",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "aboutToClose",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "readChannelFinished",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qiodevice.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QNonContiguousByteDevice",
++                "object": true,
++                "qualifiedClassName": "QNonContiguousByteDevice",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "readyRead",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "current",
++                                "type": "qint64"
++                            },
++                            {
++                                "name": "total",
++                                "type": "qint64"
++                            }
++                        ],
++                        "name": "readProgress",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QNonContiguousByteDeviceIoDeviceImpl",
++                "object": true,
++                "qualifiedClassName": "QNonContiguousByteDeviceIoDeviceImpl",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QNonContiguousByteDevice"
++                    }
++                ]
++            },
++            {
++                "className": "QNonContiguousByteDeviceBufferImpl",
++                "object": true,
++                "qualifiedClassName": "QNonContiguousByteDeviceBufferImpl",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QNonContiguousByteDevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qnoncontiguousbytedevice_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTemporaryFile",
++                "object": true,
++                "qualifiedClassName": "QTemporaryFile",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFile"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtemporaryfile.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSaveFile",
++                "object": true,
++                "qualifiedClassName": "QSaveFile",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFileDevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsavefile.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStandardPaths",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StandardLocation",
++                        "values": [
++                            "DesktopLocation",
++                            "DocumentsLocation",
++                            "FontsLocation",
++                            "ApplicationsLocation",
++                            "MusicLocation",
++                            "MoviesLocation",
++                            "PicturesLocation",
++                            "TempLocation",
++                            "HomeLocation",
++                            "DataLocation",
++                            "CacheLocation",
++                            "GenericDataLocation",
++                            "RuntimeLocation",
++                            "ConfigLocation",
++                            "DownloadLocation",
++                            "GenericCacheLocation",
++                            "GenericConfigLocation",
++                            "AppDataLocation",
++                            "AppConfigLocation",
++                            "AppLocalDataLocation"
++                        ]
++                    },
++                    {
++                        "alias": "LocateOption",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "LocateOptions",
++                        "values": [
++                            "LocateFile",
++                            "LocateDirectory"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QStandardPaths"
++            }
++        ],
++        "inputFile": "qstandardpaths.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFileSelector",
++                "object": true,
++                "qualifiedClassName": "QFileSelector",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfileselector.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFileSystemWatcher",
++                "object": true,
++                "qualifiedClassName": "QFileSystemWatcher",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "fileChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "directoryChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "removed",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "_q_fileChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "removed",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "_q_directoryChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfilesystemwatcher.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFileSystemWatcherEngine",
++                "object": true,
++                "qualifiedClassName": "QFileSystemWatcherEngine",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "removed",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "fileChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "removed",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "directoryChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfilesystemwatcher_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPollingFileSystemWatcherEngine",
++                "object": true,
++                "qualifiedClassName": "QPollingFileSystemWatcherEngine",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "timeout",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFileSystemWatcherEngine"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfilesystemwatcher_polling_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QInotifyFileSystemWatcherEngine",
++                "object": true,
++                "qualifiedClassName": "QInotifyFileSystemWatcherEngine",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "readFromInotify",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFileSystemWatcherEngine"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfilesystemwatcher_inotify_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QProcess",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ProcessError",
++                        "values": [
++                            "FailedToStart",
++                            "Crashed",
++                            "Timedout",
++                            "ReadError",
++                            "WriteError",
++                            "UnknownError"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ProcessState",
++                        "values": [
++                            "NotRunning",
++                            "Starting",
++                            "Running"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ProcessChannel",
++                        "values": [
++                            "StandardOutput",
++                            "StandardError"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ProcessChannelMode",
++                        "values": [
++                            "SeparateChannels",
++                            "MergedChannels",
++                            "ForwardedChannels",
++                            "ForwardedOutputChannel",
++                            "ForwardedErrorChannel"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "InputChannelMode",
++                        "values": [
++                            "ManagedInputChannel",
++                            "ForwardedInputChannel"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ExitStatus",
++                        "values": [
++                            "NormalExit",
++                            "CrashExit"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QProcess",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "started",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "exitCode",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "finished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "exitCode",
++                                "type": "int"
++                            },
++                            {
++                                "name": "exitStatus",
++                                "type": "QProcess::ExitStatus"
++                            }
++                        ],
++                        "name": "finished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "error",
++                                "type": "QProcess::ProcessError"
++                            }
++                        ],
++                        "name": "error",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "error",
++                                "type": "QProcess::ProcessError"
++                            }
++                        ],
++                        "name": "errorOccurred",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "state",
++                                "type": "QProcess::ProcessState"
++                            }
++                        ],
++                        "name": "stateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "readyReadStandardOutput",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "readyReadStandardError",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "terminate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "kill",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_canReadStandardOutput",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_canReadStandardError",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_canWrite",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_startupNotification",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_processDied",
++                        "returnType": "bool"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QIODevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qprocess.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSettings",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Status",
++                        "values": [
++                            "NoError",
++                            "AccessError",
++                            "FormatError"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Format",
++                        "values": [
++                            "NativeFormat",
++                            "IniFormat",
++                            "InvalidFormat",
++                            "CustomFormat1",
++                            "CustomFormat2",
++                            "CustomFormat3",
++                            "CustomFormat4",
++                            "CustomFormat5",
++                            "CustomFormat6",
++                            "CustomFormat7",
++                            "CustomFormat8",
++                            "CustomFormat9",
++                            "CustomFormat10",
++                            "CustomFormat11",
++                            "CustomFormat12",
++                            "CustomFormat13",
++                            "CustomFormat14",
++                            "CustomFormat15",
++                            "CustomFormat16"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Scope",
++                        "values": [
++                            "UserScope",
++                            "SystemScope"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QSettings",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsettings.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractItemModel",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "LayoutChangeHint",
++                        "values": [
++                            "NoLayoutChangeHint",
++                            "VerticalSortHint",
++                            "HorizontalSortHint"
++                        ]
++                    },
++                    {
++                        "isClass": true,
++                        "isFlag": false,
++                        "name": "CheckIndexOption",
++                        "values": [
++                            "NoOption",
++                            "IndexIsValid",
++                            "DoNotUseParent",
++                            "ParentIsInvalid"
++                        ]
++                    }
++                ],
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "hasIndex",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "hasIndex",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "index",
++                        "returnType": "QModelIndex"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "index",
++                        "returnType": "QModelIndex"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "child",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "parent",
++                        "returnType": "QModelIndex"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "idx",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "sibling",
++                        "returnType": "QModelIndex"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "rowCount",
++                        "returnType": "int"
++                    },
++                    {
++                        "access": "public",
++                        "name": "rowCount",
++                        "returnType": "int"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "columnCount",
++                        "returnType": "int"
++                    },
++                    {
++                        "access": "public",
++                        "name": "columnCount",
++                        "returnType": "int"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "hasChildren",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "name": "hasChildren",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "role",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "data",
++                        "returnType": "QVariant"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "data",
++                        "returnType": "QVariant"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "value",
++                                "type": "QVariant"
++                            },
++                            {
++                                "name": "role",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setData",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "value",
++                                "type": "QVariant"
++                            }
++                        ],
++                        "name": "setData",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "section",
++                                "type": "int"
++                            },
++                            {
++                                "name": "orientation",
++                                "type": "Qt::Orientation"
++                            },
++                            {
++                                "name": "role",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "headerData",
++                        "returnType": "QVariant"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "section",
++                                "type": "int"
++                            },
++                            {
++                                "name": "orientation",
++                                "type": "Qt::Orientation"
++                            }
++                        ],
++                        "name": "headerData",
++                        "returnType": "QVariant"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "fetchMore",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "canFetchMore",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "flags",
++                        "returnType": "Qt::ItemFlags"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "start",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "role",
++                                "type": "int"
++                            },
++                            {
++                                "name": "value",
++                                "type": "QVariant"
++                            },
++                            {
++                                "name": "hits",
++                                "type": "int"
++                            },
++                            {
++                                "name": "flags",
++                                "type": "Qt::MatchFlags"
++                            }
++                        ],
++                        "name": "match",
++                        "returnType": "QModelIndexList"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "start",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "role",
++                                "type": "int"
++                            },
++                            {
++                                "name": "value",
++                                "type": "QVariant"
++                            },
++                            {
++                                "name": "hits",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "match",
++                        "returnType": "QModelIndexList"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "start",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "role",
++                                "type": "int"
++                            },
++                            {
++                                "name": "value",
++                                "type": "QVariant"
++                            }
++                        ],
++                        "name": "match",
++                        "returnType": "QModelIndexList"
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QAbstractItemModel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "topLeft",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "bottomRight",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "roles",
++                                "type": "QVector<int>"
++                            }
++                        ],
++                        "name": "dataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "topLeft",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "bottomRight",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "dataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "orientation",
++                                "type": "Qt::Orientation"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "headerDataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "layoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            }
++                        ],
++                        "name": "layoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "layoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "layoutAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            }
++                        ],
++                        "name": "layoutAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "layoutAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "modelAboutToBeReset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "modelReset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sourceParent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "sourceStart",
++                                "type": "int"
++                            },
++                            {
++                                "name": "sourceEnd",
++                                "type": "int"
++                            },
++                            {
++                                "name": "destinationParent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "destinationRow",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowsAboutToBeMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            },
++                            {
++                                "name": "destination",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowsMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sourceParent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "sourceStart",
++                                "type": "int"
++                            },
++                            {
++                                "name": "sourceEnd",
++                                "type": "int"
++                            },
++                            {
++                                "name": "destinationParent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "destinationColumn",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnsAboutToBeMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            },
++                            {
++                                "name": "destination",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnsMoved",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "submit",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "name": "revert",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "name": "resetInternalData",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QAbstractTableModel",
++                "object": true,
++                "qualifiedClassName": "QAbstractTableModel",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemModel"
++                    }
++                ]
++            },
++            {
++                "className": "QAbstractListModel",
++                "object": true,
++                "qualifiedClassName": "QAbstractListModel",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractitemmodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QItemSelectionModel",
++                "enums": [
++                    {
++                        "alias": "SelectionFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "SelectionFlags",
++                        "values": [
++                            "NoUpdate",
++                            "Clear",
++                            "Select",
++                            "Deselect",
++                            "Toggle",
++                            "Current",
++                            "Rows",
++                            "Columns",
++                            "SelectCurrent",
++                            "ToggleCurrent",
++                            "ClearAndSelect"
++                        ]
++                    }
++                ],
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "isSelected",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "isRowSelected",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "isRowSelected",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "isColumnSelected",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "isColumnSelected",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "rowIntersectsSelection",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowIntersectsSelection",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "columnIntersectsSelection",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnIntersectsSelection",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "selectedRows",
++                        "returnType": "QModelIndexList"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectedRows",
++                        "returnType": "QModelIndexList"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "selectedColumns",
++                        "returnType": "QModelIndexList"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectedColumns",
++                        "returnType": "QModelIndexList"
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "model",
++                        "notify": "modelChanged",
++                        "read": "model",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QAbstractItemModel*",
++                        "user": false,
++                        "write": "setModel"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "hasSelection",
++                        "notify": "selectionChanged",
++                        "read": "hasSelection",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "currentIndex",
++                        "notify": "currentChanged",
++                        "read": "currentIndex",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "QModelIndex",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "selection",
++                        "notify": "selectionChanged",
++                        "read": "selection",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "QItemSelection",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "selectedIndexes",
++                        "notify": "selectionChanged",
++                        "read": "selectedIndexes",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "QModelIndexList",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QItemSelectionModel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "selected",
++                                "type": "QItemSelection"
++                            },
++                            {
++                                "name": "deselected",
++                                "type": "QItemSelection"
++                            }
++                        ],
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "current",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "previous",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "current",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "previous",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "currentRowChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "current",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "previous",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "currentColumnChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "model",
++                                "type": "QAbstractItemModel*"
++                            }
++                        ],
++                        "name": "modelChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "command",
++                                "type": "QItemSelectionModel::SelectionFlags"
++                            }
++                        ],
++                        "name": "setCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "command",
++                                "type": "QItemSelectionModel::SelectionFlags"
++                            }
++                        ],
++                        "name": "select",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "selection",
++                                "type": "QItemSelection"
++                            },
++                            {
++                                "name": "command",
++                                "type": "QItemSelectionModel::SelectionFlags"
++                            }
++                        ],
++                        "name": "select",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "reset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clearSelection",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clearCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_columnsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_rowsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_columnsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_rowsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_layoutAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            }
++                        ],
++                        "name": "_q_layoutAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_layoutAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_layoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            }
++                        ],
++                        "name": "_q_layoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_layoutChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qitemselectionmodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractProxyModel",
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "proxyIndex",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "mapToSource",
++                        "returnType": "QModelIndex"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sourceIndex",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "mapFromSource",
++                        "returnType": "QModelIndex"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "selection",
++                                "type": "QItemSelection"
++                            }
++                        ],
++                        "name": "mapSelectionToSource",
++                        "returnType": "QItemSelection"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "selection",
++                                "type": "QItemSelection"
++                            }
++                        ],
++                        "name": "mapSelectionFromSource",
++                        "returnType": "QItemSelection"
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sourceModel",
++                        "notify": "sourceModelChanged",
++                        "read": "sourceModel",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QAbstractItemModel*",
++                        "user": false,
++                        "write": "setSourceModel"
++                    }
++                ],
++                "qualifiedClassName": "QAbstractProxyModel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "sourceModelChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "protected",
++                        "name": "resetInternalData",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sourceModelDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractproxymodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QConcatenateTablesProxyModel",
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sourceModel",
++                                "type": "QAbstractItemModel*"
++                            }
++                        ],
++                        "name": "addSourceModel",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sourceModel",
++                                "type": "QAbstractItemModel*"
++                            }
++                        ],
++                        "name": "removeSourceModel",
++                        "returnType": "void"
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QConcatenateTablesProxyModel",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_slotRowsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_slotRowsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_slotRowsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_slotRowsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_slotColumnsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_slotColumnsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_slotColumnsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_slotColumnsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "from",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "to",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "roles",
++                                "type": "QVector<int>"
++                            }
++                        ],
++                        "name": "_q_slotDataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_slotSourceLayoutAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_slotSourceLayoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_slotModelAboutToBeReset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_slotModelReset",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qconcatenatetablesproxymodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QIdentityProxyModel",
++                "object": true,
++                "qualifiedClassName": "QIdentityProxyModel",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsAboutToBeMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsAboutToBeMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "QVector<int>"
++                            }
++                        ],
++                        "name": "_q_sourceDataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "orientation",
++                                "type": "Qt::Orientation"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceHeaderDataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "sourceParents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_sourceLayoutAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "sourceParents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_sourceLayoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sourceModelAboutToBeReset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sourceModelReset",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractProxyModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qidentityproxymodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSortFilterProxyModel",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "filterRegExp",
++                        "read": "filterRegExp",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRegExp",
++                        "user": false,
++                        "write": "setFilterRegExp"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "filterRegularExpression",
++                        "read": "filterRegularExpression",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRegularExpression",
++                        "user": false,
++                        "write": "setFilterRegularExpression"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "filterKeyColumn",
++                        "read": "filterKeyColumn",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setFilterKeyColumn"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dynamicSortFilter",
++                        "read": "dynamicSortFilter",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDynamicSortFilter"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "filterCaseSensitivity",
++                        "notify": "filterCaseSensitivityChanged",
++                        "read": "filterCaseSensitivity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::CaseSensitivity",
++                        "user": false,
++                        "write": "setFilterCaseSensitivity"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sortCaseSensitivity",
++                        "notify": "sortCaseSensitivityChanged",
++                        "read": "sortCaseSensitivity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::CaseSensitivity",
++                        "user": false,
++                        "write": "setSortCaseSensitivity"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "isSortLocaleAware",
++                        "notify": "sortLocaleAwareChanged",
++                        "read": "isSortLocaleAware",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSortLocaleAware"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sortRole",
++                        "notify": "sortRoleChanged",
++                        "read": "sortRole",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setSortRole"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "filterRole",
++                        "notify": "filterRoleChanged",
++                        "read": "filterRole",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setFilterRole"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "recursiveFilteringEnabled",
++                        "notify": "recursiveFilteringEnabledChanged",
++                        "read": "isRecursiveFilteringEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setRecursiveFilteringEnabled"
++                    }
++                ],
++                "qualifiedClassName": "QSortFilterProxyModel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "dynamicSortFilter",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "dynamicSortFilterChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "filterCaseSensitivity",
++                                "type": "Qt::CaseSensitivity"
++                            }
++                        ],
++                        "name": "filterCaseSensitivityChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sortCaseSensitivity",
++                                "type": "Qt::CaseSensitivity"
++                            }
++                        ],
++                        "name": "sortCaseSensitivityChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sortLocaleAware",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "sortLocaleAwareChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sortRole",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sortRoleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "filterRole",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "filterRoleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "recursiveFilteringEnabled",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "recursiveFilteringEnabledChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pattern",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setFilterRegExp",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "regExp",
++                                "type": "QRegExp"
++                            }
++                        ],
++                        "name": "setFilterRegExp",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pattern",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setFilterRegularExpression",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "regularExpression",
++                                "type": "QRegularExpression"
++                            }
++                        ],
++                        "name": "setFilterRegularExpression",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pattern",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setFilterWildcard",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pattern",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setFilterFixedString",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "invalidate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "source_top_left",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "source_bottom_right",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "roles",
++                                "type": "QVector<int>"
++                            }
++                        ],
++                        "name": "_q_sourceDataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "orientation",
++                                "type": "Qt::Orientation"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceHeaderDataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sourceAboutToBeReset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sourceReset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "sourceParents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_sourceLayoutAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "sourceParents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_sourceLayoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "source_parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "source_parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "source_parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "source_parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsAboutToBeMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceRowsMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "source_parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsAboutToBeInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "source_parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "source_parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "source_parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsAboutToBeMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sourceColumnsMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_clearMapping",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractProxyModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsortfilterproxymodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTransposeProxyModel",
++                "object": true,
++                "qualifiedClassName": "QTransposeProxyModel",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractProxyModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtransposeproxymodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStringListModel",
++                "object": true,
++                "qualifiedClassName": "QStringListModel",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractListModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstringlistmodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPluginLoader",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "fileName",
++                        "read": "fileName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setFileName"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "loadHints",
++                        "read": "loadHints",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QLibrary::LoadHints",
++                        "user": false,
++                        "write": "setLoadHints"
++                    }
++                ],
++                "qualifiedClassName": "QPluginLoader",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpluginloader.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFactoryLoader",
++                "object": true,
++                "qualifiedClassName": "QFactoryLoader",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfactoryloader_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QLibrary",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "LoadHint",
++                        "values": [
++                            "ResolveAllSymbolsHint",
++                            "ExportExternalSymbolsHint",
++                            "LoadArchiveMemberHint",
++                            "PreventUnloadHint",
++                            "DeepBindHint"
++                        ]
++                    },
++                    {
++                        "alias": "LoadHint",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "LoadHints",
++                        "values": [
++                            "ResolveAllSymbolsHint",
++                            "ExportExternalSymbolsHint",
++                            "LoadArchiveMemberHint",
++                            "PreventUnloadHint",
++                            "DeepBindHint"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "fileName",
++                        "read": "fileName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setFileName"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "loadHints",
++                        "read": "loadHints",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "LoadHints",
++                        "user": false,
++                        "write": "setLoadHints"
++                    }
++                ],
++                "qualifiedClassName": "QLibrary",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlibrary.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractEventDispatcher",
++                "object": true,
++                "qualifiedClassName": "QAbstractEventDispatcher",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "aboutToBlock",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "awake",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstracteventdispatcher.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QEventLoop",
++                "object": true,
++                "qualifiedClassName": "QEventLoop",
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "quit",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qeventloop.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCoreApplication",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "applicationName",
++                        "notify": "applicationNameChanged",
++                        "read": "applicationName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setApplicationName"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "applicationVersion",
++                        "notify": "applicationVersionChanged",
++                        "read": "applicationVersion",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setApplicationVersion"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "organizationName",
++                        "notify": "organizationNameChanged",
++                        "read": "organizationName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setOrganizationName"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "organizationDomain",
++                        "notify": "organizationDomainChanged",
++                        "read": "organizationDomain",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setOrganizationDomain"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "quitLockEnabled",
++                        "read": "isQuitLockEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setQuitLockEnabled"
++                    }
++                ],
++                "qualifiedClassName": "QCoreApplication",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "aboutToQuit",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "organizationNameChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "organizationDomainChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "applicationNameChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "applicationVersionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "quit",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcoreapplication.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QEvent",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Type",
++                        "values": [
++                            "None",
++                            "Timer",
++                            "MouseButtonPress",
++                            "MouseButtonRelease",
++                            "MouseButtonDblClick",
++                            "MouseMove",
++                            "KeyPress",
++                            "KeyRelease",
++                            "FocusIn",
++                            "FocusOut",
++                            "FocusAboutToChange",
++                            "Enter",
++                            "Leave",
++                            "Paint",
++                            "Move",
++                            "Resize",
++                            "Create",
++                            "Destroy",
++                            "Show",
++                            "Hide",
++                            "Close",
++                            "Quit",
++                            "ParentChange",
++                            "ParentAboutToChange",
++                            "ThreadChange",
++                            "WindowActivate",
++                            "WindowDeactivate",
++                            "ShowToParent",
++                            "HideToParent",
++                            "Wheel",
++                            "WindowTitleChange",
++                            "WindowIconChange",
++                            "ApplicationWindowIconChange",
++                            "ApplicationFontChange",
++                            "ApplicationLayoutDirectionChange",
++                            "ApplicationPaletteChange",
++                            "PaletteChange",
++                            "Clipboard",
++                            "Speech",
++                            "MetaCall",
++                            "SockAct",
++                            "WinEventAct",
++                            "DeferredDelete",
++                            "DragEnter",
++                            "DragMove",
++                            "DragLeave",
++                            "Drop",
++                            "DragResponse",
++                            "ChildAdded",
++                            "ChildPolished",
++                            "ChildRemoved",
++                            "ShowWindowRequest",
++                            "PolishRequest",
++                            "Polish",
++                            "LayoutRequest",
++                            "UpdateRequest",
++                            "UpdateLater",
++                            "EmbeddingControl",
++                            "ActivateControl",
++                            "DeactivateControl",
++                            "ContextMenu",
++                            "InputMethod",
++                            "TabletMove",
++                            "LocaleChange",
++                            "LanguageChange",
++                            "LayoutDirectionChange",
++                            "Style",
++                            "TabletPress",
++                            "TabletRelease",
++                            "OkRequest",
++                            "HelpRequest",
++                            "IconDrag",
++                            "FontChange",
++                            "EnabledChange",
++                            "ActivationChange",
++                            "StyleChange",
++                            "IconTextChange",
++                            "ModifiedChange",
++                            "MouseTrackingChange",
++                            "WindowBlocked",
++                            "WindowUnblocked",
++                            "WindowStateChange",
++                            "ReadOnlyChange",
++                            "ToolTip",
++                            "WhatsThis",
++                            "StatusTip",
++                            "ActionChanged",
++                            "ActionAdded",
++                            "ActionRemoved",
++                            "FileOpen",
++                            "Shortcut",
++                            "ShortcutOverride",
++                            "WhatsThisClicked",
++                            "ToolBarChange",
++                            "ApplicationActivate",
++                            "ApplicationActivated",
++                            "ApplicationDeactivate",
++                            "ApplicationDeactivated",
++                            "QueryWhatsThis",
++                            "EnterWhatsThisMode",
++                            "LeaveWhatsThisMode",
++                            "ZOrderChange",
++                            "HoverEnter",
++                            "HoverLeave",
++                            "HoverMove",
++                            "AcceptDropsChange",
++                            "ZeroTimerEvent",
++                            "GraphicsSceneMouseMove",
++                            "GraphicsSceneMousePress",
++                            "GraphicsSceneMouseRelease",
++                            "GraphicsSceneMouseDoubleClick",
++                            "GraphicsSceneContextMenu",
++                            "GraphicsSceneHoverEnter",
++                            "GraphicsSceneHoverMove",
++                            "GraphicsSceneHoverLeave",
++                            "GraphicsSceneHelp",
++                            "GraphicsSceneDragEnter",
++                            "GraphicsSceneDragMove",
++                            "GraphicsSceneDragLeave",
++                            "GraphicsSceneDrop",
++                            "GraphicsSceneWheel",
++                            "KeyboardLayoutChange",
++                            "DynamicPropertyChange",
++                            "TabletEnterProximity",
++                            "TabletLeaveProximity",
++                            "NonClientAreaMouseMove",
++                            "NonClientAreaMouseButtonPress",
++                            "NonClientAreaMouseButtonRelease",
++                            "NonClientAreaMouseButtonDblClick",
++                            "MacSizeChange",
++                            "ContentsRectChange",
++                            "MacGLWindowChange",
++                            "FutureCallOut",
++                            "GraphicsSceneResize",
++                            "GraphicsSceneMove",
++                            "CursorChange",
++                            "ToolTipChange",
++                            "NetworkReplyUpdated",
++                            "GrabMouse",
++                            "UngrabMouse",
++                            "GrabKeyboard",
++                            "UngrabKeyboard",
++                            "MacGLClearDrawable",
++                            "StateMachineSignal",
++                            "StateMachineWrapped",
++                            "TouchBegin",
++                            "TouchUpdate",
++                            "TouchEnd",
++                            "NativeGesture",
++                            "RequestSoftwareInputPanel",
++                            "CloseSoftwareInputPanel",
++                            "WinIdChange",
++                            "Gesture",
++                            "GestureOverride",
++                            "ScrollPrepare",
++                            "Scroll",
++                            "Expose",
++                            "InputMethodQuery",
++                            "OrientationChange",
++                            "TouchCancel",
++                            "ThemeChange",
++                            "SockClose",
++                            "PlatformPanel",
++                            "StyleAnimationUpdate",
++                            "ApplicationStateChange",
++                            "WindowChangeInternal",
++                            "ScreenChangeInternal",
++                            "PlatformSurface",
++                            "Pointer",
++                            "TabletTrackingChange",
++                            "User",
++                            "MaxUser"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QEvent"
++            }
++        ],
++        "inputFile": "qcoreevent.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMimeData",
++                "object": true,
++                "qualifiedClassName": "QMimeData",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmimedata.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QObject",
++                "constructors": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "QObject",
++                        "returnType": ""
++                    },
++                    {
++                        "access": "public",
++                        "name": "QObject",
++                        "returnType": ""
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "objectName",
++                        "notify": "objectNameChanged",
++                        "read": "objectName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setObjectName"
++                    }
++                ],
++                "qualifiedClassName": "QObject",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "destroyed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "destroyed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "objectName",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "objectNameChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "deleteLater",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "void*"
++                            }
++                        ],
++                        "name": "_q_reregisterTimers",
++                        "returnType": "void"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qobject.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSignalMapper",
++                "object": true,
++                "qualifiedClassName": "QSignalMapper",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "mapped",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "mapped",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "mapped",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "mapped",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "mappedInt",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "mappedString",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "mappedWidget",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "mappedObject",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "map",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sender",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "map",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_senderDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsignalmapper.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSocketNotifier",
++                "object": true,
++                "qualifiedClassName": "QSocketNotifier",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "socket",
++                                "type": "QSocketDescriptor"
++                            },
++                            {
++                                "name": "activationEvent",
++                                "type": "QSocketNotifier::Type"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "socket",
++                                "type": "QSocketDescriptor"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "socket",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setEnabled",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsocketnotifier.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTimer",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "singleShot",
++                        "read": "isSingleShot",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSingleShot"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "interval",
++                        "read": "interval",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setInterval"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "remainingTime",
++                        "read": "remainingTime",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "timerType",
++                        "read": "timerType",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TimerType",
++                        "user": false,
++                        "write": "setTimerType"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "active",
++                        "read": "isActive",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QTimer",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "timeout",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "msec",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "stop",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtimer.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTranslator",
++                "object": true,
++                "qualifiedClassName": "QTranslator",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtranslator.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QObjectCleanupHandler",
++                "object": true,
++                "qualifiedClassName": "QObjectCleanupHandler",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "objectDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qobjectcleanuphandler.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSharedMemory",
++                "object": true,
++                "qualifiedClassName": "QSharedMemory",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsharedmemory.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QEventDispatcherUNIX",
++                "object": true,
++                "qualifiedClassName": "QEventDispatcherUNIX",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractEventDispatcher"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qeventdispatcher_unix_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCborError",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Code",
++                        "values": [
++                            "UnknownError",
++                            "AdvancePastEnd",
++                            "InputOutputError",
++                            "GarbageAtEnd",
++                            "EndOfFile",
++                            "UnexpectedBreak",
++                            "UnknownType",
++                            "IllegalType",
++                            "IllegalNumber",
++                            "IllegalSimpleType",
++                            "InvalidUtf8String",
++                            "DataTooLarge",
++                            "NestingTooDeep",
++                            "UnsupportedType",
++                            "NoError"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QCborError"
++            }
++        ],
++        "inputFile": "qcborcommon.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCborValue",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Type",
++                        "values": [
++                            "Integer",
++                            "ByteArray",
++                            "String",
++                            "Array",
++                            "Map",
++                            "Tag",
++                            "SimpleType",
++                            "False",
++                            "True",
++                            "Null",
++                            "Undefined",
++                            "Double",
++                            "DateTime",
++                            "Url",
++                            "RegularExpression",
++                            "Uuid",
++                            "Invalid"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QCborValue"
++            }
++        ],
++        "inputFile": "qcborvalue.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDeviceClosedNotifier",
++                "object": true,
++                "qualifiedClassName": "QDeviceClosedNotifier",
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "flushStream",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtextstream_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCborStreamReader",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Type",
++                        "values": [
++                            "UnsignedInteger",
++                            "NegativeInteger",
++                            "ByteString",
++                            "ByteArray",
++                            "TextString",
++                            "String",
++                            "Array",
++                            "Map",
++                            "Tag",
++                            "SimpleType",
++                            "HalfFloat",
++                            "Float16",
++                            "Float",
++                            "Double",
++                            "Invalid"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StringResultCode",
++                        "values": [
++                            "EndOfString",
++                            "Ok",
++                            "Error"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QCborStreamReader"
++            }
++        ],
++        "inputFile": "qcborstreamreader.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStateMachine",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "errorString",
++                        "read": "errorString",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "globalRestorePolicy",
++                        "read": "globalRestorePolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QState::RestorePolicy",
++                        "user": false,
++                        "write": "setGlobalRestorePolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "running",
++                        "notify": "runningChanged",
++                        "read": "isRunning",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setRunning"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "animated",
++                        "read": "isAnimated",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAnimated"
++                    }
++                ],
++                "qualifiedClassName": "QStateMachine",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "started",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "stopped",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "running",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "runningChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "stop",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "running",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setRunning",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_process",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_animationFinished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_startDelayedEventTimer",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_killDelayedEventTimer",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QState"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstatemachine.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractState",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "active",
++                        "notify": "activeChanged",
++                        "read": "active",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QAbstractState",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "entered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "exited",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "active",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "activeChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractstate.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QState",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ChildMode",
++                        "values": [
++                            "ExclusiveStates",
++                            "ParallelStates"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "RestorePolicy",
++                        "values": [
++                            "DontRestoreProperties",
++                            "RestoreProperties"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "initialState",
++                        "notify": "initialStateChanged",
++                        "read": "initialState",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QAbstractState*",
++                        "user": false,
++                        "write": "setInitialState"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "errorState",
++                        "notify": "errorStateChanged",
++                        "read": "errorState",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QAbstractState*",
++                        "user": false,
++                        "write": "setErrorState"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "childMode",
++                        "notify": "childModeChanged",
++                        "read": "childMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ChildMode",
++                        "user": false,
++                        "write": "setChildMode"
++                    }
++                ],
++                "qualifiedClassName": "QState",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "finished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "propertiesAssigned",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "childModeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "initialStateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "errorStateChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractState"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstate.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFinalState",
++                "object": true,
++                "qualifiedClassName": "QFinalState",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractState"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfinalstate.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QHistoryState",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "HistoryType",
++                        "values": [
++                            "ShallowHistory",
++                            "DeepHistory"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "defaultState",
++                        "notify": "defaultStateChanged",
++                        "read": "defaultState",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QAbstractState*",
++                        "user": false,
++                        "write": "setDefaultState"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "defaultTransition",
++                        "notify": "defaultTransitionChanged",
++                        "read": "defaultTransition",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QAbstractTransition*",
++                        "user": false,
++                        "write": "setDefaultTransition"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "historyType",
++                        "notify": "historyTypeChanged",
++                        "read": "historyType",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "HistoryType",
++                        "user": false,
++                        "write": "setHistoryType"
++                    }
++                ],
++                "qualifiedClassName": "QHistoryState",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "defaultTransitionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "defaultStateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "historyTypeChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractState"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qhistorystate.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractTransition",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TransitionType",
++                        "values": [
++                            "ExternalTransition",
++                            "InternalTransition"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sourceState",
++                        "read": "sourceState",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QState*",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "targetState",
++                        "notify": "targetStateChanged",
++                        "read": "targetState",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QAbstractState*",
++                        "user": false,
++                        "write": "setTargetState"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "targetStates",
++                        "notify": "targetStatesChanged",
++                        "read": "targetStates",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QList<QAbstractState*>",
++                        "user": false,
++                        "write": "setTargetStates"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "transitionType",
++                        "read": "transitionType",
++                        "required": false,
++                        "revision": 1,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "TransitionType",
++                        "user": false,
++                        "write": "setTransitionType"
++                    }
++                ],
++                "qualifiedClassName": "QAbstractTransition",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "triggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "targetStateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "targetStatesChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstracttransition.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSignalTransition",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "senderObject",
++                        "notify": "senderObjectChanged",
++                        "read": "senderObject",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QObject*",
++                        "user": false,
++                        "write": "setSenderObject"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "signal",
++                        "notify": "signalChanged",
++                        "read": "signal",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QByteArray",
++                        "user": false,
++                        "write": "setSignal"
++                    }
++                ],
++                "qualifiedClassName": "QSignalTransition",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "senderObjectChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "signalChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTransition"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsignaltransition.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QEventTransition",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "eventSource",
++                        "read": "eventSource",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QObject*",
++                        "user": false,
++                        "write": "setEventSource"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "eventType",
++                        "read": "eventType",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QEvent::Type",
++                        "user": false,
++                        "write": "setEventType"
++                    }
++                ],
++                "qualifiedClassName": "QEventTransition",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTransition"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qeventtransition.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMimeType",
++                "gadget": true,
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "mimeTypeName",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "inherits",
++                        "returnType": "bool"
++                    }
++                ],
++                "properties": [
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "valid",
++                        "read": "isValid",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "isDefault",
++                        "read": "isDefault",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "name",
++                        "read": "name",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "comment",
++                        "read": "comment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "genericIconName",
++                        "read": "genericIconName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconName",
++                        "read": "iconName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "globPatterns",
++                        "read": "globPatterns",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QStringList",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "parentMimeTypes",
++                        "read": "parentMimeTypes",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QStringList",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "allAncestors",
++                        "read": "allAncestors",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QStringList",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "aliases",
++                        "read": "aliases",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QStringList",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "suffixes",
++                        "read": "suffixes",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QStringList",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "preferredSuffix",
++                        "read": "preferredSuffix",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "filterString",
++                        "read": "filterString",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QMimeType"
++            }
++        ],
++        "inputFile": "qmimetype.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QThreadPoolThread",
++                "object": true,
++                "qualifiedClassName": "QThreadPoolThread",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QThread"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qthreadpool.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSingleShotTimer",
++                "object": true,
++                "qualifiedClassName": "QSingleShotTimer",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "timeout",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtimer.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "GoToStateTransition",
++                "object": true,
++                "qualifiedClassName": "_QStateMachine_Internal::GoToStateTransition",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTransition"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstatemachine.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "DefaultStateTransition",
++                "object": true,
++                "qualifiedClassName": "DefaultStateTransition",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTransition"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qhistorystate.cpp",
++        "outputRevision": 67
++    }
++]
+diff --git a/src/corelib/text/qbytearraymatcher.h b/src/corelib/text/qbytearraymatcher.h
+index 0eedfc1d20..7b80e2becd 100644
+--- a/src/corelib/text/qbytearraymatcher.h
++++ b/src/corelib/text/qbytearraymatcher.h
+@@ -40,6 +40,7 @@
+ #ifndef QBYTEARRAYMATCHER_H
+ #define QBYTEARRAYMATCHER_H
+ 
++#include <limits>
+ #include <QtCore/qbytearray.h>
+ 
+ QT_BEGIN_NAMESPACE
+diff --git a/src/corelib/tools/qoffsetstringarray_p.h b/src/corelib/tools/qoffsetstringarray_p.h
+index 4dd9e9603b..8b3fbfe559 100644
+--- a/src/corelib/tools/qoffsetstringarray_p.h
++++ b/src/corelib/tools/qoffsetstringarray_p.h
+@@ -53,6 +53,7 @@
+ 
+ #include "private/qglobal_p.h"
+ 
++#include <limits>
+ #include <tuple>
+ #include <array>
+ 
+diff --git a/src/gui/.tracegen/qtgui_tracepoints_p.h b/src/gui/.tracegen/qtgui_tracepoints_p.h
+new file mode 100644
+index 0000000000..ff8d10144f
+--- /dev/null
++++ b/src/gui/.tracegen/qtgui_tracepoints_p.h
+@@ -0,0 +1 @@
++#include <private/qtrace_p.h>
+diff --git a/src/gui/qt5gui_metatypes.json b/src/gui/qt5gui_metatypes.json
+new file mode 100644
+index 0000000000..649c2f4b20
+--- /dev/null
++++ b/src/gui/qt5gui_metatypes.json
+@@ -0,0 +1,6096 @@
++[
++    {
++        "classes": [
++            {
++                "className": "QAccessible",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Event",
++                        "values": [
++                            "SoundPlayed",
++                            "Alert",
++                            "ForegroundChanged",
++                            "MenuStart",
++                            "MenuEnd",
++                            "PopupMenuStart",
++                            "PopupMenuEnd",
++                            "ContextHelpStart",
++                            "ContextHelpEnd",
++                            "DragDropStart",
++                            "DragDropEnd",
++                            "DialogStart",
++                            "DialogEnd",
++                            "ScrollingStart",
++                            "ScrollingEnd",
++                            "MenuCommand",
++                            "ActionChanged",
++                            "ActiveDescendantChanged",
++                            "AttributeChanged",
++                            "DocumentContentChanged",
++                            "DocumentLoadComplete",
++                            "DocumentLoadStopped",
++                            "DocumentReload",
++                            "HyperlinkEndIndexChanged",
++                            "HyperlinkNumberOfAnchorsChanged",
++                            "HyperlinkSelectedLinkChanged",
++                            "HypertextLinkActivated",
++                            "HypertextLinkSelected",
++                            "HyperlinkStartIndexChanged",
++                            "HypertextChanged",
++                            "HypertextNLinksChanged",
++                            "ObjectAttributeChanged",
++                            "PageChanged",
++                            "SectionChanged",
++                            "TableCaptionChanged",
++                            "TableColumnDescriptionChanged",
++                            "TableColumnHeaderChanged",
++                            "TableModelChanged",
++                            "TableRowDescriptionChanged",
++                            "TableRowHeaderChanged",
++                            "TableSummaryChanged",
++                            "TextAttributeChanged",
++                            "TextCaretMoved",
++                            "TextColumnChanged",
++                            "TextInserted",
++                            "TextRemoved",
++                            "TextUpdated",
++                            "TextSelectionChanged",
++                            "VisibleDataChanged",
++                            "ObjectCreated",
++                            "ObjectDestroyed",
++                            "ObjectShow",
++                            "ObjectHide",
++                            "ObjectReorder",
++                            "Focus",
++                            "Selection",
++                            "SelectionAdd",
++                            "SelectionRemove",
++                            "SelectionWithin",
++                            "StateChanged",
++                            "LocationChanged",
++                            "NameChanged",
++                            "DescriptionChanged",
++                            "ValueChanged",
++                            "ParentChanged",
++                            "HelpChanged",
++                            "DefaultActionChanged",
++                            "AcceleratorChanged",
++                            "InvalidEvent"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Role",
++                        "values": [
++                            "NoRole",
++                            "TitleBar",
++                            "MenuBar",
++                            "ScrollBar",
++                            "Grip",
++                            "Sound",
++                            "Cursor",
++                            "Caret",
++                            "AlertMessage",
++                            "Window",
++                            "Client",
++                            "PopupMenu",
++                            "MenuItem",
++                            "ToolTip",
++                            "Application",
++                            "Document",
++                            "Pane",
++                            "Chart",
++                            "Dialog",
++                            "Border",
++                            "Grouping",
++                            "Separator",
++                            "ToolBar",
++                            "StatusBar",
++                            "Table",
++                            "ColumnHeader",
++                            "RowHeader",
++                            "Column",
++                            "Row",
++                            "Cell",
++                            "Link",
++                            "HelpBalloon",
++                            "Assistant",
++                            "List",
++                            "ListItem",
++                            "Tree",
++                            "TreeItem",
++                            "PageTab",
++                            "PropertyPage",
++                            "Indicator",
++                            "Graphic",
++                            "StaticText",
++                            "EditableText",
++                            "Button",
++                            "PushButton",
++                            "CheckBox",
++                            "RadioButton",
++                            "ComboBox",
++                            "ProgressBar",
++                            "Dial",
++                            "HotkeyField",
++                            "Slider",
++                            "SpinBox",
++                            "Canvas",
++                            "Animation",
++                            "Equation",
++                            "ButtonDropDown",
++                            "ButtonMenu",
++                            "ButtonDropGrid",
++                            "Whitespace",
++                            "PageTabList",
++                            "Clock",
++                            "Splitter",
++                            "LayeredPane",
++                            "Terminal",
++                            "Desktop",
++                            "Paragraph",
++                            "WebDocument",
++                            "Section",
++                            "Notification",
++                            "ColorChooser",
++                            "Footer",
++                            "Form",
++                            "Heading",
++                            "Note",
++                            "ComplementaryContent",
++                            "UserRole"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QAccessible"
++            }
++        ],
++        "inputFile": "qaccessible.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAccessibleCache",
++                "object": true,
++                "qualifiedClassName": "QAccessibleCache",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "obj",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "objectDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qaccessiblecache_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAccessiblePlugin",
++                "object": true,
++                "qualifiedClassName": "QAccessiblePlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qaccessibleplugin.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAccessibleBridgePlugin",
++                "object": true,
++                "qualifiedClassName": "QAccessibleBridgePlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qaccessiblebridge.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGenericPlugin",
++                "object": true,
++                "qualifiedClassName": "QGenericPlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgenericplugin.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformInputContext",
++                "object": true,
++                "qualifiedClassName": "QPlatformInputContext",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatforminputcontext.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformInputContextPlugin",
++                "object": true,
++                "qualifiedClassName": "QPlatformInputContextPlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatforminputcontextplugin_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformIntegrationPlugin",
++                "object": true,
++                "qualifiedClassName": "QPlatformIntegrationPlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatformintegrationplugin.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformThemePlugin",
++                "object": true,
++                "qualifiedClassName": "QPlatformThemePlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatformthemeplugin.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformNativeInterface",
++                "object": true,
++                "qualifiedClassName": "QPlatformNativeInterface",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "window",
++                                "type": "QPlatformWindow*"
++                            },
++                            {
++                                "name": "propertyName",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "windowPropertyChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatformnativeinterface.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformMenuItem",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "MenuRole",
++                        "values": [
++                            "NoRole",
++                            "TextHeuristicRole",
++                            "ApplicationSpecificRole",
++                            "AboutQtRole",
++                            "AboutRole",
++                            "PreferencesRole",
++                            "QuitRole",
++                            "CutRole",
++                            "CopyRole",
++                            "PasteRole",
++                            "SelectAllRole",
++                            "RoleCount"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QPlatformMenuItem",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "hovered",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QPlatformMenu",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "MenuType",
++                        "values": [
++                            "DefaultMenu",
++                            "EditMenu"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QPlatformMenu",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "aboutToShow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "aboutToHide",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QPlatformMenuBar",
++                "object": true,
++                "qualifiedClassName": "QPlatformMenuBar",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatformmenu.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSurfaceFormat",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "FormatOption",
++                        "values": [
++                            "StereoBuffers",
++                            "DebugContext",
++                            "DeprecatedFunctions",
++                            "ResetNotification"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SwapBehavior",
++                        "values": [
++                            "DefaultSwapBehavior",
++                            "SingleBuffer",
++                            "DoubleBuffer",
++                            "TripleBuffer"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "RenderableType",
++                        "values": [
++                            "DefaultRenderableType",
++                            "OpenGL",
++                            "OpenGLES",
++                            "OpenVG"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "OpenGLContextProfile",
++                        "values": [
++                            "NoProfile",
++                            "CoreProfile",
++                            "CompatibilityProfile"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ColorSpace",
++                        "values": [
++                            "DefaultColorSpace",
++                            "sRGBColorSpace"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QSurfaceFormat"
++            }
++        ],
++        "inputFile": "qsurfaceformat.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGuiApplication",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowIcon",
++                        "read": "windowIcon",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QIcon",
++                        "user": false,
++                        "write": "setWindowIcon"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "applicationDisplayName",
++                        "notify": "applicationDisplayNameChanged",
++                        "read": "applicationDisplayName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setApplicationDisplayName"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "desktopFileName",
++                        "read": "desktopFileName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setDesktopFileName"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "layoutDirection",
++                        "notify": "layoutDirectionChanged",
++                        "read": "layoutDirection",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::LayoutDirection",
++                        "user": false,
++                        "write": "setLayoutDirection"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "platformName",
++                        "read": "platformName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "quitOnLastWindowClosed",
++                        "read": "quitOnLastWindowClosed",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setQuitOnLastWindowClosed"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "primaryScreen",
++                        "notify": "primaryScreenChanged",
++                        "read": "primaryScreen",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "QScreen*",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QGuiApplication",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "fontDatabaseChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "screen",
++                                "type": "QScreen*"
++                            }
++                        ],
++                        "name": "screenAdded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "screen",
++                                "type": "QScreen*"
++                            }
++                        ],
++                        "name": "screenRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "screen",
++                                "type": "QScreen*"
++                            }
++                        ],
++                        "name": "primaryScreenChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "lastWindowClosed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "focusObject",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "focusObjectChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "focusWindow",
++                                "type": "QWindow*"
++                            }
++                        ],
++                        "name": "focusWindowChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "state",
++                                "type": "Qt::ApplicationState"
++                            }
++                        ],
++                        "name": "applicationStateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "direction",
++                                "type": "Qt::LayoutDirection"
++                            }
++                        ],
++                        "name": "layoutDirectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sessionManager",
++                                "type": "QSessionManager&"
++                            }
++                        ],
++                        "name": "commitDataRequest",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sessionManager",
++                                "type": "QSessionManager&"
++                            }
++                        ],
++                        "name": "saveStateRequest",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pal",
++                                "type": "QPalette"
++                            }
++                        ],
++                        "name": "paletteChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "applicationDisplayNameChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "font",
++                                "type": "QFont"
++                            }
++                        ],
++                        "name": "fontChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "object",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "_q_updateFocusObject",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QCoreApplication"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qguiapplication.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWindow",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Visibility",
++                        "values": [
++                            "Hidden",
++                            "AutomaticVisibility",
++                            "Windowed",
++                            "Minimized",
++                            "Maximized",
++                            "FullScreen"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "AncestorMode",
++                        "values": [
++                            "ExcludeTransients",
++                            "IncludeTransients"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "title",
++                        "notify": "windowTitleChanged",
++                        "read": "title",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setTitle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "modality",
++                        "notify": "modalityChanged",
++                        "read": "modality",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::WindowModality",
++                        "user": false,
++                        "write": "setModality"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "flags",
++                        "read": "flags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::WindowFlags",
++                        "user": false,
++                        "write": "setFlags"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "x",
++                        "notify": "xChanged",
++                        "read": "x",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setX"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "y",
++                        "notify": "yChanged",
++                        "read": "y",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setY"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "width",
++                        "notify": "widthChanged",
++                        "read": "width",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "height",
++                        "notify": "heightChanged",
++                        "read": "height",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setHeight"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumWidth",
++                        "notify": "minimumWidthChanged",
++                        "read": "minimumWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimumWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumHeight",
++                        "notify": "minimumHeightChanged",
++                        "read": "minimumHeight",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimumHeight"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumWidth",
++                        "notify": "maximumWidthChanged",
++                        "read": "maximumWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximumWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumHeight",
++                        "notify": "maximumHeightChanged",
++                        "read": "maximumHeight",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximumHeight"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "visible",
++                        "notify": "visibleChanged",
++                        "read": "isVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "active",
++                        "notify": "activeChanged",
++                        "read": "isActive",
++                        "required": false,
++                        "revision": 1,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "visibility",
++                        "notify": "visibilityChanged",
++                        "read": "visibility",
++                        "required": false,
++                        "revision": 1,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Visibility",
++                        "user": false,
++                        "write": "setVisibility"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "contentOrientation",
++                        "notify": "contentOrientationChanged",
++                        "read": "contentOrientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ScreenOrientation",
++                        "user": false,
++                        "write": "reportContentOrientationChange"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "opacity",
++                        "notify": "opacityChanged",
++                        "read": "opacity",
++                        "required": false,
++                        "revision": 1,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setOpacity"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "member": "transientParent",
++                        "name": "transientParent",
++                        "notify": "transientParentChanged",
++                        "privateClass": "QWindow::d_func()",
++                        "required": false,
++                        "revision": 13,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QWindow*",
++                        "user": false,
++                        "write": "setTransientParent"
++                    }
++                ],
++                "qualifiedClassName": "QWindow",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "screen",
++                                "type": "QScreen*"
++                            }
++                        ],
++                        "name": "screenChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "modality",
++                                "type": "Qt::WindowModality"
++                            }
++                        ],
++                        "name": "modalityChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "windowState",
++                                "type": "Qt::WindowState"
++                            }
++                        ],
++                        "name": "windowStateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "title",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "windowTitleChanged",
++                        "returnType": "void",
++                        "revision": 2
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "xChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "yChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "widthChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "heightChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "minimumWidthChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "minimumHeightChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "maximumWidthChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "maximumHeightChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "visibleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visibility",
++                                "type": "QWindow::Visibility"
++                            }
++                        ],
++                        "name": "visibilityChanged",
++                        "returnType": "void",
++                        "revision": 1
++                    },
++                    {
++                        "access": "public",
++                        "name": "activeChanged",
++                        "returnType": "void",
++                        "revision": 1
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "orientation",
++                                "type": "Qt::ScreenOrientation"
++                            }
++                        ],
++                        "name": "contentOrientationChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "object",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "focusObjectChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "opacity",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "opacityChanged",
++                        "returnType": "void",
++                        "revision": 1
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "transientParent",
++                                "type": "QWindow*"
++                            }
++                        ],
++                        "name": "transientParentChanged",
++                        "returnType": "void",
++                        "revision": 13
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "requestActivate",
++                        "returnType": "void",
++                        "revision": 1
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visible",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "show",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "hide",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showMinimized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showMaximized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showFullScreen",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showNormal",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "close",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "name": "raise",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "lower",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "edges",
++                                "type": "Qt::Edges"
++                            }
++                        ],
++                        "name": "startSystemResize",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "name": "startSystemMove",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setTitle",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setX",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setY",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setWidth",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "arg",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setHeight",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "posx",
++                                "type": "int"
++                            },
++                            {
++                                "name": "posy",
++                                "type": "int"
++                            },
++                            {
++                                "name": "w",
++                                "type": "int"
++                            },
++                            {
++                                "name": "h",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setGeometry",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "setGeometry",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "w",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setMinimumWidth",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "h",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setMinimumHeight",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "w",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setMaximumWidth",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "h",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setMaximumHeight",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "msec",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "alert",
++                        "returnType": "void",
++                        "revision": 1
++                    },
++                    {
++                        "access": "public",
++                        "name": "requestUpdate",
++                        "returnType": "void",
++                        "revision": 3
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_clearAlert",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QSurface"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwindow.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QOffscreenSurface",
++                "object": true,
++                "qualifiedClassName": "QOffscreenSurface",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "screen",
++                                "type": "QScreen*"
++                            }
++                        ],
++                        "name": "screenChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "screen",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "screenDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QSurface"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qoffscreensurface.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSurface",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SurfaceClass",
++                        "values": [
++                            "Window",
++                            "Offscreen"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SurfaceType",
++                        "values": [
++                            "RasterSurface",
++                            "OpenGLSurface",
++                            "RasterGLSurface",
++                            "OpenVGSurface",
++                            "VulkanSurface",
++                            "MetalSurface"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QSurface"
++            }
++        ],
++        "inputFile": "qsurface.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QClipboard",
++                "object": true,
++                "qualifiedClassName": "QClipboard",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "mode",
++                                "type": "QClipboard::Mode"
++                            }
++                        ],
++                        "name": "changed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "findBufferChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "dataChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qclipboard.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTabletEvent",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TabletDevice",
++                        "values": [
++                            "NoDevice",
++                            "Puck",
++                            "Stylus",
++                            "Airbrush",
++                            "FourDMouse",
++                            "XFreeEraser",
++                            "RotationStylus"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "PointerType",
++                        "values": [
++                            "UnknownPointer",
++                            "Pen",
++                            "Cursor",
++                            "Eraser"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QTabletEvent",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QInputEvent"
++                    }
++                ]
++            },
++            {
++                "className": "QPointingDeviceUniqueId",
++                "gadget": true,
++                "properties": [
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "numericId",
++                        "read": "numericId",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qint64",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QPointingDeviceUniqueId"
++            }
++        ],
++        "inputFile": "qevent.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QInputMethod",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Action",
++                        "values": [
++                            "Click",
++                            "ContextMenu"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursorRectangle",
++                        "notify": "cursorRectangleChanged",
++                        "read": "cursorRectangle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRectF",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "anchorRectangle",
++                        "notify": "anchorRectangleChanged",
++                        "read": "anchorRectangle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRectF",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "keyboardRectangle",
++                        "notify": "keyboardRectangleChanged",
++                        "read": "keyboardRectangle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRectF",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "inputItemClipRectangle",
++                        "notify": "inputItemClipRectangleChanged",
++                        "read": "inputItemClipRectangle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRectF",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "visible",
++                        "notify": "visibleChanged",
++                        "read": "isVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "animating",
++                        "notify": "animatingChanged",
++                        "read": "isAnimating",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "locale",
++                        "notify": "localeChanged",
++                        "read": "locale",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QLocale",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "inputDirection",
++                        "notify": "inputDirectionChanged",
++                        "read": "inputDirection",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::LayoutDirection",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QInputMethod",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "cursorRectangleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "anchorRectangleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "keyboardRectangleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "inputItemClipRectangleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "visibleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "animatingChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "localeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newDirection",
++                                "type": "Qt::LayoutDirection"
++                            }
++                        ],
++                        "name": "inputDirectionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "show",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "hide",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "queries",
++                                "type": "Qt::InputMethodQueries"
++                            }
++                        ],
++                        "name": "update",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "reset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "commit",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "a",
++                                "type": "Action"
++                            },
++                            {
++                                "name": "cursorPosition",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "invokeAction",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qinputmethod.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QInternalMimeData",
++                "object": true,
++                "qualifiedClassName": "QInternalMimeData",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QMimeData"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qinternalmimedata_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QKeySequence",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StandardKey",
++                        "values": [
++                            "UnknownKey",
++                            "HelpContents",
++                            "WhatsThis",
++                            "Open",
++                            "Close",
++                            "Save",
++                            "New",
++                            "Delete",
++                            "Cut",
++                            "Copy",
++                            "Paste",
++                            "Undo",
++                            "Redo",
++                            "Back",
++                            "Forward",
++                            "Refresh",
++                            "ZoomIn",
++                            "ZoomOut",
++                            "Print",
++                            "AddTab",
++                            "NextChild",
++                            "PreviousChild",
++                            "Find",
++                            "FindNext",
++                            "FindPrevious",
++                            "Replace",
++                            "SelectAll",
++                            "Bold",
++                            "Italic",
++                            "Underline",
++                            "MoveToNextChar",
++                            "MoveToPreviousChar",
++                            "MoveToNextWord",
++                            "MoveToPreviousWord",
++                            "MoveToNextLine",
++                            "MoveToPreviousLine",
++                            "MoveToNextPage",
++                            "MoveToPreviousPage",
++                            "MoveToStartOfLine",
++                            "MoveToEndOfLine",
++                            "MoveToStartOfBlock",
++                            "MoveToEndOfBlock",
++                            "MoveToStartOfDocument",
++                            "MoveToEndOfDocument",
++                            "SelectNextChar",
++                            "SelectPreviousChar",
++                            "SelectNextWord",
++                            "SelectPreviousWord",
++                            "SelectNextLine",
++                            "SelectPreviousLine",
++                            "SelectNextPage",
++                            "SelectPreviousPage",
++                            "SelectStartOfLine",
++                            "SelectEndOfLine",
++                            "SelectStartOfBlock",
++                            "SelectEndOfBlock",
++                            "SelectStartOfDocument",
++                            "SelectEndOfDocument",
++                            "DeleteStartOfWord",
++                            "DeleteEndOfWord",
++                            "DeleteEndOfLine",
++                            "InsertParagraphSeparator",
++                            "InsertLineSeparator",
++                            "SaveAs",
++                            "Preferences",
++                            "Quit",
++                            "FullScreen",
++                            "Deselect",
++                            "DeleteCompleteLine",
++                            "Backspace",
++                            "Cancel"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QKeySequence"
++            }
++        ],
++        "inputFile": "qkeysequence.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QKeyMapper",
++                "object": true,
++                "qualifiedClassName": "QKeyMapper",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qkeymapper_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPalette",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ColorGroup",
++                        "values": [
++                            "Active",
++                            "Disabled",
++                            "Inactive",
++                            "NColorGroups",
++                            "Current",
++                            "All",
++                            "Normal"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ColorRole",
++                        "values": [
++                            "WindowText",
++                            "Button",
++                            "Light",
++                            "Midlight",
++                            "Dark",
++                            "Mid",
++                            "Text",
++                            "BrightText",
++                            "ButtonText",
++                            "Base",
++                            "Window",
++                            "Shadow",
++                            "Highlight",
++                            "HighlightedText",
++                            "Link",
++                            "LinkVisited",
++                            "AlternateBase",
++                            "NoRole",
++                            "ToolTipBase",
++                            "ToolTipText",
++                            "PlaceholderText",
++                            "NColorRoles",
++                            "Foreground",
++                            "Background"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QPalette"
++            }
++        ],
++        "inputFile": "qpalette.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSessionManager",
++                "object": true,
++                "qualifiedClassName": "QSessionManager",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsessionmanager.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QScreen",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "name",
++                        "read": "name",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "manufacturer",
++                        "read": "manufacturer",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "model",
++                        "read": "model",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "serialNumber",
++                        "read": "serialNumber",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": false,
++                        "name": "depth",
++                        "read": "depth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "size",
++                        "notify": "geometryChanged",
++                        "read": "size",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "availableSize",
++                        "notify": "availableGeometryChanged",
++                        "read": "availableSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "virtualSize",
++                        "notify": "virtualGeometryChanged",
++                        "read": "virtualSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "availableVirtualSize",
++                        "notify": "virtualGeometryChanged",
++                        "read": "availableVirtualSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "geometry",
++                        "notify": "geometryChanged",
++                        "read": "geometry",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "availableGeometry",
++                        "notify": "availableGeometryChanged",
++                        "read": "availableGeometry",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "virtualGeometry",
++                        "notify": "virtualGeometryChanged",
++                        "read": "virtualGeometry",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "availableVirtualGeometry",
++                        "notify": "virtualGeometryChanged",
++                        "read": "availableVirtualGeometry",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "physicalSize",
++                        "notify": "physicalSizeChanged",
++                        "read": "physicalSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizeF",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "physicalDotsPerInchX",
++                        "notify": "physicalDotsPerInchChanged",
++                        "read": "physicalDotsPerInchX",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "physicalDotsPerInchY",
++                        "notify": "physicalDotsPerInchChanged",
++                        "read": "physicalDotsPerInchY",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "physicalDotsPerInch",
++                        "notify": "physicalDotsPerInchChanged",
++                        "read": "physicalDotsPerInch",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "logicalDotsPerInchX",
++                        "notify": "logicalDotsPerInchChanged",
++                        "read": "logicalDotsPerInchX",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "logicalDotsPerInchY",
++                        "notify": "logicalDotsPerInchChanged",
++                        "read": "logicalDotsPerInchY",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "logicalDotsPerInch",
++                        "notify": "logicalDotsPerInchChanged",
++                        "read": "logicalDotsPerInch",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "devicePixelRatio",
++                        "notify": "physicalDotsPerInchChanged",
++                        "read": "devicePixelRatio",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "primaryOrientation",
++                        "notify": "primaryOrientationChanged",
++                        "read": "primaryOrientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ScreenOrientation",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "orientation",
++                        "notify": "orientationChanged",
++                        "read": "orientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ScreenOrientation",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "nativeOrientation",
++                        "read": "nativeOrientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ScreenOrientation",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "refreshRate",
++                        "notify": "refreshRateChanged",
++                        "read": "refreshRate",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QScreen",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "geometry",
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "geometryChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "geometry",
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "availableGeometryChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "size",
++                                "type": "QSizeF"
++                            }
++                        ],
++                        "name": "physicalSizeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "dpi",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "physicalDotsPerInchChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "dpi",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "logicalDotsPerInchChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "virtualGeometryChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "orientation",
++                                "type": "Qt::ScreenOrientation"
++                            }
++                        ],
++                        "name": "primaryOrientationChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "orientation",
++                                "type": "Qt::ScreenOrientation"
++                            }
++                        ],
++                        "name": "orientationChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "refreshRate",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "refreshRateChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qscreen.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStyleHints",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "cursorFlashTime",
++                        "notify": "cursorFlashTimeChanged",
++                        "read": "cursorFlashTime",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "fontSmoothingGamma",
++                        "read": "fontSmoothingGamma",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "qreal",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "keyboardAutoRepeatRate",
++                        "read": "keyboardAutoRepeatRate",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "keyboardInputInterval",
++                        "notify": "keyboardInputIntervalChanged",
++                        "read": "keyboardInputInterval",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "mouseDoubleClickInterval",
++                        "notify": "mouseDoubleClickIntervalChanged",
++                        "read": "mouseDoubleClickInterval",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "mousePressAndHoldInterval",
++                        "notify": "mousePressAndHoldIntervalChanged",
++                        "read": "mousePressAndHoldInterval",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "passwordMaskCharacter",
++                        "read": "passwordMaskCharacter",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "QChar",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "passwordMaskDelay",
++                        "read": "passwordMaskDelay",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "setFocusOnTouchRelease",
++                        "read": "setFocusOnTouchRelease",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "showIsFullScreen",
++                        "read": "showIsFullScreen",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "showIsMaximized",
++                        "read": "showIsMaximized",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "showShortcutsInContextMenus",
++                        "notify": "showShortcutsInContextMenusChanged",
++                        "read": "showShortcutsInContextMenus",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setShowShortcutsInContextMenus"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "startDragDistance",
++                        "notify": "startDragDistanceChanged",
++                        "read": "startDragDistance",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "startDragTime",
++                        "notify": "startDragTimeChanged",
++                        "read": "startDragTime",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "startDragVelocity",
++                        "read": "startDragVelocity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "useRtlExtensions",
++                        "read": "useRtlExtensions",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "tabFocusBehavior",
++                        "notify": "tabFocusBehaviorChanged",
++                        "read": "tabFocusBehavior",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TabFocusBehavior",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "singleClickActivation",
++                        "read": "singleClickActivation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "useHoverEffects",
++                        "notify": "useHoverEffectsChanged",
++                        "read": "useHoverEffects",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUseHoverEffects"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "wheelScrollLines",
++                        "notify": "wheelScrollLinesChanged",
++                        "read": "wheelScrollLines",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "mouseQuickSelectionThreshold",
++                        "notify": "mouseQuickSelectionThresholdChanged",
++                        "read": "mouseQuickSelectionThreshold",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMouseQuickSelectionThreshold"
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "mouseDoubleClickDistance",
++                        "read": "mouseDoubleClickDistance",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": true,
++                        "designable": true,
++                        "final": true,
++                        "name": "touchDoubleTapDistance",
++                        "read": "touchDoubleTapDistance",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "int",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QStyleHints",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "cursorFlashTime",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "cursorFlashTimeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "keyboardInputInterval",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "keyboardInputIntervalChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "mouseDoubleClickInterval",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "mouseDoubleClickIntervalChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "mousePressAndHoldInterval",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "mousePressAndHoldIntervalChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "startDragDistance",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "startDragDistanceChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "startDragTime",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "startDragTimeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "tabFocusBehavior",
++                                "type": "Qt::TabFocusBehavior"
++                            }
++                        ],
++                        "name": "tabFocusBehaviorChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "useHoverEffects",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "useHoverEffectsChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "showShortcutsInContextMenusChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "scrollLines",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "wheelScrollLinesChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "threshold",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "mouseQuickSelectionThresholdChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstylehints.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTouchDevice",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "DeviceType",
++                        "values": [
++                            "TouchScreen",
++                            "TouchPad"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "CapabilityFlag",
++                        "values": [
++                            "Position",
++                            "Area",
++                            "Pressure",
++                            "Velocity",
++                            "RawPositions",
++                            "NormalizedPosition",
++                            "MouseEmulation"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QTouchDevice"
++            }
++        ],
++        "inputFile": "qtouchdevice.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformSharedGraphicsCache",
++                "object": true,
++                "qualifiedClassName": "QPlatformSharedGraphicsCache",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "cacheId",
++                                "type": "QByteArray"
++                            },
++                            {
++                                "name": "itemIds",
++                                "type": "QVector<quint32>"
++                            }
++                        ],
++                        "name": "itemsMissing",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "cacheId",
++                                "type": "QByteArray"
++                            },
++                            {
++                                "name": "bufferId",
++                                "type": "void*"
++                            },
++                            {
++                                "name": "itemIds",
++                                "type": "QVector<quint32>"
++                            },
++                            {
++                                "name": "positionsInBuffer",
++                                "type": "QVector<QPoint>"
++                            }
++                        ],
++                        "name": "itemsAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "cacheId",
++                                "type": "QByteArray"
++                            },
++                            {
++                                "name": "itemIds",
++                                "type": "QVector<quint32>"
++                            }
++                        ],
++                        "name": "itemsInvalidated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "cacheId",
++                                "type": "QByteArray"
++                            },
++                            {
++                                "name": "bufferId",
++                                "type": "void*"
++                            },
++                            {
++                                "name": "itemIds",
++                                "type": "QVector<quint32>"
++                            },
++                            {
++                                "name": "positionsInBuffer",
++                                "type": "QVector<QPoint>"
++                            }
++                        ],
++                        "name": "itemsUpdated",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatformsharedgraphicscache.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformDialogHelper",
++                "enums": [
++                    {
++                        "alias": "StandardButton",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "StandardButtons",
++                        "values": [
++                            "NoButton",
++                            "Ok",
++                            "Save",
++                            "SaveAll",
++                            "Open",
++                            "Yes",
++                            "YesToAll",
++                            "No",
++                            "NoToAll",
++                            "Abort",
++                            "Retry",
++                            "Ignore",
++                            "Close",
++                            "Cancel",
++                            "Discard",
++                            "Help",
++                            "Apply",
++                            "Reset",
++                            "RestoreDefaults",
++                            "FirstButton",
++                            "LastButton",
++                            "LowestBit",
++                            "HighestBit"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ButtonRole",
++                        "values": [
++                            "InvalidRole",
++                            "AcceptRole",
++                            "RejectRole",
++                            "DestructiveRole",
++                            "ActionRole",
++                            "HelpRole",
++                            "YesRole",
++                            "NoRole",
++                            "ResetRole",
++                            "ApplyRole",
++                            "NRoles",
++                            "RoleMask",
++                            "AlternateRole",
++                            "Stretch",
++                            "Reverse",
++                            "EOL"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ButtonLayout",
++                        "values": [
++                            "UnknownLayout",
++                            "WinLayout",
++                            "MacLayout",
++                            "KdeLayout",
++                            "GnomeLayout",
++                            "MacModelessLayout",
++                            "AndroidLayout"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QPlatformDialogHelper",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "accept",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "reject",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QColorDialogOptions",
++                "enums": [
++                    {
++                        "alias": "ColorDialogOption",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "ColorDialogOptions",
++                        "values": [
++                            "ShowAlphaChannel",
++                            "NoButtons",
++                            "DontUseNativeDialog"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QColorDialogOptions"
++            },
++            {
++                "className": "QPlatformColorDialogHelper",
++                "object": true,
++                "qualifiedClassName": "QPlatformColorDialogHelper",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "color",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "currentColorChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "color",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "colorSelected",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPlatformDialogHelper"
++                    }
++                ]
++            },
++            {
++                "className": "QFontDialogOptions",
++                "enums": [
++                    {
++                        "alias": "FontDialogOption",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "FontDialogOptions",
++                        "values": [
++                            "NoButtons",
++                            "DontUseNativeDialog",
++                            "ScalableFonts",
++                            "NonScalableFonts",
++                            "MonospacedFonts",
++                            "ProportionalFonts"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QFontDialogOptions"
++            },
++            {
++                "className": "QPlatformFontDialogHelper",
++                "object": true,
++                "qualifiedClassName": "QPlatformFontDialogHelper",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "font",
++                                "type": "QFont"
++                            }
++                        ],
++                        "name": "currentFontChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "font",
++                                "type": "QFont"
++                            }
++                        ],
++                        "name": "fontSelected",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPlatformDialogHelper"
++                    }
++                ]
++            },
++            {
++                "className": "QFileDialogOptions",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ViewMode",
++                        "values": [
++                            "Detail",
++                            "List"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "FileMode",
++                        "values": [
++                            "AnyFile",
++                            "ExistingFile",
++                            "Directory",
++                            "ExistingFiles",
++                            "DirectoryOnly"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "AcceptMode",
++                        "values": [
++                            "AcceptOpen",
++                            "AcceptSave"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "DialogLabel",
++                        "values": [
++                            "LookIn",
++                            "FileName",
++                            "FileType",
++                            "Accept",
++                            "Reject",
++                            "DialogLabelCount"
++                        ]
++                    },
++                    {
++                        "alias": "FileDialogOption",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "FileDialogOptions",
++                        "values": [
++                            "ShowDirsOnly",
++                            "DontResolveSymlinks",
++                            "DontConfirmOverwrite",
++                            "DontUseSheet",
++                            "DontUseNativeDialog",
++                            "ReadOnly",
++                            "HideNameFilterDetails",
++                            "DontUseCustomDirectoryIcons"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QFileDialogOptions"
++            },
++            {
++                "className": "QPlatformFileDialogHelper",
++                "object": true,
++                "qualifiedClassName": "QPlatformFileDialogHelper",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "file",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "fileSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "files",
++                                "type": "QList<QUrl>"
++                            }
++                        ],
++                        "name": "filesSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "directory",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "directoryEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "filter",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "filterSelected",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPlatformDialogHelper"
++                    }
++                ]
++            },
++            {
++                "className": "QMessageDialogOptions",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Icon",
++                        "values": [
++                            "NoIcon",
++                            "Information",
++                            "Warning",
++                            "Critical",
++                            "Question"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QMessageDialogOptions"
++            },
++            {
++                "className": "QPlatformMessageDialogHelper",
++                "object": true,
++                "qualifiedClassName": "QPlatformMessageDialogHelper",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "button",
++                                "type": "QPlatformDialogHelper::StandardButton"
++                            },
++                            {
++                                "name": "role",
++                                "type": "QPlatformDialogHelper::ButtonRole"
++                            }
++                        ],
++                        "name": "clicked",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPlatformDialogHelper"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatformdialoghelper.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformSystemTrayIcon",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ActivationReason",
++                        "values": [
++                            "Unknown",
++                            "Context",
++                            "DoubleClick",
++                            "Trigger",
++                            "MiddleClick"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "MessageIcon",
++                        "values": [
++                            "NoIcon",
++                            "Information",
++                            "Warning",
++                            "Critical"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QPlatformSystemTrayIcon",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "reason",
++                                "type": "QPlatformSystemTrayIcon::ActivationReason"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "globalPos",
++                                "type": "QPoint"
++                            },
++                            {
++                                "name": "screen",
++                                "type": "const QPlatformScreen*"
++                            }
++                        ],
++                        "name": "contextMenuRequested",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "messageClicked",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatformsystemtrayicon.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPaintDeviceWindow",
++                "object": true,
++                "qualifiedClassName": "QPaintDeviceWindow",
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "update",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWindow"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QPaintDevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpaintdevicewindow.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QRasterWindow",
++                "object": true,
++                "qualifiedClassName": "QRasterWindow",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPaintDeviceWindow"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qrasterwindow.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlatformGraphicsBuffer",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "AccessType",
++                        "values": [
++                            "None",
++                            "SWReadAccess",
++                            "SWWriteAccess",
++                            "TextureAccess",
++                            "HWCompositor"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Origin",
++                        "values": [
++                            "OriginBottomLeft",
++                            "OriginTopLeft"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QPlatformGraphicsBuffer",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "previousAccessTypes",
++                                "type": "AccessTypes"
++                            }
++                        ],
++                        "name": "unlocked",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplatformgraphicsbuffer.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QInputDeviceManager",
++                "object": true,
++                "qualifiedClassName": "QInputDeviceManager",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "type",
++                                "type": "QInputDeviceManager::DeviceType"
++                            }
++                        ],
++                        "name": "deviceListChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pos",
++                                "type": "QPoint"
++                            }
++                        ],
++                        "name": "cursorPositionChangeRequested",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qinputdevicemanager_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QHighDpiScaling",
++                "enums": [
++                    {
++                        "isClass": true,
++                        "isFlag": false,
++                        "name": "DpiAdjustmentPolicy",
++                        "values": [
++                            "Unset",
++                            "Enabled",
++                            "Disabled",
++                            "UpOnly"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QHighDpiScaling"
++            }
++        ],
++        "inputFile": "qhighdpiscaling_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDragManager",
++                "object": true,
++                "qualifiedClassName": "QDragManager",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdnd_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDrag",
++                "object": true,
++                "qualifiedClassName": "QDrag",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "Qt::DropAction"
++                            }
++                        ],
++                        "name": "actionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newTarget",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "targetChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdrag.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QShapedPixmapWindow",
++                "object": true,
++                "qualifiedClassName": "QShapedPixmapWindow",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QRasterWindow"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qshapedpixmapdndwindow_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QImage",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Format",
++                        "values": [
++                            "Format_Invalid",
++                            "Format_Mono",
++                            "Format_MonoLSB",
++                            "Format_Indexed8",
++                            "Format_RGB32",
++                            "Format_ARGB32",
++                            "Format_ARGB32_Premultiplied",
++                            "Format_RGB16",
++                            "Format_ARGB8565_Premultiplied",
++                            "Format_RGB666",
++                            "Format_ARGB6666_Premultiplied",
++                            "Format_RGB555",
++                            "Format_ARGB8555_Premultiplied",
++                            "Format_RGB888",
++                            "Format_RGB444",
++                            "Format_ARGB4444_Premultiplied",
++                            "Format_RGBX8888",
++                            "Format_RGBA8888",
++                            "Format_RGBA8888_Premultiplied",
++                            "Format_BGR30",
++                            "Format_A2BGR30_Premultiplied",
++                            "Format_RGB30",
++                            "Format_A2RGB30_Premultiplied",
++                            "Format_Alpha8",
++                            "Format_Grayscale8",
++                            "Format_RGBX64",
++                            "Format_RGBA64",
++                            "Format_RGBA64_Premultiplied",
++                            "Format_Grayscale16",
++                            "Format_BGR888",
++                            "NImageFormats"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QImage",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPaintDevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qimage.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QImageIOPlugin",
++                "object": true,
++                "qualifiedClassName": "QImageIOPlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qimageiohandler.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPictureFormatPlugin",
++                "object": true,
++                "qualifiedClassName": "QPictureFormatPlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpictureformatplugin.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QIconEnginePlugin",
++                "object": true,
++                "qualifiedClassName": "QIconEnginePlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qiconengineplugin.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMovie",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "MovieState",
++                        "values": [
++                            "NotRunning",
++                            "Paused",
++                            "Running"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "CacheMode",
++                        "values": [
++                            "CacheNone",
++                            "CacheAll"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "speed",
++                        "read": "speed",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setSpeed"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cacheMode",
++                        "read": "cacheMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "CacheMode",
++                        "user": false,
++                        "write": "setCacheMode"
++                    }
++                ],
++                "qualifiedClassName": "QMovie",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "started",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "size",
++                                "type": "QSize"
++                            }
++                        ],
++                        "name": "resized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "updated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "state",
++                                "type": "QMovie::MovieState"
++                            }
++                        ],
++                        "name": "stateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "error",
++                                "type": "QImageReader::ImageReaderError"
++                            }
++                        ],
++                        "name": "error",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "finished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "frameNumber",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "frameChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "start",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "jumpToNextFrame",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "paused",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setPaused",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "stop",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "percentSpeed",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setSpeed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_loadNextFrame",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmovie.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFont",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StyleHint",
++                        "values": [
++                            "Helvetica",
++                            "SansSerif",
++                            "Times",
++                            "Serif",
++                            "Courier",
++                            "TypeWriter",
++                            "OldEnglish",
++                            "Decorative",
++                            "System",
++                            "AnyStyle",
++                            "Cursive",
++                            "Monospace",
++                            "Fantasy"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StyleStrategy",
++                        "values": [
++                            "PreferDefault",
++                            "PreferBitmap",
++                            "PreferDevice",
++                            "PreferOutline",
++                            "ForceOutline",
++                            "PreferMatch",
++                            "PreferQuality",
++                            "PreferAntialias",
++                            "NoAntialias",
++                            "OpenGLCompatible",
++                            "ForceIntegerMetrics",
++                            "NoSubpixelAntialias",
++                            "PreferNoShaping",
++                            "NoFontMerging"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "HintingPreference",
++                        "values": [
++                            "PreferDefaultHinting",
++                            "PreferNoHinting",
++                            "PreferVerticalHinting",
++                            "PreferFullHinting"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Weight",
++                        "values": [
++                            "Thin",
++                            "ExtraLight",
++                            "Light",
++                            "Normal",
++                            "Medium",
++                            "DemiBold",
++                            "Bold",
++                            "ExtraBold",
++                            "Black"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Style",
++                        "values": [
++                            "StyleNormal",
++                            "StyleItalic",
++                            "StyleOblique"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Stretch",
++                        "values": [
++                            "AnyStretch",
++                            "UltraCondensed",
++                            "ExtraCondensed",
++                            "Condensed",
++                            "SemiCondensed",
++                            "Unstretched",
++                            "SemiExpanded",
++                            "Expanded",
++                            "ExtraExpanded",
++                            "UltraExpanded"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Capitalization",
++                        "values": [
++                            "MixedCase",
++                            "AllUppercase",
++                            "AllLowercase",
++                            "SmallCaps",
++                            "Capitalize"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SpacingType",
++                        "values": [
++                            "PercentageSpacing",
++                            "AbsoluteSpacing"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ResolveProperties",
++                        "values": [
++                            "NoPropertiesResolved",
++                            "FamilyResolved",
++                            "SizeResolved",
++                            "StyleHintResolved",
++                            "StyleStrategyResolved",
++                            "WeightResolved",
++                            "StyleResolved",
++                            "UnderlineResolved",
++                            "OverlineResolved",
++                            "StrikeOutResolved",
++                            "FixedPitchResolved",
++                            "StretchResolved",
++                            "KerningResolved",
++                            "CapitalizationResolved",
++                            "LetterSpacingResolved",
++                            "WordSpacingResolved",
++                            "HintingPreferenceResolved",
++                            "StyleNameResolved",
++                            "FamiliesResolved",
++                            "AllPropertiesResolved"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QFont"
++            }
++        ],
++        "inputFile": "qfont.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFontDatabase",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "WritingSystem",
++                        "values": [
++                            "Any",
++                            "Latin",
++                            "Greek",
++                            "Cyrillic",
++                            "Armenian",
++                            "Hebrew",
++                            "Arabic",
++                            "Syriac",
++                            "Thaana",
++                            "Devanagari",
++                            "Bengali",
++                            "Gurmukhi",
++                            "Gujarati",
++                            "Oriya",
++                            "Tamil",
++                            "Telugu",
++                            "Kannada",
++                            "Malayalam",
++                            "Sinhala",
++                            "Thai",
++                            "Lao",
++                            "Tibetan",
++                            "Myanmar",
++                            "Georgian",
++                            "Khmer",
++                            "SimplifiedChinese",
++                            "TraditionalChinese",
++                            "Japanese",
++                            "Korean",
++                            "Vietnamese",
++                            "Symbol",
++                            "Other",
++                            "Ogham",
++                            "Runic",
++                            "Nko",
++                            "WritingSystemsCount"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SystemFont",
++                        "values": [
++                            "GeneralFont",
++                            "FixedFont",
++                            "TitleFont",
++                            "SmallestReadableFont"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QFontDatabase"
++            }
++        ],
++        "inputFile": "qfontdatabase.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTextFormat",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "FormatType",
++                        "values": [
++                            "InvalidFormat",
++                            "BlockFormat",
++                            "CharFormat",
++                            "ListFormat",
++                            "TableFormat",
++                            "FrameFormat",
++                            "UserFormat"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Property",
++                        "values": [
++                            "ObjectIndex",
++                            "CssFloat",
++                            "LayoutDirection",
++                            "OutlinePen",
++                            "BackgroundBrush",
++                            "ForegroundBrush",
++                            "BackgroundImageUrl",
++                            "BlockAlignment",
++                            "BlockTopMargin",
++                            "BlockBottomMargin",
++                            "BlockLeftMargin",
++                            "BlockRightMargin",
++                            "TextIndent",
++                            "TabPositions",
++                            "BlockIndent",
++                            "LineHeight",
++                            "LineHeightType",
++                            "BlockNonBreakableLines",
++                            "BlockTrailingHorizontalRulerWidth",
++                            "HeadingLevel",
++                            "BlockQuoteLevel",
++                            "BlockCodeLanguage",
++                            "BlockCodeFence",
++                            "BlockMarker",
++                            "FirstFontProperty",
++                            "FontCapitalization",
++                            "FontLetterSpacingType",
++                            "FontLetterSpacing",
++                            "FontWordSpacing",
++                            "FontStretch",
++                            "FontStyleHint",
++                            "FontStyleStrategy",
++                            "FontKerning",
++                            "FontHintingPreference",
++                            "FontFamilies",
++                            "FontStyleName",
++                            "FontFamily",
++                            "FontPointSize",
++                            "FontSizeAdjustment",
++                            "FontSizeIncrement",
++                            "FontWeight",
++                            "FontItalic",
++                            "FontUnderline",
++                            "FontOverline",
++                            "FontStrikeOut",
++                            "FontFixedPitch",
++                            "FontPixelSize",
++                            "LastFontProperty",
++                            "TextUnderlineColor",
++                            "TextVerticalAlignment",
++                            "TextOutline",
++                            "TextUnderlineStyle",
++                            "TextToolTip",
++                            "IsAnchor",
++                            "AnchorHref",
++                            "AnchorName",
++                            "ObjectType",
++                            "ListStyle",
++                            "ListIndent",
++                            "ListNumberPrefix",
++                            "ListNumberSuffix",
++                            "FrameBorder",
++                            "FrameMargin",
++                            "FramePadding",
++                            "FrameWidth",
++                            "FrameHeight",
++                            "FrameTopMargin",
++                            "FrameBottomMargin",
++                            "FrameLeftMargin",
++                            "FrameRightMargin",
++                            "FrameBorderBrush",
++                            "FrameBorderStyle",
++                            "TableColumns",
++                            "TableColumnWidthConstraints",
++                            "TableCellSpacing",
++                            "TableCellPadding",
++                            "TableHeaderRowCount",
++                            "TableBorderCollapse",
++                            "TableCellRowSpan",
++                            "TableCellColumnSpan",
++                            "TableCellTopPadding",
++                            "TableCellBottomPadding",
++                            "TableCellLeftPadding",
++                            "TableCellRightPadding",
++                            "TableCellTopBorder",
++                            "TableCellBottomBorder",
++                            "TableCellLeftBorder",
++                            "TableCellRightBorder",
++                            "TableCellTopBorderStyle",
++                            "TableCellBottomBorderStyle",
++                            "TableCellLeftBorderStyle",
++                            "TableCellRightBorderStyle",
++                            "TableCellTopBorderBrush",
++                            "TableCellBottomBorderBrush",
++                            "TableCellLeftBorderBrush",
++                            "TableCellRightBorderBrush",
++                            "ImageName",
++                            "ImageTitle",
++                            "ImageAltText",
++                            "ImageWidth",
++                            "ImageHeight",
++                            "ImageQuality",
++                            "FullWidthSelection",
++                            "PageBreakPolicy",
++                            "UserProperty"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ObjectTypes",
++                        "values": [
++                            "NoObject",
++                            "ImageObject",
++                            "TableObject",
++                            "TableCellObject",
++                            "UserObject"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QTextFormat"
++            }
++        ],
++        "inputFile": "qtextformat.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTextObject",
++                "object": true,
++                "qualifiedClassName": "QTextObject",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QTextBlockGroup",
++                "object": true,
++                "qualifiedClassName": "QTextBlockGroup",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QTextObject"
++                    }
++                ]
++            },
++            {
++                "className": "QTextFrame",
++                "object": true,
++                "qualifiedClassName": "QTextFrame",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QTextObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtextobject.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTextDocument",
++                "enums": [
++                    {
++                        "alias": "MarkdownFeature",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "MarkdownFeatures",
++                        "values": [
++                            "MarkdownNoHTML",
++                            "MarkdownDialectCommonMark",
++                            "MarkdownDialectGitHub"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ResourceType",
++                        "values": [
++                            "UnknownResource",
++                            "HtmlResource",
++                            "ImageResource",
++                            "StyleSheetResource",
++                            "MarkdownResource",
++                            "UserResource"
++                        ]
++                    }
++                ],
++                "methods": [
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "type",
++                                "type": "int"
++                            },
++                            {
++                                "name": "name",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "loadResource",
++                        "returnType": "QVariant"
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "undoRedoEnabled",
++                        "read": "isUndoRedoEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUndoRedoEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "modified",
++                        "read": "isModified",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setModified"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "pageSize",
++                        "read": "pageSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizeF",
++                        "user": false,
++                        "write": "setPageSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "defaultFont",
++                        "read": "defaultFont",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QFont",
++                        "user": false,
++                        "write": "setDefaultFont"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "useDesignMetrics",
++                        "read": "useDesignMetrics",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUseDesignMetrics"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "size",
++                        "read": "size",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizeF",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textWidth",
++                        "read": "textWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setTextWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "blockCount",
++                        "read": "blockCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "indentWidth",
++                        "read": "indentWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setIndentWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "defaultStyleSheet",
++                        "read": "defaultStyleSheet",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setDefaultStyleSheet"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumBlockCount",
++                        "read": "maximumBlockCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximumBlockCount"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "documentMargin",
++                        "read": "documentMargin",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setDocumentMargin"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "baseUrl",
++                        "notify": "baseUrlChanged",
++                        "read": "baseUrl",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QUrl",
++                        "user": false,
++                        "write": "setBaseUrl"
++                    }
++                ],
++                "qualifiedClassName": "QTextDocument",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "from",
++                                "type": "int"
++                            },
++                            {
++                                "name": "charsRemoved",
++                                "type": "int"
++                            },
++                            {
++                                "name": "charsAdded",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "contentsChange",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "contentsChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "undoAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "redoAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "undoCommandAdded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "m",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "modificationChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "cursor",
++                                "type": "QTextCursor"
++                            }
++                        ],
++                        "name": "cursorPositionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newBlockCount",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "blockCountChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "url",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "baseUrlChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "documentLayoutChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "undo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "redo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAbstractUndoItem*"
++                            }
++                        ],
++                        "name": "appendUndoItem",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "m",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setModified",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "setModified",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtextdocument.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractTextDocumentLayout",
++                "object": true,
++                "qualifiedClassName": "QAbstractTextDocumentLayout",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "update",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "update",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "block",
++                                "type": "QTextBlock"
++                            }
++                        ],
++                        "name": "updateBlock",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newSize",
++                                "type": "QSizeF"
++                            }
++                        ],
++                        "name": "documentSizeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newPages",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "pageCountChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "obj",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "_q_handlerDestroyed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_dynamicPageCountSlot",
++                        "returnType": "int"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_dynamicDocumentSizeSlot",
++                        "returnType": "QSizeF"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstracttextdocumentlayout.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTextDocumentLayout",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursorWidth",
++                        "read": "cursorWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCursorWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "idealWidth",
++                        "read": "idealWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "contentHasAlignment",
++                        "read": "contentHasAlignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QTextDocumentLayout",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTextDocumentLayout"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtextdocumentlayout_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTextImageHandler",
++                "interfaces": [
++                    [
++                        {
++                            "className": "QTextObjectInterface",
++                            "id": "\"org.qt-project.Qt.QTextObjectInterface\""
++                        }
++                    ]
++                ],
++                "object": true,
++                "qualifiedClassName": "QTextImageHandler",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QTextObjectInterface"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtextimagehandler_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTextTable",
++                "object": true,
++                "qualifiedClassName": "QTextTable",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QTextFrame"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtexttable.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTextList",
++                "object": true,
++                "qualifiedClassName": "QTextList",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QTextBlockGroup"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtextlist.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSyntaxHighlighter",
++                "object": true,
++                "qualifiedClassName": "QSyntaxHighlighter",
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "rehighlight",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "block",
++                                "type": "QTextBlock"
++                            }
++                        ],
++                        "name": "rehighlightBlock",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "from",
++                                "type": "int"
++                            },
++                            {
++                                "name": "charsRemoved",
++                                "type": "int"
++                            },
++                            {
++                                "name": "charsAdded",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_reformatBlocks",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_delayedRehighlight",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsyntaxhighlighter.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QInputControl",
++                "object": true,
++                "qualifiedClassName": "QInputControl",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qinputcontrol_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGradient",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Type",
++                        "values": [
++                            "LinearGradient",
++                            "RadialGradient",
++                            "ConicalGradient",
++                            "NoGradient"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Spread",
++                        "values": [
++                            "PadSpread",
++                            "ReflectSpread",
++                            "RepeatSpread"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "CoordinateMode",
++                        "values": [
++                            "LogicalMode",
++                            "StretchToDeviceMode",
++                            "ObjectBoundingMode",
++                            "ObjectMode"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Preset",
++                        "values": [
++                            "WarmFlame",
++                            "NightFade",
++                            "SpringWarmth",
++                            "JuicyPeach",
++                            "YoungPassion",
++                            "LadyLips",
++                            "SunnyMorning",
++                            "RainyAshville",
++                            "FrozenDreams",
++                            "WinterNeva",
++                            "DustyGrass",
++                            "TemptingAzure",
++                            "HeavyRain",
++                            "AmyCrisp",
++                            "MeanFruit",
++                            "DeepBlue",
++                            "RipeMalinka",
++                            "CloudyKnoxville",
++                            "MalibuBeach",
++                            "NewLife",
++                            "TrueSunset",
++                            "MorpheusDen",
++                            "RareWind",
++                            "NearMoon",
++                            "WildApple",
++                            "SaintPetersburg",
++                            "PlumPlate",
++                            "EverlastingSky",
++                            "HappyFisher",
++                            "Blessing",
++                            "SharpeyeEagle",
++                            "LadogaBottom",
++                            "LemonGate",
++                            "ItmeoBranding",
++                            "ZeusMiracle",
++                            "OldHat",
++                            "StarWine",
++                            "HappyAcid",
++                            "AwesomePine",
++                            "NewYork",
++                            "ShyRainbow",
++                            "MixedHopes",
++                            "FlyHigh",
++                            "StrongBliss",
++                            "FreshMilk",
++                            "SnowAgain",
++                            "FebruaryInk",
++                            "KindSteel",
++                            "SoftGrass",
++                            "GrownEarly",
++                            "SharpBlues",
++                            "ShadyWater",
++                            "DirtyBeauty",
++                            "GreatWhale",
++                            "TeenNotebook",
++                            "PoliteRumors",
++                            "SweetPeriod",
++                            "WideMatrix",
++                            "SoftCherish",
++                            "RedSalvation",
++                            "BurningSpring",
++                            "NightParty",
++                            "SkyGlider",
++                            "HeavenPeach",
++                            "PurpleDivision",
++                            "AquaSplash",
++                            "SpikyNaga",
++                            "LoveKiss",
++                            "CleanMirror",
++                            "PremiumDark",
++                            "ColdEvening",
++                            "CochitiLake",
++                            "SummerGames",
++                            "PassionateBed",
++                            "MountainRock",
++                            "DesertHump",
++                            "JungleDay",
++                            "PhoenixStart",
++                            "OctoberSilence",
++                            "FarawayRiver",
++                            "AlchemistLab",
++                            "OverSun",
++                            "PremiumWhite",
++                            "MarsParty",
++                            "EternalConstance",
++                            "JapanBlush",
++                            "SmilingRain",
++                            "CloudyApple",
++                            "BigMango",
++                            "HealthyWater",
++                            "AmourAmour",
++                            "RiskyConcrete",
++                            "StrongStick",
++                            "ViciousStance",
++                            "PaloAlto",
++                            "HappyMemories",
++                            "MidnightBloom",
++                            "Crystalline",
++                            "PartyBliss",
++                            "ConfidentCloud",
++                            "LeCocktail",
++                            "RiverCity",
++                            "FrozenBerry",
++                            "ChildCare",
++                            "FlyingLemon",
++                            "NewRetrowave",
++                            "HiddenJaguar",
++                            "AboveTheSky",
++                            "Nega",
++                            "DenseWater",
++                            "Seashore",
++                            "MarbleWall",
++                            "CheerfulCaramel",
++                            "NightSky",
++                            "MagicLake",
++                            "YoungGrass",
++                            "ColorfulPeach",
++                            "GentleCare",
++                            "PlumBath",
++                            "HappyUnicorn",
++                            "AfricanField",
++                            "SolidStone",
++                            "OrangeJuice",
++                            "GlassWater",
++                            "NorthMiracle",
++                            "FruitBlend",
++                            "MillenniumPine",
++                            "HighFlight",
++                            "MoleHall",
++                            "SpaceShift",
++                            "ForestInei",
++                            "RoyalGarden",
++                            "RichMetal",
++                            "JuicyCake",
++                            "SmartIndigo",
++                            "SandStrike",
++                            "NorseBeauty",
++                            "AquaGuidance",
++                            "SunVeggie",
++                            "SeaLord",
++                            "BlackSea",
++                            "GrassShampoo",
++                            "LandingAircraft",
++                            "WitchDance",
++                            "SleeplessNight",
++                            "AngelCare",
++                            "CrystalRiver",
++                            "SoftLipstick",
++                            "SaltMountain",
++                            "PerfectWhite",
++                            "FreshOasis",
++                            "StrictNovember",
++                            "MorningSalad",
++                            "DeepRelief",
++                            "SeaStrike",
++                            "NightCall",
++                            "SupremeSky",
++                            "LightBlue",
++                            "MindCrawl",
++                            "LilyMeadow",
++                            "SugarLollipop",
++                            "SweetDessert",
++                            "MagicRay",
++                            "TeenParty",
++                            "FrozenHeat",
++                            "GagarinView",
++                            "FabledSunset",
++                            "PerfectBlue",
++                            "NumPresets"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QGradient"
++            }
++        ],
++        "inputFile": "qbrush.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QColorSpace",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "NamedColorSpace",
++                        "values": [
++                            "SRgb",
++                            "SRgbLinear",
++                            "AdobeRgb",
++                            "DisplayP3",
++                            "ProPhotoRgb"
++                        ]
++                    },
++                    {
++                        "isClass": true,
++                        "isFlag": false,
++                        "name": "Primaries",
++                        "values": [
++                            "Custom",
++                            "SRgb",
++                            "AdobeRgb",
++                            "DciP3D65",
++                            "ProPhotoRgb"
++                        ]
++                    },
++                    {
++                        "isClass": true,
++                        "isFlag": false,
++                        "name": "TransferFunction",
++                        "values": [
++                            "Custom",
++                            "Linear",
++                            "Gamma",
++                            "SRgb",
++                            "ProPhotoRgb"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QColorSpace"
++            }
++        ],
++        "inputFile": "qcolorspace.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPainter",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "RenderHint",
++                        "values": [
++                            "Antialiasing",
++                            "TextAntialiasing",
++                            "SmoothPixmapTransform",
++                            "HighQualityAntialiasing",
++                            "NonCosmeticDefaultPen",
++                            "Qt4CompatiblePainting",
++                            "LosslessImageRendering"
++                        ]
++                    },
++                    {
++                        "alias": "RenderHint",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "RenderHints",
++                        "values": [
++                            "Antialiasing",
++                            "TextAntialiasing",
++                            "SmoothPixmapTransform",
++                            "HighQualityAntialiasing",
++                            "NonCosmeticDefaultPen",
++                            "Qt4CompatiblePainting",
++                            "LosslessImageRendering"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QPainter"
++            }
++        ],
++        "inputFile": "qpainter.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPdfWriter",
++                "object": true,
++                "qualifiedClassName": "QPdfWriter",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QPagedPaintDevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpdfwriter.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QValidator",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "State",
++                        "values": [
++                            "Invalid",
++                            "Intermediate",
++                            "Acceptable"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QValidator",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "changed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QIntValidator",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "bottom",
++                        "notify": "bottomChanged",
++                        "read": "bottom",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setBottom"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "top",
++                        "notify": "topChanged",
++                        "read": "top",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setTop"
++                    }
++                ],
++                "qualifiedClassName": "QIntValidator",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "bottom",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "bottomChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "top",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "topChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QValidator"
++                    }
++                ]
++            },
++            {
++                "className": "QDoubleValidator",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Notation",
++                        "values": [
++                            "StandardNotation",
++                            "ScientificNotation"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "bottom",
++                        "notify": "bottomChanged",
++                        "read": "bottom",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "double",
++                        "user": false,
++                        "write": "setBottom"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "top",
++                        "notify": "topChanged",
++                        "read": "top",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "double",
++                        "user": false,
++                        "write": "setTop"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "decimals",
++                        "notify": "decimalsChanged",
++                        "read": "decimals",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDecimals"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "notation",
++                        "notify": "notationChanged",
++                        "read": "notation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Notation",
++                        "user": false,
++                        "write": "setNotation"
++                    }
++                ],
++                "qualifiedClassName": "QDoubleValidator",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "bottom",
++                                "type": "double"
++                            }
++                        ],
++                        "name": "bottomChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "top",
++                                "type": "double"
++                            }
++                        ],
++                        "name": "topChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "decimals",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "decimalsChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "notation",
++                                "type": "QDoubleValidator::Notation"
++                            }
++                        ],
++                        "name": "notationChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QValidator"
++                    }
++                ]
++            },
++            {
++                "className": "QRegExpValidator",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "regExp",
++                        "notify": "regExpChanged",
++                        "read": "regExp",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRegExp",
++                        "user": false,
++                        "write": "setRegExp"
++                    }
++                ],
++                "qualifiedClassName": "QRegExpValidator",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "regExp",
++                                "type": "QRegExp"
++                            }
++                        ],
++                        "name": "regExpChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QValidator"
++                    }
++                ]
++            },
++            {
++                "className": "QRegularExpressionValidator",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "regularExpression",
++                        "notify": "regularExpressionChanged",
++                        "read": "regularExpression",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRegularExpression",
++                        "user": false,
++                        "write": "setRegularExpression"
++                    }
++                ],
++                "qualifiedClassName": "QRegularExpressionValidator",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "re",
++                                "type": "QRegularExpression"
++                            }
++                        ],
++                        "name": "regularExpressionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "re",
++                                "type": "QRegularExpression"
++                            }
++                        ],
++                        "name": "setRegularExpression",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QValidator"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qvalidator.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QLayoutPolicy",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Policy",
++                        "values": [
++                            "Fixed",
++                            "Minimum",
++                            "Maximum",
++                            "Preferred",
++                            "MinimumExpanding",
++                            "Expanding",
++                            "Ignored"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QLayoutPolicy"
++            }
++        ],
++        "inputFile": "qlayoutpolicy_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QShaderLanguage",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StorageQualifier",
++                        "values": [
++                            "Const",
++                            "Input",
++                            "BuiltIn",
++                            "Output",
++                            "Uniform"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "VariableType",
++                        "values": [
++                            "Bool",
++                            "Int",
++                            "Uint",
++                            "Float",
++                            "Double",
++                            "Vec2",
++                            "Vec3",
++                            "Vec4",
++                            "DVec2",
++                            "DVec3",
++                            "DVec4",
++                            "BVec2",
++                            "BVec3",
++                            "BVec4",
++                            "IVec2",
++                            "IVec3",
++                            "IVec4",
++                            "UVec2",
++                            "UVec3",
++                            "UVec4",
++                            "Mat2",
++                            "Mat3",
++                            "Mat4",
++                            "Mat2x2",
++                            "Mat2x3",
++                            "Mat2x4",
++                            "Mat3x2",
++                            "Mat3x3",
++                            "Mat3x4",
++                            "Mat4x2",
++                            "Mat4x3",
++                            "Mat4x4",
++                            "DMat2",
++                            "DMat3",
++                            "DMat4",
++                            "DMat2x2",
++                            "DMat2x3",
++                            "DMat2x4",
++                            "DMat3x2",
++                            "DMat3x3",
++                            "DMat3x4",
++                            "DMat4x2",
++                            "DMat4x3",
++                            "DMat4x4",
++                            "Sampler1D",
++                            "Sampler2D",
++                            "Sampler3D",
++                            "SamplerCube",
++                            "Sampler2DRect",
++                            "Sampler2DMs",
++                            "SamplerBuffer",
++                            "Sampler1DArray",
++                            "Sampler2DArray",
++                            "Sampler2DMsArray",
++                            "SamplerCubeArray",
++                            "Sampler1DShadow",
++                            "Sampler2DShadow",
++                            "Sampler2DRectShadow",
++                            "Sampler1DArrayShadow",
++                            "Sampler2DArrayShadow",
++                            "SamplerCubeShadow",
++                            "SamplerCubeArrayShadow",
++                            "ISampler1D",
++                            "ISampler2D",
++                            "ISampler3D",
++                            "ISamplerCube",
++                            "ISampler2DRect",
++                            "ISampler2DMs",
++                            "ISamplerBuffer",
++                            "ISampler1DArray",
++                            "ISampler2DArray",
++                            "ISampler2DMsArray",
++                            "ISamplerCubeArray",
++                            "USampler1D",
++                            "USampler2D",
++                            "USampler3D",
++                            "USamplerCube",
++                            "USampler2DRect",
++                            "USampler2DMs",
++                            "USamplerBuffer",
++                            "USampler1DArray",
++                            "USampler2DArray",
++                            "USampler2DMsArray",
++                            "USamplerCubeArray"
++                        ]
++                    }
++                ],
++                "namespace": true,
++                "qualifiedClassName": "QShaderLanguage"
++            }
++        ],
++        "inputFile": "qshaderlanguage_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStandardItemModel",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sortRole",
++                        "read": "sortRole",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setSortRole"
++                    }
++                ],
++                "qualifiedClassName": "QStandardItemModel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QStandardItem*"
++                            }
++                        ],
++                        "name": "itemChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "topLeft",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "bottomRight",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstandarditemmodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPMCache",
++                "object": true,
++                "qualifiedClassName": "QPMCache",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QCache<QPixmapCache::Key,QPixmapCacheEntry>"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpixmapcache.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QOpenUrlHandlerRegistry",
++                "object": true,
++                "qualifiedClassName": "QOpenUrlHandlerRegistry",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "handler",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "handlerDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdesktopservices.cpp",
++        "outputRevision": 67
++    }
++]
+diff --git a/src/widgets/.tracegen/qtwidgets_tracepoints_p.h b/src/widgets/.tracegen/qtwidgets_tracepoints_p.h
+new file mode 100644
+index 0000000000..ff8d10144f
+--- /dev/null
++++ b/src/widgets/.tracegen/qtwidgets_tracepoints_p.h
+@@ -0,0 +1 @@
++#include <private/qtrace_p.h>
+diff --git a/src/widgets/qt5widgets_metatypes.json b/src/widgets/qt5widgets_metatypes.json
+new file mode 100644
+index 0000000000..8d89ef21bd
+--- /dev/null
++++ b/src/widgets/qt5widgets_metatypes.json
+@@ -0,0 +1,24947 @@
++[
++    {
++        "classes": [
++            {
++                "className": "QAction",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "MenuRole",
++                        "values": [
++                            "NoRole",
++                            "TextHeuristicRole",
++                            "ApplicationSpecificRole",
++                            "AboutQtRole",
++                            "AboutRole",
++                            "PreferencesRole",
++                            "QuitRole"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Priority",
++                        "values": [
++                            "LowPriority",
++                            "NormalPriority",
++                            "HighPriority"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "checkable",
++                        "notify": "changed",
++                        "read": "isCheckable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setCheckable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "checked",
++                        "notify": "toggled",
++                        "read": "isChecked",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setChecked"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "enabled",
++                        "notify": "changed",
++                        "read": "isEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "icon",
++                        "notify": "changed",
++                        "read": "icon",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QIcon",
++                        "user": false,
++                        "write": "setIcon"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "text",
++                        "notify": "changed",
++                        "read": "text",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconText",
++                        "notify": "changed",
++                        "read": "iconText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setIconText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "toolTip",
++                        "notify": "changed",
++                        "read": "toolTip",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setToolTip"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "statusTip",
++                        "notify": "changed",
++                        "read": "statusTip",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setStatusTip"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "whatsThis",
++                        "notify": "changed",
++                        "read": "whatsThis",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setWhatsThis"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "font",
++                        "notify": "changed",
++                        "read": "font",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QFont",
++                        "user": false,
++                        "write": "setFont"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "shortcut",
++                        "notify": "changed",
++                        "read": "shortcut",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QKeySequence",
++                        "user": false,
++                        "write": "setShortcut"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "shortcutContext",
++                        "notify": "changed",
++                        "read": "shortcutContext",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ShortcutContext",
++                        "user": false,
++                        "write": "setShortcutContext"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoRepeat",
++                        "notify": "changed",
++                        "read": "autoRepeat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoRepeat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "visible",
++                        "notify": "changed",
++                        "read": "isVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "menuRole",
++                        "notify": "changed",
++                        "read": "menuRole",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "MenuRole",
++                        "user": false,
++                        "write": "setMenuRole"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconVisibleInMenu",
++                        "notify": "changed",
++                        "read": "isIconVisibleInMenu",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setIconVisibleInMenu"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "shortcutVisibleInContextMenu",
++                        "notify": "changed",
++                        "read": "isShortcutVisibleInContextMenu",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setShortcutVisibleInContextMenu"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "priority",
++                        "read": "priority",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Priority",
++                        "user": false,
++                        "write": "setPriority"
++                    }
++                ],
++                "qualifiedClassName": "QAction",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "changed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "checked",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "triggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "triggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "hovered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "toggled",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "trigger",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "hover",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setChecked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "toggle",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setEnabled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setDisabled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setVisible",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qaction.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QActionGroup",
++                "enums": [
++                    {
++                        "isClass": true,
++                        "isFlag": false,
++                        "name": "ExclusionPolicy",
++                        "values": [
++                            "None",
++                            "Exclusive",
++                            "ExclusiveOptional"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "exclusionPolicy",
++                        "read": "exclusionPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QActionGroup::ExclusionPolicy",
++                        "user": false,
++                        "write": "setExclusionPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "enabled",
++                        "read": "isEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "visible",
++                        "read": "isVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setVisible"
++                    }
++                ],
++                "qualifiedClassName": "QActionGroup",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "triggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "hovered",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setEnabled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setDisabled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setExclusive",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "policy",
++                                "type": "ExclusionPolicy"
++                            }
++                        ],
++                        "name": "setExclusionPolicy",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_actionTriggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_actionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_actionHovered",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qactiongroup.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QApplication",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowIcon",
++                        "read": "windowIcon",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QIcon",
++                        "user": false,
++                        "write": "setWindowIcon"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursorFlashTime",
++                        "read": "cursorFlashTime",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCursorFlashTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "doubleClickInterval",
++                        "read": "doubleClickInterval",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDoubleClickInterval"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "keyboardInputInterval",
++                        "read": "keyboardInputInterval",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setKeyboardInputInterval"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wheelScrollLines",
++                        "read": "wheelScrollLines",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setWheelScrollLines"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "globalStrut",
++                        "read": "globalStrut",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setGlobalStrut"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "startDragTime",
++                        "read": "startDragTime",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setStartDragTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "startDragDistance",
++                        "read": "startDragDistance",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setStartDragDistance"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "styleSheet",
++                        "read": "styleSheet",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setStyleSheet"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoSipEnabled",
++                        "read": "autoSipEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoSipEnabled"
++                    }
++                ],
++                "qualifiedClassName": "QApplication",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "old",
++                                "type": "QWidget*"
++                            },
++                            {
++                                "name": "now",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "focusChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "sheet",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setStyleSheet",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "enabled",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setAutoSipEnabled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "autoSipEnabled",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "name": "closeAllWindows",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "aboutQt",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGuiApplication"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qapplication.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWidgetRepaintManager",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "UpdateTime",
++                        "values": [
++                            "UpdateNow",
++                            "UpdateLater"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "BufferState",
++                        "values": [
++                            "BufferValid",
++                            "BufferInvalid"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QWidgetRepaintManager"
++            }
++        ],
++        "inputFile": "qwidgetrepaintmanager_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QBoxLayout",
++                "object": true,
++                "qualifiedClassName": "QBoxLayout",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QLayout"
++                    }
++                ]
++            },
++            {
++                "className": "QHBoxLayout",
++                "object": true,
++                "qualifiedClassName": "QHBoxLayout",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QBoxLayout"
++                    }
++                ]
++            },
++            {
++                "className": "QVBoxLayout",
++                "object": true,
++                "qualifiedClassName": "QVBoxLayout",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QBoxLayout"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qboxlayout.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDesktopWidget",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "virtualDesktop",
++                        "read": "isVirtualDesktop",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "screenCount",
++                        "notify": "screenCountChanged",
++                        "read": "screenCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "primaryScreen",
++                        "notify": "primaryScreenChanged",
++                        "read": "primaryScreen",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QDesktopWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "resized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "workAreaResized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "screenCountChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "primaryScreenChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_updateScreens",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_availableGeometryChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdesktopwidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGridLayout",
++                "object": true,
++                "qualifiedClassName": "QGridLayout",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QLayout"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgridlayout.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QLayout",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SizeConstraint",
++                        "values": [
++                            "SetDefaultConstraint",
++                            "SetNoConstraint",
++                            "SetMinimumSize",
++                            "SetFixedSize",
++                            "SetMaximumSize",
++                            "SetMinAndMaxSize"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "margin",
++                        "read": "margin",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMargin"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "spacing",
++                        "read": "spacing",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setSpacing"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizeConstraint",
++                        "read": "sizeConstraint",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "SizeConstraint",
++                        "user": false,
++                        "write": "setSizeConstraint"
++                    }
++                ],
++                "qualifiedClassName": "QLayout",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QLayoutItem"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlayout.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QShortcut",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "key",
++                        "read": "key",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QKeySequence",
++                        "user": false,
++                        "write": "setKey"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "whatsThis",
++                        "read": "whatsThis",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setWhatsThis"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "enabled",
++                        "read": "isEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoRepeat",
++                        "read": "autoRepeat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoRepeat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "context",
++                        "read": "context",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ShortcutContext",
++                        "user": false,
++                        "write": "setContext"
++                    }
++                ],
++                "qualifiedClassName": "QShortcut",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "activatedAmbiguously",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qshortcut.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSizePolicy",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Policy",
++                        "values": [
++                            "Fixed",
++                            "Minimum",
++                            "Maximum",
++                            "Preferred",
++                            "MinimumExpanding",
++                            "Expanding",
++                            "Ignored"
++                        ]
++                    },
++                    {
++                        "alias": "ControlType",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "ControlTypes",
++                        "values": [
++                            "DefaultType",
++                            "ButtonBox",
++                            "CheckBox",
++                            "ComboBox",
++                            "Frame",
++                            "GroupBox",
++                            "Label",
++                            "Line",
++                            "LineEdit",
++                            "PushButton",
++                            "RadioButton",
++                            "Slider",
++                            "SpinBox",
++                            "TabWidget",
++                            "ToolButton"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QSizePolicy"
++            }
++        ],
++        "inputFile": "qsizepolicy.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStackedLayout",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StackingMode",
++                        "values": [
++                            "StackOne",
++                            "StackAll"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentIndex",
++                        "notify": "currentChanged",
++                        "read": "currentIndex",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentIndex"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "stackingMode",
++                        "read": "stackingMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "StackingMode",
++                        "user": false,
++                        "write": "setStackingMode"
++                    }
++                ],
++                "qualifiedClassName": "QStackedLayout",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "widgetRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "w",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "setCurrentWidget",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QLayout"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstackedlayout.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWidget",
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rectangle",
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "grab",
++                        "returnType": "QPixmap"
++                    },
++                    {
++                        "access": "public",
++                        "name": "grab",
++                        "returnType": "QPixmap"
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "modal",
++                        "read": "isModal",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowModality",
++                        "read": "windowModality",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::WindowModality",
++                        "user": false,
++                        "write": "setWindowModality"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "enabled",
++                        "read": "isEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "geometry",
++                        "read": "geometry",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false,
++                        "write": "setGeometry"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "frameGeometry",
++                        "read": "frameGeometry",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "normalGeometry",
++                        "read": "normalGeometry",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "x",
++                        "read": "x",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "y",
++                        "read": "y",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "pos",
++                        "read": "pos",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "QPoint",
++                        "user": false,
++                        "write": "move"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "frameSize",
++                        "read": "frameSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "size",
++                        "read": "size",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "resize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "width",
++                        "read": "width",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "height",
++                        "read": "height",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "rect",
++                        "read": "rect",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "childrenRect",
++                        "read": "childrenRect",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "childrenRegion",
++                        "read": "childrenRegion",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRegion",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizePolicy",
++                        "read": "sizePolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizePolicy",
++                        "user": false,
++                        "write": "setSizePolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumSize",
++                        "read": "minimumSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setMinimumSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumSize",
++                        "read": "maximumSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setMaximumSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "minimumWidth",
++                        "read": "minimumWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimumWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "minimumHeight",
++                        "read": "minimumHeight",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimumHeight"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "maximumWidth",
++                        "read": "maximumWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximumWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "maximumHeight",
++                        "read": "maximumHeight",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximumHeight"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizeIncrement",
++                        "read": "sizeIncrement",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setSizeIncrement"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "baseSize",
++                        "read": "baseSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setBaseSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "palette",
++                        "read": "palette",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPalette",
++                        "user": false,
++                        "write": "setPalette"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "font",
++                        "read": "font",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QFont",
++                        "user": false,
++                        "write": "setFont"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursor",
++                        "read": "cursor",
++                        "required": false,
++                        "reset": "unsetCursor()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QCursor",
++                        "user": false,
++                        "write": "setCursor"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "mouseTracking",
++                        "read": "hasMouseTracking",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setMouseTracking"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabletTracking",
++                        "read": "hasTabletTracking",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTabletTracking"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "isActiveWindow",
++                        "read": "isActiveWindow",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "focusPolicy",
++                        "read": "focusPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::FocusPolicy",
++                        "user": false,
++                        "write": "setFocusPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "focus",
++                        "read": "hasFocus",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "contextMenuPolicy",
++                        "read": "contextMenuPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ContextMenuPolicy",
++                        "user": false,
++                        "write": "setContextMenuPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "updatesEnabled",
++                        "read": "updatesEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUpdatesEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "visible",
++                        "read": "isVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimized",
++                        "read": "isMinimized",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximized",
++                        "read": "isMaximized",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "fullScreen",
++                        "read": "isFullScreen",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizeHint",
++                        "read": "sizeHint",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumSizeHint",
++                        "read": "minimumSizeHint",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "acceptDrops",
++                        "read": "acceptDrops",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAcceptDrops"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowTitle",
++                        "notify": "windowTitleChanged",
++                        "read": "windowTitle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setWindowTitle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowIcon",
++                        "notify": "windowIconChanged",
++                        "read": "windowIcon",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QIcon",
++                        "user": false,
++                        "write": "setWindowIcon"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowIconText",
++                        "notify": "windowIconTextChanged",
++                        "read": "windowIconText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setWindowIconText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowOpacity",
++                        "read": "windowOpacity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "double",
++                        "user": false,
++                        "write": "setWindowOpacity"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowModified",
++                        "read": "isWindowModified",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWindowModified"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "toolTip",
++                        "read": "toolTip",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setToolTip"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "toolTipDuration",
++                        "read": "toolTipDuration",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setToolTipDuration"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "statusTip",
++                        "read": "statusTip",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setStatusTip"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "whatsThis",
++                        "read": "whatsThis",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setWhatsThis"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "accessibleName",
++                        "read": "accessibleName",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setAccessibleName"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "accessibleDescription",
++                        "read": "accessibleDescription",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setAccessibleDescription"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "layoutDirection",
++                        "read": "layoutDirection",
++                        "required": false,
++                        "reset": "unsetLayoutDirection()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::LayoutDirection",
++                        "user": false,
++                        "write": "setLayoutDirection"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoFillBackground",
++                        "read": "autoFillBackground",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoFillBackground"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "styleSheet",
++                        "read": "styleSheet",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setStyleSheet"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "locale",
++                        "read": "locale",
++                        "required": false,
++                        "reset": "unsetLocale()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QLocale",
++                        "user": false,
++                        "write": "setLocale"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowFilePath",
++                        "read": "windowFilePath",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setWindowFilePath"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "inputMethodHints",
++                        "read": "inputMethodHints",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::InputMethodHints",
++                        "user": false,
++                        "write": "setInputMethodHints"
++                    }
++                ],
++                "qualifiedClassName": "QWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "title",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "windowTitleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "icon",
++                                "type": "QIcon"
++                            }
++                        ],
++                        "name": "windowIconChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "iconText",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "windowIconTextChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pos",
++                                "type": "QPoint"
++                            }
++                        ],
++                        "name": "customContextMenuRequested",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setEnabled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setDisabled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setWindowModified",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setWindowTitle",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "styleSheet",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setStyleSheet",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "setFocus",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "update",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "repaint",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visible",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "hidden",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setHidden",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "show",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "hide",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showMinimized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showMaximized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showFullScreen",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showNormal",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "close",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "name": "raise",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "lower",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "name": "updateMicroFocus",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_showIfNotHidden",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QPaintDevice"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWidgetPrivate",
++                "enums": [
++                    {
++                        "alias": "DrawWidgetFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "DrawWidgetFlags",
++                        "values": [
++                            "DrawAsRoot",
++                            "DrawPaintOnScreen",
++                            "DrawRecursive",
++                            "DrawInvisible",
++                            "DontSubtractOpaqueChildren",
++                            "DontDrawOpaqueChildren",
++                            "DontDrawNativeChildren",
++                            "DontSetCompositionMode"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "CloseMode",
++                        "values": [
++                            "CloseNoEvent",
++                            "CloseWithEvent",
++                            "CloseWithSpontaneousEvent"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Direction",
++                        "values": [
++                            "DirectionNorth",
++                            "DirectionEast",
++                            "DirectionSouth",
++                            "DirectionWest"
++                        ]
++                    }
++                ],
++                "gadget": true,
++                "qualifiedClassName": "QWidgetPrivate",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObjectPrivate"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwidget_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWidgetAction",
++                "object": true,
++                "qualifiedClassName": "QWidgetAction",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "_q_widgetDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAction"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwidgetaction.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGesture",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "state",
++                        "read": "state",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::GestureState",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "gestureType",
++                        "read": "gestureType",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::GestureType",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "gestureCancelPolicy",
++                        "read": "gestureCancelPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QGesture::GestureCancelPolicy",
++                        "user": false,
++                        "write": "setGestureCancelPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "hotSpot",
++                        "read": "hotSpot",
++                        "required": false,
++                        "reset": "unsetHotSpot()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setHotSpot"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "hasHotSpot",
++                        "read": "hasHotSpot",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QGesture",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QPanGesture",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "lastOffset",
++                        "read": "lastOffset",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setLastOffset"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "offset",
++                        "read": "offset",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setOffset"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "delta",
++                        "read": "delta",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "QPointF",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "acceleration",
++                        "read": "acceleration",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setAcceleration"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "horizontalVelocity",
++                        "privateClass": "QPanGesture::d_func()",
++                        "read": "horizontalVelocity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setHorizontalVelocity"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "verticalVelocity",
++                        "privateClass": "QPanGesture::d_func()",
++                        "read": "verticalVelocity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setVerticalVelocity"
++                    }
++                ],
++                "qualifiedClassName": "QPanGesture",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGesture"
++                    }
++                ]
++            },
++            {
++                "className": "QPinchGesture",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "ChangeFlag",
++                        "values": [
++                            "ScaleFactorChanged",
++                            "RotationAngleChanged",
++                            "CenterPointChanged"
++                        ]
++                    },
++                    {
++                        "alias": "ChangeFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "ChangeFlags",
++                        "values": [
++                            "ScaleFactorChanged",
++                            "RotationAngleChanged",
++                            "CenterPointChanged"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "totalChangeFlags",
++                        "read": "totalChangeFlags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ChangeFlags",
++                        "user": false,
++                        "write": "setTotalChangeFlags"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "changeFlags",
++                        "read": "changeFlags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ChangeFlags",
++                        "user": false,
++                        "write": "setChangeFlags"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "totalScaleFactor",
++                        "read": "totalScaleFactor",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setTotalScaleFactor"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "lastScaleFactor",
++                        "read": "lastScaleFactor",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setLastScaleFactor"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "scaleFactor",
++                        "read": "scaleFactor",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setScaleFactor"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "totalRotationAngle",
++                        "read": "totalRotationAngle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setTotalRotationAngle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "lastRotationAngle",
++                        "read": "lastRotationAngle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setLastRotationAngle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "rotationAngle",
++                        "read": "rotationAngle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setRotationAngle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "startCenterPoint",
++                        "read": "startCenterPoint",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setStartCenterPoint"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "lastCenterPoint",
++                        "read": "lastCenterPoint",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setLastCenterPoint"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "centerPoint",
++                        "read": "centerPoint",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setCenterPoint"
++                    }
++                ],
++                "qualifiedClassName": "QPinchGesture",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGesture"
++                    }
++                ]
++            },
++            {
++                "className": "QSwipeGesture",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SwipeDirection",
++                        "values": [
++                            "NoDirection",
++                            "Left",
++                            "Right",
++                            "Up",
++                            "Down"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "horizontalDirection",
++                        "read": "horizontalDirection",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "SwipeDirection",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "verticalDirection",
++                        "read": "verticalDirection",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": false,
++                        "type": "SwipeDirection",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "swipeAngle",
++                        "read": "swipeAngle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setSwipeAngle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "velocity",
++                        "privateClass": "QSwipeGesture::d_func()",
++                        "read": "velocity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setVelocity"
++                    }
++                ],
++                "qualifiedClassName": "QSwipeGesture",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGesture"
++                    }
++                ]
++            },
++            {
++                "className": "QTapGesture",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "position",
++                        "read": "position",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setPosition"
++                    }
++                ],
++                "qualifiedClassName": "QTapGesture",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGesture"
++                    }
++                ]
++            },
++            {
++                "className": "QTapAndHoldGesture",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "position",
++                        "read": "position",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setPosition"
++                    }
++                ],
++                "qualifiedClassName": "QTapAndHoldGesture",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGesture"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgesture.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGestureManager",
++                "object": true,
++                "qualifiedClassName": "QGestureManager",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgesturemanager_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDesktopScreenWidget",
++                "object": true,
++                "qualifiedClassName": "QDesktopScreenWidget",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdesktopwidget_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWidgetWindow",
++                "object": true,
++                "qualifiedClassName": "QWidgetWindow",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "updateObjectName",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "handleScreenChange",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWindow"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwidgetwindow_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWindowContainer",
++                "object": true,
++                "qualifiedClassName": "QWindowContainer",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "focusWindow",
++                                "type": "QWindow*"
++                            }
++                        ],
++                        "name": "focusWindowChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwindowcontainer_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFormLayout",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "FieldGrowthPolicy",
++                        "values": [
++                            "FieldsStayAtSizeHint",
++                            "ExpandingFieldsGrow",
++                            "AllNonFixedFieldsGrow"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "RowWrapPolicy",
++                        "values": [
++                            "DontWrapRows",
++                            "WrapLongRows",
++                            "WrapAllRows"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ItemRole",
++                        "values": [
++                            "LabelRole",
++                            "FieldRole",
++                            "SpanningRole"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "fieldGrowthPolicy",
++                        "read": "fieldGrowthPolicy",
++                        "required": false,
++                        "reset": "resetFieldGrowthPolicy()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "FieldGrowthPolicy",
++                        "user": false,
++                        "write": "setFieldGrowthPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "rowWrapPolicy",
++                        "read": "rowWrapPolicy",
++                        "required": false,
++                        "reset": "resetRowWrapPolicy()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "RowWrapPolicy",
++                        "user": false,
++                        "write": "setRowWrapPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "labelAlignment",
++                        "read": "labelAlignment",
++                        "required": false,
++                        "reset": "resetLabelAlignment()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setLabelAlignment"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "formAlignment",
++                        "read": "formAlignment",
++                        "required": false,
++                        "reset": "resetFormAlignment()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setFormAlignment"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "horizontalSpacing",
++                        "read": "horizontalSpacing",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setHorizontalSpacing"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "verticalSpacing",
++                        "read": "verticalSpacing",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setVerticalSpacing"
++                    }
++                ],
++                "qualifiedClassName": "QFormLayout",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QLayout"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qformlayout.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStyle",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StateFlag",
++                        "values": [
++                            "State_None",
++                            "State_Enabled",
++                            "State_Raised",
++                            "State_Sunken",
++                            "State_Off",
++                            "State_NoChange",
++                            "State_On",
++                            "State_DownArrow",
++                            "State_Horizontal",
++                            "State_HasFocus",
++                            "State_Top",
++                            "State_Bottom",
++                            "State_FocusAtBorder",
++                            "State_AutoRaise",
++                            "State_MouseOver",
++                            "State_UpArrow",
++                            "State_Selected",
++                            "State_Active",
++                            "State_Window",
++                            "State_Open",
++                            "State_Children",
++                            "State_Item",
++                            "State_Sibling",
++                            "State_Editing",
++                            "State_KeyboardFocusChange",
++                            "State_ReadOnly",
++                            "State_Small",
++                            "State_Mini"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "PrimitiveElement",
++                        "values": [
++                            "PE_Frame",
++                            "PE_FrameDefaultButton",
++                            "PE_FrameDockWidget",
++                            "PE_FrameFocusRect",
++                            "PE_FrameGroupBox",
++                            "PE_FrameLineEdit",
++                            "PE_FrameMenu",
++                            "PE_FrameStatusBarItem",
++                            "PE_FrameStatusBar",
++                            "PE_FrameTabWidget",
++                            "PE_FrameWindow",
++                            "PE_FrameButtonBevel",
++                            "PE_FrameButtonTool",
++                            "PE_FrameTabBarBase",
++                            "PE_PanelButtonCommand",
++                            "PE_PanelButtonBevel",
++                            "PE_PanelButtonTool",
++                            "PE_PanelMenuBar",
++                            "PE_PanelToolBar",
++                            "PE_PanelLineEdit",
++                            "PE_IndicatorArrowDown",
++                            "PE_IndicatorArrowLeft",
++                            "PE_IndicatorArrowRight",
++                            "PE_IndicatorArrowUp",
++                            "PE_IndicatorBranch",
++                            "PE_IndicatorButtonDropDown",
++                            "PE_IndicatorItemViewItemCheck",
++                            "PE_IndicatorViewItemCheck",
++                            "PE_IndicatorCheckBox",
++                            "PE_IndicatorDockWidgetResizeHandle",
++                            "PE_IndicatorHeaderArrow",
++                            "PE_IndicatorMenuCheckMark",
++                            "PE_IndicatorProgressChunk",
++                            "PE_IndicatorRadioButton",
++                            "PE_IndicatorSpinDown",
++                            "PE_IndicatorSpinMinus",
++                            "PE_IndicatorSpinPlus",
++                            "PE_IndicatorSpinUp",
++                            "PE_IndicatorToolBarHandle",
++                            "PE_IndicatorToolBarSeparator",
++                            "PE_PanelTipLabel",
++                            "PE_IndicatorTabTear",
++                            "PE_IndicatorTabTearLeft",
++                            "PE_PanelScrollAreaCorner",
++                            "PE_Widget",
++                            "PE_IndicatorColumnViewArrow",
++                            "PE_IndicatorItemViewItemDrop",
++                            "PE_PanelItemViewItem",
++                            "PE_PanelItemViewRow",
++                            "PE_PanelStatusBar",
++                            "PE_IndicatorTabClose",
++                            "PE_PanelMenu",
++                            "PE_IndicatorTabTearRight",
++                            "PE_CustomBase"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ControlElement",
++                        "values": [
++                            "CE_PushButton",
++                            "CE_PushButtonBevel",
++                            "CE_PushButtonLabel",
++                            "CE_CheckBox",
++                            "CE_CheckBoxLabel",
++                            "CE_RadioButton",
++                            "CE_RadioButtonLabel",
++                            "CE_TabBarTab",
++                            "CE_TabBarTabShape",
++                            "CE_TabBarTabLabel",
++                            "CE_ProgressBar",
++                            "CE_ProgressBarGroove",
++                            "CE_ProgressBarContents",
++                            "CE_ProgressBarLabel",
++                            "CE_MenuItem",
++                            "CE_MenuScroller",
++                            "CE_MenuVMargin",
++                            "CE_MenuHMargin",
++                            "CE_MenuTearoff",
++                            "CE_MenuEmptyArea",
++                            "CE_MenuBarItem",
++                            "CE_MenuBarEmptyArea",
++                            "CE_ToolButtonLabel",
++                            "CE_Header",
++                            "CE_HeaderSection",
++                            "CE_HeaderLabel",
++                            "CE_ToolBoxTab",
++                            "CE_SizeGrip",
++                            "CE_Splitter",
++                            "CE_RubberBand",
++                            "CE_DockWidgetTitle",
++                            "CE_ScrollBarAddLine",
++                            "CE_ScrollBarSubLine",
++                            "CE_ScrollBarAddPage",
++                            "CE_ScrollBarSubPage",
++                            "CE_ScrollBarSlider",
++                            "CE_ScrollBarFirst",
++                            "CE_ScrollBarLast",
++                            "CE_FocusFrame",
++                            "CE_ComboBoxLabel",
++                            "CE_ToolBar",
++                            "CE_ToolBoxTabShape",
++                            "CE_ToolBoxTabLabel",
++                            "CE_HeaderEmptyArea",
++                            "CE_ColumnViewGrip",
++                            "CE_ItemViewItem",
++                            "CE_ShapedFrame",
++                            "CE_CustomBase"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SubElement",
++                        "values": [
++                            "SE_PushButtonContents",
++                            "SE_PushButtonFocusRect",
++                            "SE_CheckBoxIndicator",
++                            "SE_CheckBoxContents",
++                            "SE_CheckBoxFocusRect",
++                            "SE_CheckBoxClickRect",
++                            "SE_RadioButtonIndicator",
++                            "SE_RadioButtonContents",
++                            "SE_RadioButtonFocusRect",
++                            "SE_RadioButtonClickRect",
++                            "SE_ComboBoxFocusRect",
++                            "SE_SliderFocusRect",
++                            "SE_ProgressBarGroove",
++                            "SE_ProgressBarContents",
++                            "SE_ProgressBarLabel",
++                            "SE_ToolBoxTabContents",
++                            "SE_HeaderLabel",
++                            "SE_HeaderArrow",
++                            "SE_TabWidgetTabBar",
++                            "SE_TabWidgetTabPane",
++                            "SE_TabWidgetTabContents",
++                            "SE_TabWidgetLeftCorner",
++                            "SE_TabWidgetRightCorner",
++                            "SE_ItemViewItemCheckIndicator",
++                            "SE_ViewItemCheckIndicator",
++                            "SE_TabBarTearIndicator",
++                            "SE_TabBarTearIndicatorLeft",
++                            "SE_TreeViewDisclosureItem",
++                            "SE_LineEditContents",
++                            "SE_FrameContents",
++                            "SE_DockWidgetCloseButton",
++                            "SE_DockWidgetFloatButton",
++                            "SE_DockWidgetTitleBarText",
++                            "SE_DockWidgetIcon",
++                            "SE_CheckBoxLayoutItem",
++                            "SE_ComboBoxLayoutItem",
++                            "SE_DateTimeEditLayoutItem",
++                            "SE_DialogButtonBoxLayoutItem",
++                            "SE_LabelLayoutItem",
++                            "SE_ProgressBarLayoutItem",
++                            "SE_PushButtonLayoutItem",
++                            "SE_RadioButtonLayoutItem",
++                            "SE_SliderLayoutItem",
++                            "SE_SpinBoxLayoutItem",
++                            "SE_ToolButtonLayoutItem",
++                            "SE_FrameLayoutItem",
++                            "SE_GroupBoxLayoutItem",
++                            "SE_TabWidgetLayoutItem",
++                            "SE_ItemViewItemDecoration",
++                            "SE_ItemViewItemText",
++                            "SE_ItemViewItemFocusRect",
++                            "SE_TabBarTabLeftButton",
++                            "SE_TabBarTabRightButton",
++                            "SE_TabBarTabText",
++                            "SE_ShapedFrameContents",
++                            "SE_ToolBarHandle",
++                            "SE_TabBarScrollLeftButton",
++                            "SE_TabBarScrollRightButton",
++                            "SE_TabBarTearIndicatorRight",
++                            "SE_PushButtonBevel",
++                            "SE_CustomBase"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ComplexControl",
++                        "values": [
++                            "CC_SpinBox",
++                            "CC_ComboBox",
++                            "CC_ScrollBar",
++                            "CC_Slider",
++                            "CC_ToolButton",
++                            "CC_TitleBar",
++                            "CC_Dial",
++                            "CC_GroupBox",
++                            "CC_MdiControls",
++                            "CC_CustomBase"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SubControl",
++                        "values": [
++                            "SC_None",
++                            "SC_ScrollBarAddLine",
++                            "SC_ScrollBarSubLine",
++                            "SC_ScrollBarAddPage",
++                            "SC_ScrollBarSubPage",
++                            "SC_ScrollBarFirst",
++                            "SC_ScrollBarLast",
++                            "SC_ScrollBarSlider",
++                            "SC_ScrollBarGroove",
++                            "SC_SpinBoxUp",
++                            "SC_SpinBoxDown",
++                            "SC_SpinBoxFrame",
++                            "SC_SpinBoxEditField",
++                            "SC_ComboBoxFrame",
++                            "SC_ComboBoxEditField",
++                            "SC_ComboBoxArrow",
++                            "SC_ComboBoxListBoxPopup",
++                            "SC_SliderGroove",
++                            "SC_SliderHandle",
++                            "SC_SliderTickmarks",
++                            "SC_ToolButton",
++                            "SC_ToolButtonMenu",
++                            "SC_TitleBarSysMenu",
++                            "SC_TitleBarMinButton",
++                            "SC_TitleBarMaxButton",
++                            "SC_TitleBarCloseButton",
++                            "SC_TitleBarNormalButton",
++                            "SC_TitleBarShadeButton",
++                            "SC_TitleBarUnshadeButton",
++                            "SC_TitleBarContextHelpButton",
++                            "SC_TitleBarLabel",
++                            "SC_DialGroove",
++                            "SC_DialHandle",
++                            "SC_DialTickmarks",
++                            "SC_GroupBoxCheckBox",
++                            "SC_GroupBoxLabel",
++                            "SC_GroupBoxContents",
++                            "SC_GroupBoxFrame",
++                            "SC_MdiMinButton",
++                            "SC_MdiNormalButton",
++                            "SC_MdiCloseButton",
++                            "SC_CustomBase",
++                            "SC_All"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "PixelMetric",
++                        "values": [
++                            "PM_ButtonMargin",
++                            "PM_ButtonDefaultIndicator",
++                            "PM_MenuButtonIndicator",
++                            "PM_ButtonShiftHorizontal",
++                            "PM_ButtonShiftVertical",
++                            "PM_DefaultFrameWidth",
++                            "PM_SpinBoxFrameWidth",
++                            "PM_ComboBoxFrameWidth",
++                            "PM_MaximumDragDistance",
++                            "PM_ScrollBarExtent",
++                            "PM_ScrollBarSliderMin",
++                            "PM_SliderThickness",
++                            "PM_SliderControlThickness",
++                            "PM_SliderLength",
++                            "PM_SliderTickmarkOffset",
++                            "PM_SliderSpaceAvailable",
++                            "PM_DockWidgetSeparatorExtent",
++                            "PM_DockWidgetHandleExtent",
++                            "PM_DockWidgetFrameWidth",
++                            "PM_TabBarTabOverlap",
++                            "PM_TabBarTabHSpace",
++                            "PM_TabBarTabVSpace",
++                            "PM_TabBarBaseHeight",
++                            "PM_TabBarBaseOverlap",
++                            "PM_ProgressBarChunkWidth",
++                            "PM_SplitterWidth",
++                            "PM_TitleBarHeight",
++                            "PM_MenuScrollerHeight",
++                            "PM_MenuHMargin",
++                            "PM_MenuVMargin",
++                            "PM_MenuPanelWidth",
++                            "PM_MenuTearoffHeight",
++                            "PM_MenuDesktopFrameWidth",
++                            "PM_MenuBarPanelWidth",
++                            "PM_MenuBarItemSpacing",
++                            "PM_MenuBarVMargin",
++                            "PM_MenuBarHMargin",
++                            "PM_IndicatorWidth",
++                            "PM_IndicatorHeight",
++                            "PM_ExclusiveIndicatorWidth",
++                            "PM_ExclusiveIndicatorHeight",
++                            "PM_DialogButtonsSeparator",
++                            "PM_DialogButtonsButtonWidth",
++                            "PM_DialogButtonsButtonHeight",
++                            "PM_MdiSubWindowFrameWidth",
++                            "PM_MdiSubWindowMinimizedWidth",
++                            "PM_MDIFrameWidth",
++                            "PM_MDIMinimizedWidth",
++                            "PM_HeaderMargin",
++                            "PM_HeaderMarkSize",
++                            "PM_HeaderGripMargin",
++                            "PM_TabBarTabShiftHorizontal",
++                            "PM_TabBarTabShiftVertical",
++                            "PM_TabBarScrollButtonWidth",
++                            "PM_ToolBarFrameWidth",
++                            "PM_ToolBarHandleExtent",
++                            "PM_ToolBarItemSpacing",
++                            "PM_ToolBarItemMargin",
++                            "PM_ToolBarSeparatorExtent",
++                            "PM_ToolBarExtensionExtent",
++                            "PM_SpinBoxSliderHeight",
++                            "PM_DefaultTopLevelMargin",
++                            "PM_DefaultChildMargin",
++                            "PM_DefaultLayoutSpacing",
++                            "PM_ToolBarIconSize",
++                            "PM_ListViewIconSize",
++                            "PM_IconViewIconSize",
++                            "PM_SmallIconSize",
++                            "PM_LargeIconSize",
++                            "PM_FocusFrameVMargin",
++                            "PM_FocusFrameHMargin",
++                            "PM_ToolTipLabelFrameWidth",
++                            "PM_CheckBoxLabelSpacing",
++                            "PM_TabBarIconSize",
++                            "PM_SizeGripSize",
++                            "PM_DockWidgetTitleMargin",
++                            "PM_MessageBoxIconSize",
++                            "PM_ButtonIconSize",
++                            "PM_DockWidgetTitleBarButtonMargin",
++                            "PM_RadioButtonLabelSpacing",
++                            "PM_LayoutLeftMargin",
++                            "PM_LayoutTopMargin",
++                            "PM_LayoutRightMargin",
++                            "PM_LayoutBottomMargin",
++                            "PM_LayoutHorizontalSpacing",
++                            "PM_LayoutVerticalSpacing",
++                            "PM_TabBar_ScrollButtonOverlap",
++                            "PM_TextCursorWidth",
++                            "PM_TabCloseIndicatorWidth",
++                            "PM_TabCloseIndicatorHeight",
++                            "PM_ScrollView_ScrollBarSpacing",
++                            "PM_ScrollView_ScrollBarOverlap",
++                            "PM_SubMenuOverlap",
++                            "PM_TreeViewIndentation",
++                            "PM_HeaderDefaultSectionSizeHorizontal",
++                            "PM_HeaderDefaultSectionSizeVertical",
++                            "PM_TitleBarButtonIconSize",
++                            "PM_TitleBarButtonSize",
++                            "PM_CustomBase"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ContentsType",
++                        "values": [
++                            "CT_PushButton",
++                            "CT_CheckBox",
++                            "CT_RadioButton",
++                            "CT_ToolButton",
++                            "CT_ComboBox",
++                            "CT_Splitter",
++                            "CT_ProgressBar",
++                            "CT_MenuItem",
++                            "CT_MenuBarItem",
++                            "CT_MenuBar",
++                            "CT_Menu",
++                            "CT_TabBarTab",
++                            "CT_Slider",
++                            "CT_ScrollBar",
++                            "CT_LineEdit",
++                            "CT_SpinBox",
++                            "CT_SizeGrip",
++                            "CT_TabWidget",
++                            "CT_DialogButtons",
++                            "CT_HeaderSection",
++                            "CT_GroupBox",
++                            "CT_MdiControls",
++                            "CT_ItemViewItem",
++                            "CT_CustomBase"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "RequestSoftwareInputPanel",
++                        "values": [
++                            "RSIP_OnMouseClickAndAlreadyFocused",
++                            "RSIP_OnMouseClick"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StyleHint",
++                        "values": [
++                            "SH_EtchDisabledText",
++                            "SH_DitherDisabledText",
++                            "SH_ScrollBar_MiddleClickAbsolutePosition",
++                            "SH_ScrollBar_ScrollWhenPointerLeavesControl",
++                            "SH_TabBar_SelectMouseType",
++                            "SH_TabBar_Alignment",
++                            "SH_Header_ArrowAlignment",
++                            "SH_Slider_SnapToValue",
++                            "SH_Slider_SloppyKeyEvents",
++                            "SH_ProgressDialog_CenterCancelButton",
++                            "SH_ProgressDialog_TextLabelAlignment",
++                            "SH_PrintDialog_RightAlignButtons",
++                            "SH_MainWindow_SpaceBelowMenuBar",
++                            "SH_FontDialog_SelectAssociatedText",
++                            "SH_Menu_AllowActiveAndDisabled",
++                            "SH_Menu_SpaceActivatesItem",
++                            "SH_Menu_SubMenuPopupDelay",
++                            "SH_ScrollView_FrameOnlyAroundContents",
++                            "SH_MenuBar_AltKeyNavigation",
++                            "SH_ComboBox_ListMouseTracking",
++                            "SH_Menu_MouseTracking",
++                            "SH_MenuBar_MouseTracking",
++                            "SH_ItemView_ChangeHighlightOnFocus",
++                            "SH_Widget_ShareActivation",
++                            "SH_Workspace_FillSpaceOnMaximize",
++                            "SH_ComboBox_Popup",
++                            "SH_TitleBar_NoBorder",
++                            "SH_Slider_StopMouseOverSlider",
++                            "SH_ScrollBar_StopMouseOverSlider",
++                            "SH_BlinkCursorWhenTextSelected",
++                            "SH_RichText_FullWidthSelection",
++                            "SH_Menu_Scrollable",
++                            "SH_GroupBox_TextLabelVerticalAlignment",
++                            "SH_GroupBox_TextLabelColor",
++                            "SH_Menu_SloppySubMenus",
++                            "SH_Table_GridLineColor",
++                            "SH_LineEdit_PasswordCharacter",
++                            "SH_DialogButtons_DefaultButton",
++                            "SH_ToolBox_SelectedPageTitleBold",
++                            "SH_TabBar_PreferNoArrows",
++                            "SH_ScrollBar_LeftClickAbsolutePosition",
++                            "SH_ListViewExpand_SelectMouseType",
++                            "SH_UnderlineShortcut",
++                            "SH_SpinBox_AnimateButton",
++                            "SH_SpinBox_KeyPressAutoRepeatRate",
++                            "SH_SpinBox_ClickAutoRepeatRate",
++                            "SH_Menu_FillScreenWithScroll",
++                            "SH_ToolTipLabel_Opacity",
++                            "SH_DrawMenuBarSeparator",
++                            "SH_TitleBar_ModifyNotification",
++                            "SH_Button_FocusPolicy",
++                            "SH_MessageBox_UseBorderForButtonSpacing",
++                            "SH_TitleBar_AutoRaise",
++                            "SH_ToolButton_PopupDelay",
++                            "SH_FocusFrame_Mask",
++                            "SH_RubberBand_Mask",
++                            "SH_WindowFrame_Mask",
++                            "SH_SpinControls_DisableOnBounds",
++                            "SH_Dial_BackgroundRole",
++                            "SH_ComboBox_LayoutDirection",
++                            "SH_ItemView_EllipsisLocation",
++                            "SH_ItemView_ShowDecorationSelected",
++                            "SH_ItemView_ActivateItemOnSingleClick",
++                            "SH_ScrollBar_ContextMenu",
++                            "SH_ScrollBar_RollBetweenButtons",
++                            "SH_Slider_AbsoluteSetButtons",
++                            "SH_Slider_PageSetButtons",
++                            "SH_Menu_KeyboardSearch",
++                            "SH_TabBar_ElideMode",
++                            "SH_DialogButtonLayout",
++                            "SH_ComboBox_PopupFrameStyle",
++                            "SH_MessageBox_TextInteractionFlags",
++                            "SH_DialogButtonBox_ButtonsHaveIcons",
++                            "SH_SpellCheckUnderlineStyle",
++                            "SH_MessageBox_CenterButtons",
++                            "SH_Menu_SelectionWrap",
++                            "SH_ItemView_MovementWithoutUpdatingSelection",
++                            "SH_ToolTip_Mask",
++                            "SH_FocusFrame_AboveWidget",
++                            "SH_TextControl_FocusIndicatorTextCharFormat",
++                            "SH_WizardStyle",
++                            "SH_ItemView_ArrowKeysNavigateIntoChildren",
++                            "SH_Menu_Mask",
++                            "SH_Menu_FlashTriggeredItem",
++                            "SH_Menu_FadeOutOnHide",
++                            "SH_SpinBox_ClickAutoRepeatThreshold",
++                            "SH_ItemView_PaintAlternatingRowColorsForEmptyArea",
++                            "SH_FormLayoutWrapPolicy",
++                            "SH_TabWidget_DefaultTabPosition",
++                            "SH_ToolBar_Movable",
++                            "SH_FormLayoutFieldGrowthPolicy",
++                            "SH_FormLayoutFormAlignment",
++                            "SH_FormLayoutLabelAlignment",
++                            "SH_ItemView_DrawDelegateFrame",
++                            "SH_TabBar_CloseButtonPosition",
++                            "SH_DockWidget_ButtonsHaveFrame",
++                            "SH_ToolButtonStyle",
++                            "SH_RequestSoftwareInputPanel",
++                            "SH_ScrollBar_Transient",
++                            "SH_Menu_SupportsSections",
++                            "SH_ToolTip_WakeUpDelay",
++                            "SH_ToolTip_FallAsleepDelay",
++                            "SH_Widget_Animate",
++                            "SH_Splitter_OpaqueResize",
++                            "SH_ComboBox_UseNativePopup",
++                            "SH_LineEdit_PasswordMaskDelay",
++                            "SH_TabBar_ChangeCurrentDelay",
++                            "SH_Menu_SubMenuUniDirection",
++                            "SH_Menu_SubMenuUniDirectionFailCount",
++                            "SH_Menu_SubMenuSloppySelectOtherActions",
++                            "SH_Menu_SubMenuSloppyCloseTimeout",
++                            "SH_Menu_SubMenuResetWhenReenteringParent",
++                            "SH_Menu_SubMenuDontStartSloppyOnLeave",
++                            "SH_ItemView_ScrollMode",
++                            "SH_TitleBar_ShowToolTipsOnButtons",
++                            "SH_Widget_Animation_Duration",
++                            "SH_ComboBox_AllowWheelScrolling",
++                            "SH_SpinBox_ButtonsInsideFrame",
++                            "SH_SpinBox_StepModifier",
++                            "SH_CustomBase"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StandardPixmap",
++                        "values": [
++                            "SP_TitleBarMenuButton",
++                            "SP_TitleBarMinButton",
++                            "SP_TitleBarMaxButton",
++                            "SP_TitleBarCloseButton",
++                            "SP_TitleBarNormalButton",
++                            "SP_TitleBarShadeButton",
++                            "SP_TitleBarUnshadeButton",
++                            "SP_TitleBarContextHelpButton",
++                            "SP_DockWidgetCloseButton",
++                            "SP_MessageBoxInformation",
++                            "SP_MessageBoxWarning",
++                            "SP_MessageBoxCritical",
++                            "SP_MessageBoxQuestion",
++                            "SP_DesktopIcon",
++                            "SP_TrashIcon",
++                            "SP_ComputerIcon",
++                            "SP_DriveFDIcon",
++                            "SP_DriveHDIcon",
++                            "SP_DriveCDIcon",
++                            "SP_DriveDVDIcon",
++                            "SP_DriveNetIcon",
++                            "SP_DirOpenIcon",
++                            "SP_DirClosedIcon",
++                            "SP_DirLinkIcon",
++                            "SP_DirLinkOpenIcon",
++                            "SP_FileIcon",
++                            "SP_FileLinkIcon",
++                            "SP_ToolBarHorizontalExtensionButton",
++                            "SP_ToolBarVerticalExtensionButton",
++                            "SP_FileDialogStart",
++                            "SP_FileDialogEnd",
++                            "SP_FileDialogToParent",
++                            "SP_FileDialogNewFolder",
++                            "SP_FileDialogDetailedView",
++                            "SP_FileDialogInfoView",
++                            "SP_FileDialogContentsView",
++                            "SP_FileDialogListView",
++                            "SP_FileDialogBack",
++                            "SP_DirIcon",
++                            "SP_DialogOkButton",
++                            "SP_DialogCancelButton",
++                            "SP_DialogHelpButton",
++                            "SP_DialogOpenButton",
++                            "SP_DialogSaveButton",
++                            "SP_DialogCloseButton",
++                            "SP_DialogApplyButton",
++                            "SP_DialogResetButton",
++                            "SP_DialogDiscardButton",
++                            "SP_DialogYesButton",
++                            "SP_DialogNoButton",
++                            "SP_ArrowUp",
++                            "SP_ArrowDown",
++                            "SP_ArrowLeft",
++                            "SP_ArrowRight",
++                            "SP_ArrowBack",
++                            "SP_ArrowForward",
++                            "SP_DirHomeIcon",
++                            "SP_CommandLink",
++                            "SP_VistaShield",
++                            "SP_BrowserReload",
++                            "SP_BrowserStop",
++                            "SP_MediaPlay",
++                            "SP_MediaStop",
++                            "SP_MediaPause",
++                            "SP_MediaSkipForward",
++                            "SP_MediaSkipBackward",
++                            "SP_MediaSeekForward",
++                            "SP_MediaSeekBackward",
++                            "SP_MediaVolume",
++                            "SP_MediaVolumeMuted",
++                            "SP_LineEditClearButton",
++                            "SP_DialogYesToAllButton",
++                            "SP_DialogNoToAllButton",
++                            "SP_DialogSaveAllButton",
++                            "SP_DialogAbortButton",
++                            "SP_DialogRetryButton",
++                            "SP_DialogIgnoreButton",
++                            "SP_RestoreDefaultsButton",
++                            "SP_CustomBase"
++                        ]
++                    }
++                ],
++                "object": true,
++                "qualifiedClassName": "QStyle",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstyle.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStylePlugin",
++                "object": true,
++                "qualifiedClassName": "QStylePlugin",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstyleplugin.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCommonStyle",
++                "object": true,
++                "qualifiedClassName": "QCommonStyle",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_removeAnimation",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QStyle"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcommonstyle.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QProxyStyle",
++                "object": true,
++                "qualifiedClassName": "QProxyStyle",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QCommonStyle"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qproxystyle.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStyleSheetStyle",
++                "object": true,
++                "qualifiedClassName": "QStyleSheetStyle",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWindowsStyle"
++                    }
++                ]
++            },
++            {
++                "className": "QStyleSheetStyleCaches",
++                "object": true,
++                "qualifiedClassName": "QStyleSheetStyleCaches",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "objectDestroyed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "styleDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstylesheetstyle_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPixmapStyle",
++                "object": true,
++                "qualifiedClassName": "QPixmapStyle",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QCommonStyle"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpixmapstyle_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStyleAnimation",
++                "object": true,
++                "qualifiedClassName": "QStyleAnimation",
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "start",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractAnimation"
++                    }
++                ]
++            },
++            {
++                "className": "QProgressStyleAnimation",
++                "object": true,
++                "qualifiedClassName": "QProgressStyleAnimation",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QStyleAnimation"
++                    }
++                ]
++            },
++            {
++                "className": "QNumberStyleAnimation",
++                "object": true,
++                "qualifiedClassName": "QNumberStyleAnimation",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QStyleAnimation"
++                    }
++                ]
++            },
++            {
++                "className": "QBlendStyleAnimation",
++                "object": true,
++                "qualifiedClassName": "QBlendStyleAnimation",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QStyleAnimation"
++                    }
++                ]
++            },
++            {
++                "className": "QScrollbarStyleAnimation",
++                "object": true,
++                "qualifiedClassName": "QScrollbarStyleAnimation",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "time",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "updateCurrentTime",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QNumberStyleAnimation"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstyleanimation_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWindowsStyle",
++                "object": true,
++                "qualifiedClassName": "QWindowsStyle",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QCommonStyle"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwindowsstyle_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFusionStyle",
++                "object": true,
++                "qualifiedClassName": "QFusionStyle",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QCommonStyle"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfusionstyle_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFrame",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Shape",
++                        "values": [
++                            "NoFrame",
++                            "Box",
++                            "Panel",
++                            "WinPanel",
++                            "HLine",
++                            "VLine",
++                            "StyledPanel"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Shadow",
++                        "values": [
++                            "Plain",
++                            "Raised",
++                            "Sunken"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "frameShape",
++                        "read": "frameShape",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Shape",
++                        "user": false,
++                        "write": "setFrameShape"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "frameShadow",
++                        "read": "frameShadow",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Shadow",
++                        "user": false,
++                        "write": "setFrameShadow"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "lineWidth",
++                        "read": "lineWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setLineWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "midLineWidth",
++                        "read": "midLineWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMidLineWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "frameWidth",
++                        "read": "frameWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "frameRect",
++                        "read": "frameRect",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRect",
++                        "user": false,
++                        "write": "setFrameRect"
++                    }
++                ],
++                "qualifiedClassName": "QFrame",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qframe.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractScrollArea",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SizeAdjustPolicy",
++                        "values": [
++                            "AdjustIgnored",
++                            "AdjustToContentsOnFirstShow",
++                            "AdjustToContents"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "verticalScrollBarPolicy",
++                        "read": "verticalScrollBarPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ScrollBarPolicy",
++                        "user": false,
++                        "write": "setVerticalScrollBarPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "horizontalScrollBarPolicy",
++                        "read": "horizontalScrollBarPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ScrollBarPolicy",
++                        "user": false,
++                        "write": "setHorizontalScrollBarPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizeAdjustPolicy",
++                        "read": "sizeAdjustPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "SizeAdjustPolicy",
++                        "user": false,
++                        "write": "setSizeAdjustPolicy"
++                    }
++                ],
++                "qualifiedClassName": "QAbstractScrollArea",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_hslide",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_vslide",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_showOrHideScrollBars",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFrame"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractscrollarea.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractScrollAreaFilter",
++                "object": true,
++                "qualifiedClassName": "QAbstractScrollAreaFilter",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractscrollarea_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFocusFrame",
++                "object": true,
++                "qualifiedClassName": "QFocusFrame",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfocusframe.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWidgetAnimator",
++                "object": true,
++                "qualifiedClassName": "QWidgetAnimator",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "animationFinished",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwidgetanimator_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractButton",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "text",
++                        "read": "text",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "icon",
++                        "read": "icon",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QIcon",
++                        "user": false,
++                        "write": "setIcon"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconSize",
++                        "read": "iconSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setIconSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "shortcut",
++                        "read": "shortcut",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QKeySequence",
++                        "user": false,
++                        "write": "setShortcut"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "checkable",
++                        "read": "isCheckable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setCheckable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "checked",
++                        "notify": "toggled",
++                        "read": "isChecked",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": true,
++                        "write": "setChecked"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoRepeat",
++                        "read": "autoRepeat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoRepeat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoExclusive",
++                        "read": "autoExclusive",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoExclusive"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoRepeatDelay",
++                        "read": "autoRepeatDelay",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setAutoRepeatDelay"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoRepeatInterval",
++                        "read": "autoRepeatInterval",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setAutoRepeatInterval"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "down",
++                        "read": "isDown",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDown"
++                    }
++                ],
++                "qualifiedClassName": "QAbstractButton",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "pressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "released",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "checked",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "checked",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "toggled",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "size",
++                                "type": "QSize"
++                            }
++                        ],
++                        "name": "setIconSize",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "msec",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "animateClick",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "animateClick",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "click",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "toggle",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setChecked",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractbutton.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractSlider",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimum",
++                        "read": "minimum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximum",
++                        "read": "maximum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "singleStep",
++                        "read": "singleStep",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setSingleStep"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "pageStep",
++                        "read": "pageStep",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setPageStep"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "value",
++                        "notify": "valueChanged",
++                        "read": "value",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": true,
++                        "write": "setValue"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sliderPosition",
++                        "notify": "sliderMoved",
++                        "read": "sliderPosition",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setSliderPosition"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tracking",
++                        "read": "hasTracking",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTracking"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "orientation",
++                        "read": "orientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Orientation",
++                        "user": false,
++                        "write": "setOrientation"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "invertedAppearance",
++                        "read": "invertedAppearance",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setInvertedAppearance"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "invertedControls",
++                        "read": "invertedControls",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setInvertedControls"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "sliderDown",
++                        "read": "isSliderDown",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSliderDown"
++                    }
++                ],
++                "qualifiedClassName": "QAbstractSlider",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "valueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "sliderPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "position",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sliderMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "sliderReleased",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "min",
++                                "type": "int"
++                            },
++                            {
++                                "name": "max",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rangeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "actionTriggered",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setValue",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "Qt::Orientation"
++                            }
++                        ],
++                        "name": "setOrientation",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "min",
++                                "type": "int"
++                            },
++                            {
++                                "name": "max",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setRange",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractslider.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QButtonGroup",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "exclusive",
++                        "read": "exclusive",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setExclusive"
++                    }
++                ],
++                "qualifiedClassName": "QButtonGroup",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAbstractButton*"
++                            }
++                        ],
++                        "name": "buttonClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAbstractButton*"
++                            }
++                        ],
++                        "name": "buttonPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAbstractButton*"
++                            }
++                        ],
++                        "name": "buttonReleased",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAbstractButton*"
++                            },
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "buttonToggled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "idClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "idPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "idReleased",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "idToggled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "buttonClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "buttonPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "buttonReleased",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "buttonToggled",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qbuttongroup.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCalendarWidget",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "HorizontalHeaderFormat",
++                        "values": [
++                            "NoHorizontalHeader",
++                            "SingleLetterDayNames",
++                            "ShortDayNames",
++                            "LongDayNames"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "VerticalHeaderFormat",
++                        "values": [
++                            "NoVerticalHeader",
++                            "ISOWeekNumbers"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SelectionMode",
++                        "values": [
++                            "NoSelection",
++                            "SingleSelection"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectedDate",
++                        "read": "selectedDate",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDate",
++                        "user": false,
++                        "write": "setSelectedDate"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumDate",
++                        "read": "minimumDate",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDate",
++                        "user": false,
++                        "write": "setMinimumDate"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumDate",
++                        "read": "maximumDate",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDate",
++                        "user": false,
++                        "write": "setMaximumDate"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "firstDayOfWeek",
++                        "read": "firstDayOfWeek",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::DayOfWeek",
++                        "user": false,
++                        "write": "setFirstDayOfWeek"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "gridVisible",
++                        "read": "isGridVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setGridVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectionMode",
++                        "read": "selectionMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "SelectionMode",
++                        "user": false,
++                        "write": "setSelectionMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "horizontalHeaderFormat",
++                        "read": "horizontalHeaderFormat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "HorizontalHeaderFormat",
++                        "user": false,
++                        "write": "setHorizontalHeaderFormat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "verticalHeaderFormat",
++                        "read": "verticalHeaderFormat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "VerticalHeaderFormat",
++                        "user": false,
++                        "write": "setVerticalHeaderFormat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "navigationBarVisible",
++                        "read": "isNavigationBarVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setNavigationBarVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dateEditEnabled",
++                        "read": "isDateEditEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDateEditEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dateEditAcceptDelay",
++                        "read": "dateEditAcceptDelay",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDateEditAcceptDelay"
++                    }
++                ],
++                "qualifiedClassName": "QCalendarWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "year",
++                                "type": "int"
++                            },
++                            {
++                                "name": "month",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentPageChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "setSelectedDate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "min",
++                                "type": "QDate"
++                            },
++                            {
++                                "name": "max",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "setDateRange",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "year",
++                                "type": "int"
++                            },
++                            {
++                                "name": "month",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentPage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "show",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setGridVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visible",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setNavigationBarVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showNextMonth",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showPreviousMonth",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showNextYear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showPreviousYear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showSelectedDate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showToday",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "_q_slotShowDate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "_q_slotChangeDate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            },
++                            {
++                                "name": "changeMonth",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "_q_slotChangeDate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_editingFinished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_prevMonthClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_nextMonthClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_yearEditingFinished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_yearClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "act",
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "_q_monthChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcalendarwidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCheckBox",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tristate",
++                        "read": "isTristate",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTristate"
++                    }
++                ],
++                "qualifiedClassName": "QCheckBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "stateChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcheckbox.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QComboBox",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "InsertPolicy",
++                        "values": [
++                            "NoInsert",
++                            "InsertAtTop",
++                            "InsertAtCurrent",
++                            "InsertAtBottom",
++                            "InsertAfterCurrent",
++                            "InsertBeforeCurrent",
++                            "InsertAlphabetically"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SizeAdjustPolicy",
++                        "values": [
++                            "AdjustToContents",
++                            "AdjustToContentsOnFirstShow",
++                            "AdjustToMinimumContentsLength",
++                            "AdjustToMinimumContentsLengthWithIcon"
++                        ]
++                    }
++                ],
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "query",
++                                "type": "Qt::InputMethodQuery"
++                            },
++                            {
++                                "name": "argument",
++                                "type": "QVariant"
++                            }
++                        ],
++                        "name": "inputMethodQuery",
++                        "returnType": "QVariant"
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "editable",
++                        "read": "isEditable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setEditable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "count",
++                        "read": "count",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentText",
++                        "notify": "currentTextChanged",
++                        "read": "currentText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": true,
++                        "write": "setCurrentText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentIndex",
++                        "notify": "currentIndexChanged",
++                        "read": "currentIndex",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentIndex"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentData",
++                        "read": "currentData",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QVariant",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maxVisibleItems",
++                        "read": "maxVisibleItems",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaxVisibleItems"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maxCount",
++                        "read": "maxCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaxCount"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "insertPolicy",
++                        "read": "insertPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "InsertPolicy",
++                        "user": false,
++                        "write": "setInsertPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizeAdjustPolicy",
++                        "read": "sizeAdjustPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "SizeAdjustPolicy",
++                        "user": false,
++                        "write": "setSizeAdjustPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumContentsLength",
++                        "read": "minimumContentsLength",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimumContentsLength"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconSize",
++                        "read": "iconSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setIconSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "placeholderText",
++                        "read": "placeholderText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setPlaceholderText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "autoCompletion",
++                        "read": "autoCompletion",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoCompletion"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "autoCompletionCaseSensitivity",
++                        "read": "autoCompletionCaseSensitivity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::CaseSensitivity",
++                        "user": false,
++                        "write": "setAutoCompletionCaseSensitivity"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "duplicatesEnabled",
++                        "read": "duplicatesEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDuplicatesEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "frame",
++                        "read": "hasFrame",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFrame"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "modelColumn",
++                        "read": "modelColumn",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setModelColumn"
++                    }
++                ],
++                "qualifiedClassName": "QComboBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "editTextChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "highlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textHighlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentIndexChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "currentIndexChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "currentTextChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "highlighted",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clearEditText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setEditText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setCurrentText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_itemSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitHighlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitCurrentIndexChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_editingFinished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_returnPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_resetButton",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_dataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateIndexBeforeChange",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_rowsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_rowsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_modelDestroyed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_modelReset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_completerActivated",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcombobox.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QComboBoxListView",
++                "object": true,
++                "qualifiedClassName": "QComboBoxListView",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QListView"
++                    }
++                ]
++            },
++            {
++                "className": "QComboBoxPrivateScroller",
++                "object": true,
++                "qualifiedClassName": "QComboBoxPrivateScroller",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "doScroll",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            },
++            {
++                "className": "QComboBoxPrivateContainer",
++                "object": true,
++                "qualifiedClassName": "QComboBoxPrivateContainer",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "itemSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resetButton",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "scrollItemView",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "hideScrollers",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "updateScrollers",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "viewDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFrame"
++                    }
++                ]
++            },
++            {
++                "className": "QComboMenuDelegate",
++                "object": true,
++                "qualifiedClassName": "QComboMenuDelegate",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemDelegate"
++                    }
++                ]
++            },
++            {
++                "className": "QComboBoxDelegate",
++                "object": true,
++                "qualifiedClassName": "QComboBoxDelegate",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QItemDelegate"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcombobox_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCommandLinkButton",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "description",
++                        "read": "description",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setDescription"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "flat",
++                        "read": "isFlat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFlat"
++                    }
++                ],
++                "qualifiedClassName": "QCommandLinkButton",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPushButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcommandlinkbutton.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDateTimeEdit",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Section",
++                        "values": [
++                            "NoSection",
++                            "AmPmSection",
++                            "MSecSection",
++                            "SecondSection",
++                            "MinuteSection",
++                            "HourSection",
++                            "DaySection",
++                            "MonthSection",
++                            "YearSection",
++                            "TimeSections_Mask",
++                            "DateSections_Mask"
++                        ]
++                    },
++                    {
++                        "alias": "Section",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "Sections",
++                        "values": [
++                            "NoSection",
++                            "AmPmSection",
++                            "MSecSection",
++                            "SecondSection",
++                            "MinuteSection",
++                            "HourSection",
++                            "DaySection",
++                            "MonthSection",
++                            "YearSection",
++                            "TimeSections_Mask",
++                            "DateSections_Mask"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dateTime",
++                        "notify": "dateTimeChanged",
++                        "read": "dateTime",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDateTime",
++                        "user": true,
++                        "write": "setDateTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "date",
++                        "notify": "dateChanged",
++                        "read": "date",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDate",
++                        "user": false,
++                        "write": "setDate"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "time",
++                        "notify": "timeChanged",
++                        "read": "time",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QTime",
++                        "user": false,
++                        "write": "setTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumDateTime",
++                        "read": "maximumDateTime",
++                        "required": false,
++                        "reset": "clearMaximumDateTime()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDateTime",
++                        "user": false,
++                        "write": "setMaximumDateTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumDateTime",
++                        "read": "minimumDateTime",
++                        "required": false,
++                        "reset": "clearMinimumDateTime()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDateTime",
++                        "user": false,
++                        "write": "setMinimumDateTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumDate",
++                        "read": "maximumDate",
++                        "required": false,
++                        "reset": "clearMaximumDate()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDate",
++                        "user": false,
++                        "write": "setMaximumDate"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumDate",
++                        "read": "minimumDate",
++                        "required": false,
++                        "reset": "clearMinimumDate()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDate",
++                        "user": false,
++                        "write": "setMinimumDate"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumTime",
++                        "read": "maximumTime",
++                        "required": false,
++                        "reset": "clearMaximumTime()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QTime",
++                        "user": false,
++                        "write": "setMaximumTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumTime",
++                        "read": "minimumTime",
++                        "required": false,
++                        "reset": "clearMinimumTime()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QTime",
++                        "user": false,
++                        "write": "setMinimumTime"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentSection",
++                        "read": "currentSection",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Section",
++                        "user": false,
++                        "write": "setCurrentSection"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "displayedSections",
++                        "read": "displayedSections",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Sections",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "displayFormat",
++                        "read": "displayFormat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setDisplayFormat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "calendarPopup",
++                        "read": "calendarPopup",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setCalendarPopup"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentSectionIndex",
++                        "read": "currentSectionIndex",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentSectionIndex"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sectionCount",
++                        "read": "sectionCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "timeSpec",
++                        "read": "timeSpec",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TimeSpec",
++                        "user": false,
++                        "write": "setTimeSpec"
++                    }
++                ],
++                "qualifiedClassName": "QDateTimeEdit",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "dateTime",
++                                "type": "QDateTime"
++                            }
++                        ],
++                        "name": "dateTimeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "time",
++                                "type": "QTime"
++                            }
++                        ],
++                        "name": "timeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "dateChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "dateTime",
++                                "type": "QDateTime"
++                            }
++                        ],
++                        "name": "setDateTime",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "setDate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "time",
++                                "type": "QTime"
++                            }
++                        ],
++                        "name": "setTime",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_resetButton",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractSpinBox"
++                    }
++                ]
++            },
++            {
++                "className": "QTimeEdit",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "time",
++                        "notify": "userTimeChanged",
++                        "read": "time",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QTime",
++                        "user": true,
++                        "write": "setTime"
++                    }
++                ],
++                "qualifiedClassName": "QTimeEdit",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "time",
++                                "type": "QTime"
++                            }
++                        ],
++                        "name": "userTimeChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDateTimeEdit"
++                    }
++                ]
++            },
++            {
++                "className": "QDateEdit",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "date",
++                        "notify": "userDateChanged",
++                        "read": "date",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDate",
++                        "user": true,
++                        "write": "setDate"
++                    }
++                ],
++                "qualifiedClassName": "QDateEdit",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "userDateChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDateTimeEdit"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdatetimeedit.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCalendarPopup",
++                "object": true,
++                "qualifiedClassName": "QCalendarPopup",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newDate",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "newDateSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "oldDate",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "hidingCalendar",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resetButton",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "dateSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "dateSelectionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdatetimeedit_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDial",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wrapping",
++                        "read": "wrapping",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWrapping"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "notchSize",
++                        "read": "notchSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "notchTarget",
++                        "read": "notchTarget",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setNotchTarget"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "notchesVisible",
++                        "read": "notchesVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setNotchesVisible"
++                    }
++                ],
++                "qualifiedClassName": "QDial",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visible",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setNotchesVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "on",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setWrapping",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractSlider"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdial.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDockWidget",
++                "enums": [
++                    {
++                        "alias": "DockWidgetFeature",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "DockWidgetFeatures",
++                        "values": [
++                            "DockWidgetClosable",
++                            "DockWidgetMovable",
++                            "DockWidgetFloatable",
++                            "DockWidgetVerticalTitleBar",
++                            "DockWidgetFeatureMask",
++                            "AllDockWidgetFeatures",
++                            "NoDockWidgetFeatures",
++                            "Reserved"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "floating",
++                        "read": "isFloating",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFloating"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "features",
++                        "notify": "featuresChanged",
++                        "read": "features",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "DockWidgetFeatures",
++                        "user": false,
++                        "write": "setFeatures"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "allowedAreas",
++                        "notify": "allowedAreasChanged",
++                        "read": "allowedAreas",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::DockWidgetAreas",
++                        "user": false,
++                        "write": "setAllowedAreas"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowTitle",
++                        "read": "windowTitle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setWindowTitle"
++                    }
++                ],
++                "qualifiedClassName": "QDockWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "features",
++                                "type": "QDockWidget::DockWidgetFeatures"
++                            }
++                        ],
++                        "name": "featuresChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "topLevel",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "topLevelChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "allowedAreas",
++                                "type": "Qt::DockWidgetAreas"
++                            }
++                        ],
++                        "name": "allowedAreasChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visible",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "visibilityChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "area",
++                                "type": "Qt::DockWidgetArea"
++                            }
++                        ],
++                        "name": "dockLocationChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "_q_toggleView",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_toggleTopLevel",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdockwidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDockWidgetLayout",
++                "object": true,
++                "qualifiedClassName": "QDockWidgetLayout",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QLayout"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdockwidget_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFontComboBox",
++                "enums": [
++                    {
++                        "alias": "FontFilter",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "FontFilters",
++                        "values": [
++                            "AllFonts",
++                            "ScalableFonts",
++                            "NonScalableFonts",
++                            "MonospacedFonts",
++                            "ProportionalFonts"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "writingSystem",
++                        "read": "writingSystem",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QFontDatabase::WritingSystem",
++                        "user": false,
++                        "write": "setWritingSystem"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "fontFilters",
++                        "read": "fontFilters",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "FontFilters",
++                        "user": false,
++                        "write": "setFontFilters"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentFont",
++                        "notify": "currentFontChanged",
++                        "read": "currentFont",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QFont",
++                        "user": false,
++                        "write": "setCurrentFont"
++                    }
++                ],
++                "qualifiedClassName": "QFontComboBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "f",
++                                "type": "QFont"
++                            }
++                        ],
++                        "name": "currentFontChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "f",
++                                "type": "QFont"
++                            }
++                        ],
++                        "name": "setCurrentFont",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateModel",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QComboBox"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfontcombobox.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGroupBox",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "title",
++                        "read": "title",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setTitle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "alignment",
++                        "read": "alignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setAlignment"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "flat",
++                        "read": "isFlat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFlat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "checkable",
++                        "read": "isCheckable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setCheckable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "checked",
++                        "notify": "toggled",
++                        "read": "isChecked",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": true,
++                        "write": "setChecked"
++                    }
++                ],
++                "qualifiedClassName": "QGroupBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "checked",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "toggled",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "checked",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setChecked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "_q_setChildrenEnabled",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgroupbox.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QKeySequenceEdit",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "keySequence",
++                        "notify": "keySequenceChanged",
++                        "read": "keySequence",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QKeySequence",
++                        "user": true,
++                        "write": "setKeySequence"
++                    }
++                ],
++                "qualifiedClassName": "QKeySequenceEdit",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "editingFinished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "keySequence",
++                                "type": "QKeySequence"
++                            }
++                        ],
++                        "name": "keySequenceChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "keySequence",
++                                "type": "QKeySequence"
++                            }
++                        ],
++                        "name": "setKeySequence",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qkeysequenceedit.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QLabel",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "text",
++                        "read": "text",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textFormat",
++                        "read": "textFormat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextFormat",
++                        "user": false,
++                        "write": "setTextFormat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "pixmap",
++                        "read": "pixmap",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPixmap",
++                        "user": false,
++                        "write": "setPixmap"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "scaledContents",
++                        "read": "hasScaledContents",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setScaledContents"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "alignment",
++                        "read": "alignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setAlignment"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wordWrap",
++                        "read": "wordWrap",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWordWrap"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "margin",
++                        "read": "margin",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMargin"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "indent",
++                        "read": "indent",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setIndent"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "openExternalLinks",
++                        "read": "openExternalLinks",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setOpenExternalLinks"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textInteractionFlags",
++                        "read": "textInteractionFlags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextInteractionFlags",
++                        "user": false,
++                        "write": "setTextInteractionFlags"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "hasSelectedText",
++                        "read": "hasSelectedText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectedText",
++                        "read": "selectedText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QLabel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "link",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "linkActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "link",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "linkHovered",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QPixmap"
++                            }
++                        ],
++                        "name": "setPixmap",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QPicture"
++                            }
++                        ],
++                        "name": "setPicture",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "movie",
++                                "type": "QMovie*"
++                            }
++                        ],
++                        "name": "setMovie",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setNum",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "double"
++                            }
++                        ],
++                        "name": "setNum",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "_q_movieUpdated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QSize"
++                            }
++                        ],
++                        "name": "_q_movieResized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_linkHovered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_buddyDeleted",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFrame"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlabel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QLCDNumber",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Mode",
++                        "values": [
++                            "Hex",
++                            "Dec",
++                            "Oct",
++                            "Bin"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SegmentStyle",
++                        "values": [
++                            "Outline",
++                            "Filled",
++                            "Flat"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "smallDecimalPoint",
++                        "read": "smallDecimalPoint",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSmallDecimalPoint"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "digitCount",
++                        "read": "digitCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDigitCount"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "mode",
++                        "read": "mode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Mode",
++                        "user": false,
++                        "write": "setMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "segmentStyle",
++                        "read": "segmentStyle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "SegmentStyle",
++                        "user": false,
++                        "write": "setSegmentStyle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "value",
++                        "read": "value",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "double",
++                        "user": false,
++                        "write": "display"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "intValue",
++                        "read": "intValue",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "display"
++                    }
++                ],
++                "qualifiedClassName": "QLCDNumber",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "overflow",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "str",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "display",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "num",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "display",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "num",
++                                "type": "double"
++                            }
++                        ],
++                        "name": "display",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "setHexMode",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "setDecMode",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "setOctMode",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "setBinMode",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setSmallDecimalPoint",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFrame"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlcdnumber.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QLineEdit",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ActionPosition",
++                        "values": [
++                            "LeadingPosition",
++                            "TrailingPosition"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "EchoMode",
++                        "values": [
++                            "Normal",
++                            "NoEcho",
++                            "Password",
++                            "PasswordEchoOnEdit"
++                        ]
++                    }
++                ],
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "property",
++                                "type": "Qt::InputMethodQuery"
++                            },
++                            {
++                                "name": "argument",
++                                "type": "QVariant"
++                            }
++                        ],
++                        "name": "inputMethodQuery",
++                        "returnType": "QVariant"
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "inputMask",
++                        "read": "inputMask",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setInputMask"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "text",
++                        "notify": "textChanged",
++                        "read": "text",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": true,
++                        "write": "setText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maxLength",
++                        "read": "maxLength",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaxLength"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "frame",
++                        "read": "hasFrame",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFrame"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "echoMode",
++                        "read": "echoMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "EchoMode",
++                        "user": false,
++                        "write": "setEchoMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "displayText",
++                        "read": "displayText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursorPosition",
++                        "read": "cursorPosition",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCursorPosition"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "alignment",
++                        "read": "alignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setAlignment"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "modified",
++                        "read": "isModified",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setModified"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "hasSelectedText",
++                        "read": "hasSelectedText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectedText",
++                        "read": "selectedText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dragEnabled",
++                        "read": "dragEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDragEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "readOnly",
++                        "read": "isReadOnly",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setReadOnly"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "undoAvailable",
++                        "read": "isUndoAvailable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "redoAvailable",
++                        "read": "isRedoAvailable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "acceptableInput",
++                        "read": "hasAcceptableInput",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "placeholderText",
++                        "read": "placeholderText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setPlaceholderText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursorMoveStyle",
++                        "read": "cursorMoveStyle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::CursorMoveStyle",
++                        "user": false,
++                        "write": "setCursorMoveStyle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "clearButtonEnabled",
++                        "read": "isClearButtonEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setClearButtonEnabled"
++                    }
++                ],
++                "qualifiedClassName": "QLineEdit",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textEdited",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "cursorPositionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "returnPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "editingFinished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "inputRejected",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectAll",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "undo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "redo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "cut",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "copy",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "paste",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_handleWindowActivate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_textEdited",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_cursorPositionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_completionHighlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "_q_updateNeeded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_clearButtonClicked",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlineedit.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QLineEditIconButton",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "opacity",
++                        "read": "opacity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setOpacity"
++                    }
++                ],
++                "qualifiedClassName": "QLineEditIconButton",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "updateCursor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "onAnimationFinished",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QToolButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlineedit_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWidgetLineControl",
++                "object": true,
++                "qualifiedClassName": "QWidgetLineControl",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "cursorPositionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "displayTextChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textEdited",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resetInputContext",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "updateMicroFocus",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "accepted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "editingFinished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "updateNeeded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "inputRejected",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_deleteSelected",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QInputControl"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwidgetlinecontrol_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMainWindow",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "DockOption",
++                        "values": [
++                            "AnimatedDocks",
++                            "AllowNestedDocks",
++                            "AllowTabbedDocks",
++                            "ForceTabbedDocks",
++                            "VerticalTabs",
++                            "GroupedDragging"
++                        ]
++                    },
++                    {
++                        "alias": "DockOption",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "DockOptions",
++                        "values": [
++                            "AnimatedDocks",
++                            "AllowNestedDocks",
++                            "AllowTabbedDocks",
++                            "ForceTabbedDocks",
++                            "VerticalTabs",
++                            "GroupedDragging"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconSize",
++                        "read": "iconSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setIconSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "toolButtonStyle",
++                        "read": "toolButtonStyle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ToolButtonStyle",
++                        "user": false,
++                        "write": "setToolButtonStyle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "animated",
++                        "read": "isAnimated",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAnimated"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "documentMode",
++                        "read": "documentMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDocumentMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabShape",
++                        "read": "tabShape",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QTabWidget::TabShape",
++                        "user": false,
++                        "write": "setTabShape"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dockNestingEnabled",
++                        "read": "isDockNestingEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDockNestingEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dockOptions",
++                        "read": "dockOptions",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "DockOptions",
++                        "user": false,
++                        "write": "setDockOptions"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "unifiedTitleAndToolBarOnMac",
++                        "read": "unifiedTitleAndToolBarOnMac",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUnifiedTitleAndToolBarOnMac"
++                    }
++                ],
++                "qualifiedClassName": "QMainWindow",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "iconSize",
++                                "type": "QSize"
++                            }
++                        ],
++                        "name": "iconSizeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "toolButtonStyle",
++                                "type": "Qt::ToolButtonStyle"
++                            }
++                        ],
++                        "name": "toolButtonStyleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "dockWidget",
++                                "type": "QDockWidget*"
++                            }
++                        ],
++                        "name": "tabifiedDockWidgetActivated",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "enabled",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setAnimated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "enabled",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setDockNestingEnabled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "set",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setUnifiedTitleAndToolBarOnMac",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmainwindow.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDockWidgetGroupWindow",
++                "object": true,
++                "qualifiedClassName": "QDockWidgetGroupWindow",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "resized",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            },
++            {
++                "className": "QMainWindowLayout",
++                "object": true,
++                "qualifiedClassName": "QMainWindowLayout",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "updateGapIndicator",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "tabChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "from",
++                                "type": "int"
++                            },
++                            {
++                                "name": "to",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "tabMoved",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QLayout"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QMainWindowLayoutSeparatorHelper<QMainWindowLayout>"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmainwindowlayout_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMdiArea",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "WindowOrder",
++                        "values": [
++                            "CreationOrder",
++                            "StackingOrder",
++                            "ActivationHistoryOrder"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ViewMode",
++                        "values": [
++                            "SubWindowView",
++                            "TabbedView"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "background",
++                        "read": "background",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QBrush",
++                        "user": false,
++                        "write": "setBackground"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "activationOrder",
++                        "read": "activationOrder",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "WindowOrder",
++                        "user": false,
++                        "write": "setActivationOrder"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "viewMode",
++                        "read": "viewMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ViewMode",
++                        "user": false,
++                        "write": "setViewMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "documentMode",
++                        "read": "documentMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDocumentMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabsClosable",
++                        "read": "tabsClosable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTabsClosable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabsMovable",
++                        "read": "tabsMovable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTabsMovable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabShape",
++                        "read": "tabShape",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QTabWidget::TabShape",
++                        "user": false,
++                        "write": "setTabShape"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabPosition",
++                        "read": "tabPosition",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QTabWidget::TabPosition",
++                        "user": false,
++                        "write": "setTabPosition"
++                    }
++                ],
++                "qualifiedClassName": "QMdiArea",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QMdiSubWindow*"
++                            }
++                        ],
++                        "name": "subWindowActivated",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "window",
++                                "type": "QMdiSubWindow*"
++                            }
++                        ],
++                        "name": "setActiveSubWindow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "tileSubWindows",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "cascadeSubWindows",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "closeActiveSubWindow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "closeAllSubWindows",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "activateNextSubWindow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "activatePreviousSubWindow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "viewport",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "setupViewport",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_deactivateAllWindows",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "Qt::WindowStates"
++                            },
++                            {
++                                "type": "Qt::WindowStates"
++                            }
++                        ],
++                        "name": "_q_processWindowStateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_currentTabChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_closeTab",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_moveTab",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractScrollArea"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmdiarea.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMdiSubWindow",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "keyboardSingleStep",
++                        "read": "keyboardSingleStep",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setKeyboardSingleStep"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "keyboardPageStep",
++                        "read": "keyboardPageStep",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setKeyboardPageStep"
++                    }
++                ],
++                "qualifiedClassName": "QMdiSubWindow",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "oldState",
++                                "type": "Qt::WindowStates"
++                            },
++                            {
++                                "name": "newState",
++                                "type": "Qt::WindowStates"
++                            }
++                        ],
++                        "name": "windowStateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "aboutToActivate",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "showSystemMenu",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "showShaded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateStaysOnTopHint",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_enterInteractiveMode",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QWidget*"
++                            },
++                            {
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "_q_processFocusChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmdisubwindow.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMenu",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tearOffEnabled",
++                        "read": "isTearOffEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTearOffEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "title",
++                        "read": "title",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setTitle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "icon",
++                        "read": "icon",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QIcon",
++                        "user": false,
++                        "write": "setIcon"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "separatorsCollapsible",
++                        "read": "separatorsCollapsible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSeparatorsCollapsible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "toolTipsVisible",
++                        "read": "toolTipsVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setToolTipsVisible"
++                    }
++                ],
++                "qualifiedClassName": "QMenu",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "aboutToShow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "aboutToHide",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "triggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "hovered",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "internalDelayedPopup",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_actionTriggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_actionHovered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_overrideMenuActionDestroyed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_platformMenuAboutToShow",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmenu.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMenuBar",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "defaultUp",
++                        "read": "isDefaultUp",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDefaultUp"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "nativeMenuBar",
++                        "read": "isNativeMenuBar",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setNativeMenuBar"
++                    }
++                ],
++                "qualifiedClassName": "QMenuBar",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "triggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "hovered",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visible",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_actionTriggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_actionHovered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_internalShortcutActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateLayout",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmenubar.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QProgressBar",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Direction",
++                        "values": [
++                            "TopToBottom",
++                            "BottomToTop"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimum",
++                        "read": "minimum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximum",
++                        "read": "maximum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "text",
++                        "read": "text",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "value",
++                        "notify": "valueChanged",
++                        "read": "value",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setValue"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "alignment",
++                        "read": "alignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setAlignment"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textVisible",
++                        "read": "isTextVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTextVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "orientation",
++                        "read": "orientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Orientation",
++                        "user": false,
++                        "write": "setOrientation"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "invertedAppearance",
++                        "read": "invertedAppearance",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setInvertedAppearance"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textDirection",
++                        "read": "textDirection",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Direction",
++                        "user": false,
++                        "write": "setTextDirection"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "format",
++                        "read": "format",
++                        "required": false,
++                        "reset": "resetFormat()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setFormat"
++                    }
++                ],
++                "qualifiedClassName": "QProgressBar",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "valueChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "reset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "minimum",
++                                "type": "int"
++                            },
++                            {
++                                "name": "maximum",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setRange",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "minimum",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setMinimum",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "maximum",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setMaximum",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setValue",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "Qt::Orientation"
++                            }
++                        ],
++                        "name": "setOrientation",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qprogressbar.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPushButton",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoDefault",
++                        "read": "autoDefault",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoDefault"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "default",
++                        "read": "isDefault",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDefault"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "flat",
++                        "read": "isFlat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFlat"
++                    }
++                ],
++                "qualifiedClassName": "QPushButton",
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "showMenu",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_popupPressed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpushbutton.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QRadioButton",
++                "object": true,
++                "qualifiedClassName": "QRadioButton",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qradiobutton.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWidgetResizeHandler",
++                "object": true,
++                "qualifiedClassName": "QWidgetResizeHandler",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "activate",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwidgetresizehandler_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDialogButtonBox",
++                "enums": [
++                    {
++                        "alias": "StandardButton",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "StandardButtons",
++                        "values": [
++                            "NoButton",
++                            "Ok",
++                            "Save",
++                            "SaveAll",
++                            "Open",
++                            "Yes",
++                            "YesToAll",
++                            "No",
++                            "NoToAll",
++                            "Abort",
++                            "Retry",
++                            "Ignore",
++                            "Close",
++                            "Cancel",
++                            "Discard",
++                            "Help",
++                            "Apply",
++                            "Reset",
++                            "RestoreDefaults"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "orientation",
++                        "read": "orientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Orientation",
++                        "user": false,
++                        "write": "setOrientation"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "standardButtons",
++                        "read": "standardButtons",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "StandardButtons",
++                        "user": false,
++                        "write": "setStandardButtons"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "centerButtons",
++                        "read": "centerButtons",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setCenterButtons"
++                    }
++                ],
++                "qualifiedClassName": "QDialogButtonBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "button",
++                                "type": "QAbstractButton*"
++                            }
++                        ],
++                        "name": "clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "accepted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "helpRequested",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "rejected",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_handleButtonClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_handleButtonDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdialogbuttonbox.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QRubberBand",
++                "object": true,
++                "qualifiedClassName": "QRubberBand",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qrubberband.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QScrollArea",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "widgetResizable",
++                        "read": "widgetResizable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWidgetResizable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "alignment",
++                        "read": "alignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setAlignment"
++                    }
++                ],
++                "qualifiedClassName": "QScrollArea",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractScrollArea"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qscrollarea.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QScrollBar",
++                "object": true,
++                "qualifiedClassName": "QScrollBar",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractSlider"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qscrollbar.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSizeGrip",
++                "object": true,
++                "qualifiedClassName": "QSizeGrip",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_showIfNotHidden",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsizegrip.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSlider",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TickPosition",
++                        "values": [
++                            "NoTicks",
++                            "TicksAbove",
++                            "TicksLeft",
++                            "TicksBelow",
++                            "TicksRight",
++                            "TicksBothSides"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tickPosition",
++                        "read": "tickPosition",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "TickPosition",
++                        "user": false,
++                        "write": "setTickPosition"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tickInterval",
++                        "read": "tickInterval",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setTickInterval"
++                    }
++                ],
++                "qualifiedClassName": "QSlider",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractSlider"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qslider.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractSpinBox",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ButtonSymbols",
++                        "values": [
++                            "UpDownArrows",
++                            "PlusMinus",
++                            "NoButtons"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "CorrectionMode",
++                        "values": [
++                            "CorrectToPreviousValue",
++                            "CorrectToNearestValue"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "StepType",
++                        "values": [
++                            "DefaultStepType",
++                            "AdaptiveDecimalStepType"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wrapping",
++                        "read": "wrapping",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWrapping"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "frame",
++                        "read": "hasFrame",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFrame"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "alignment",
++                        "read": "alignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setAlignment"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "readOnly",
++                        "read": "isReadOnly",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setReadOnly"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "buttonSymbols",
++                        "read": "buttonSymbols",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ButtonSymbols",
++                        "user": false,
++                        "write": "setButtonSymbols"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "specialValueText",
++                        "read": "specialValueText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setSpecialValueText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "text",
++                        "read": "text",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "accelerated",
++                        "read": "isAccelerated",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAccelerated"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "correctionMode",
++                        "read": "correctionMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "CorrectionMode",
++                        "user": false,
++                        "write": "setCorrectionMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "acceptableInput",
++                        "read": "hasAcceptableInput",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "keyboardTracking",
++                        "read": "keyboardTracking",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setKeyboardTracking"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "showGroupSeparator",
++                        "read": "isGroupSeparatorShown",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setGroupSeparatorShown"
++                    }
++                ],
++                "qualifiedClassName": "QAbstractSpinBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "editingFinished",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "stepUp",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "stepDown",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectAll",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_editorTextChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_editorCursorPositionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractspinbox.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSpinBox",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "suffix",
++                        "read": "suffix",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setSuffix"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "prefix",
++                        "read": "prefix",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setPrefix"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cleanText",
++                        "read": "cleanText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimum",
++                        "read": "minimum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximum",
++                        "read": "maximum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "singleStep",
++                        "read": "singleStep",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setSingleStep"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "stepType",
++                        "read": "stepType",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "StepType",
++                        "user": false,
++                        "write": "setStepType"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "value",
++                        "notify": "valueChanged",
++                        "read": "value",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": true,
++                        "write": "setValue"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "displayIntegerBase",
++                        "read": "displayIntegerBase",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDisplayIntegerBase"
++                    }
++                ],
++                "qualifiedClassName": "QSpinBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "valueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "valueChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "val",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setValue",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractSpinBox"
++                    }
++                ]
++            },
++            {
++                "className": "QDoubleSpinBox",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "prefix",
++                        "read": "prefix",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setPrefix"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "suffix",
++                        "read": "suffix",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setSuffix"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cleanText",
++                        "read": "cleanText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "decimals",
++                        "read": "decimals",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDecimals"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimum",
++                        "read": "minimum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "double",
++                        "user": false,
++                        "write": "setMinimum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximum",
++                        "read": "maximum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "double",
++                        "user": false,
++                        "write": "setMaximum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "singleStep",
++                        "read": "singleStep",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "double",
++                        "user": false,
++                        "write": "setSingleStep"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "stepType",
++                        "read": "stepType",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "StepType",
++                        "user": false,
++                        "write": "setStepType"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "value",
++                        "notify": "valueChanged",
++                        "read": "value",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "double",
++                        "user": true,
++                        "write": "setValue"
++                    }
++                ],
++                "qualifiedClassName": "QDoubleSpinBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "double"
++                            }
++                        ],
++                        "name": "valueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "valueChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "val",
++                                "type": "double"
++                            }
++                        ],
++                        "name": "setValue",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractSpinBox"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qspinbox.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSplashScreen",
++                "object": true,
++                "qualifiedClassName": "QSplashScreen",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "message",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "messageChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "message",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "alignment",
++                                "type": "int"
++                            },
++                            {
++                                "name": "color",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "message",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "alignment",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "message",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clearMessage",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsplashscreen.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSplitter",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "orientation",
++                        "read": "orientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Orientation",
++                        "user": false,
++                        "write": "setOrientation"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "opaqueResize",
++                        "read": "opaqueResize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setOpaqueResize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "handleWidth",
++                        "read": "handleWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setHandleWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "childrenCollapsible",
++                        "read": "childrenCollapsible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setChildrenCollapsible"
++                    }
++                ],
++                "qualifiedClassName": "QSplitter",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pos",
++                                "type": "int"
++                            },
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "splitterMoved",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFrame"
++                    }
++                ]
++            },
++            {
++                "className": "QSplitterHandle",
++                "object": true,
++                "qualifiedClassName": "QSplitterHandle",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsplitter.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStackedWidget",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentIndex",
++                        "notify": "currentChanged",
++                        "read": "currentIndex",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentIndex"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "count",
++                        "read": "count",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QStackedWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "widgetRemoved",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "w",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "setCurrentWidget",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFrame"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstackedwidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStatusBar",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizeGripEnabled",
++                        "read": "isSizeGripEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSizeGripEnabled"
++                    }
++                ],
++                "qualifiedClassName": "QStatusBar",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "messageChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "timeout",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clearMessage",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstatusbar.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTabBar",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Shape",
++                        "values": [
++                            "RoundedNorth",
++                            "RoundedSouth",
++                            "RoundedWest",
++                            "RoundedEast",
++                            "TriangularNorth",
++                            "TriangularSouth",
++                            "TriangularWest",
++                            "TriangularEast"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "shape",
++                        "read": "shape",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Shape",
++                        "user": false,
++                        "write": "setShape"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentIndex",
++                        "notify": "currentChanged",
++                        "read": "currentIndex",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentIndex"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "count",
++                        "read": "count",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "drawBase",
++                        "read": "drawBase",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDrawBase"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconSize",
++                        "read": "iconSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setIconSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "elideMode",
++                        "read": "elideMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextElideMode",
++                        "user": false,
++                        "write": "setElideMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "usesScrollButtons",
++                        "read": "usesScrollButtons",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUsesScrollButtons"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabsClosable",
++                        "read": "tabsClosable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTabsClosable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectionBehaviorOnRemove",
++                        "read": "selectionBehaviorOnRemove",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "SelectionBehavior",
++                        "user": false,
++                        "write": "setSelectionBehaviorOnRemove"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "expanding",
++                        "read": "expanding",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setExpanding"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "movable",
++                        "read": "isMovable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setMovable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "documentMode",
++                        "read": "documentMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDocumentMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoHide",
++                        "read": "autoHide",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoHide"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "changeCurrentOnDrag",
++                        "read": "changeCurrentOnDrag",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setChangeCurrentOnDrag"
++                    }
++                ],
++                "qualifiedClassName": "QTabBar",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "tabCloseRequested",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "from",
++                                "type": "int"
++                            },
++                            {
++                                "name": "to",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "tabMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "tabBarClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "tabBarDoubleClicked",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_scrollTabs",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_closeTab",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtabbar.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlainTextEdit",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "LineWrapMode",
++                        "values": [
++                            "NoWrap",
++                            "WidgetWidth"
++                        ]
++                    }
++                ],
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "query",
++                                "type": "Qt::InputMethodQuery"
++                            },
++                            {
++                                "name": "argument",
++                                "type": "QVariant"
++                            }
++                        ],
++                        "name": "inputMethodQuery",
++                        "returnType": "QVariant"
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabChangesFocus",
++                        "read": "tabChangesFocus",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTabChangesFocus"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "documentTitle",
++                        "read": "documentTitle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setDocumentTitle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "undoRedoEnabled",
++                        "read": "isUndoRedoEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUndoRedoEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "lineWrapMode",
++                        "read": "lineWrapMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "LineWrapMode",
++                        "user": false,
++                        "write": "setLineWrapMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "readOnly",
++                        "read": "isReadOnly",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setReadOnly"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "plainText",
++                        "notify": "textChanged",
++                        "read": "toPlainText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": true,
++                        "write": "setPlainText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "overwriteMode",
++                        "read": "overwriteMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setOverwriteMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabStopWidth",
++                        "read": "tabStopWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setTabStopWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabStopDistance",
++                        "read": "tabStopDistance",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setTabStopDistance"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursorWidth",
++                        "read": "cursorWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCursorWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textInteractionFlags",
++                        "read": "textInteractionFlags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextInteractionFlags",
++                        "user": false,
++                        "write": "setTextInteractionFlags"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "blockCount",
++                        "read": "blockCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumBlockCount",
++                        "read": "maximumBlockCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximumBlockCount"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "backgroundVisible",
++                        "read": "backgroundVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setBackgroundVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "centerOnScroll",
++                        "read": "centerOnScroll",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setCenterOnScroll"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "placeholderText",
++                        "read": "placeholderText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setPlaceholderText"
++                    }
++                ],
++                "qualifiedClassName": "QPlainTextEdit",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "undoAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "redoAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "copyAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "cursorPositionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRect"
++                            },
++                            {
++                                "name": "dy",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "updateRequest",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newBlockCount",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "blockCountChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "modificationChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setPlainText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "cut",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "copy",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "paste",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "undo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "redo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectAll",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "insertPlainText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "appendPlainText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "html",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "appendHtml",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "centerCursor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "range",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "zoomIn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "zoomIn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "range",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "zoomOut",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "zoomOut",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "r",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "_q_repaintContents",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_adjustScrollbars",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_verticalScrollbarActionTriggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_cursorPositionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractScrollArea"
++                    }
++                ]
++            },
++            {
++                "className": "QPlainTextDocumentLayout",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursorWidth",
++                        "read": "cursorWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCursorWidth"
++                    }
++                ],
++                "qualifiedClassName": "QPlainTextDocumentLayout",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTextDocumentLayout"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplaintextedit.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPlainTextEditControl",
++                "object": true,
++                "qualifiedClassName": "QPlainTextEditControl",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidgetTextControl"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qplaintextedit_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTextEdit",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "LineWrapMode",
++                        "values": [
++                            "NoWrap",
++                            "WidgetWidth",
++                            "FixedPixelWidth",
++                            "FixedColumnWidth"
++                        ]
++                    },
++                    {
++                        "alias": "AutoFormattingFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "AutoFormatting",
++                        "values": [
++                            "AutoNone",
++                            "AutoBulletList",
++                            "AutoAll"
++                        ]
++                    }
++                ],
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "type",
++                                "type": "int"
++                            },
++                            {
++                                "name": "name",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "loadResource",
++                        "returnType": "QVariant"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "query",
++                                "type": "Qt::InputMethodQuery"
++                            },
++                            {
++                                "name": "argument",
++                                "type": "QVariant"
++                            }
++                        ],
++                        "name": "inputMethodQuery",
++                        "returnType": "QVariant"
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoFormatting",
++                        "read": "autoFormatting",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "AutoFormatting",
++                        "user": false,
++                        "write": "setAutoFormatting"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabChangesFocus",
++                        "read": "tabChangesFocus",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTabChangesFocus"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "documentTitle",
++                        "read": "documentTitle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setDocumentTitle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "undoRedoEnabled",
++                        "read": "isUndoRedoEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUndoRedoEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "lineWrapMode",
++                        "read": "lineWrapMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "LineWrapMode",
++                        "user": false,
++                        "write": "setLineWrapMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "lineWrapColumnOrWidth",
++                        "read": "lineWrapColumnOrWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setLineWrapColumnOrWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "readOnly",
++                        "read": "isReadOnly",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setReadOnly"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "markdown",
++                        "notify": "textChanged",
++                        "read": "toMarkdown",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setMarkdown"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "html",
++                        "notify": "textChanged",
++                        "read": "toHtml",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": true,
++                        "write": "setHtml"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "plainText",
++                        "read": "toPlainText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setPlainText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "overwriteMode",
++                        "read": "overwriteMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setOverwriteMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabStopWidth",
++                        "read": "tabStopWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setTabStopWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabStopDistance",
++                        "read": "tabStopDistance",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setTabStopDistance"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "acceptRichText",
++                        "read": "acceptRichText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAcceptRichText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursorWidth",
++                        "read": "cursorWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCursorWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textInteractionFlags",
++                        "read": "textInteractionFlags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextInteractionFlags",
++                        "user": false,
++                        "write": "setTextInteractionFlags"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "document",
++                        "read": "document",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QTextDocument*",
++                        "user": false,
++                        "write": "setDocument"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "placeholderText",
++                        "read": "placeholderText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setPlaceholderText"
++                    }
++                ],
++                "qualifiedClassName": "QTextEdit",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "undoAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "redoAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "format",
++                                "type": "QTextCharFormat"
++                            }
++                        ],
++                        "name": "currentCharFormatChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "copyAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "cursorPositionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "s",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setFontPointSize",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "fontFamily",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setFontFamily",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "w",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setFontWeight",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setFontUnderline",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setFontItalic",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "c",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "setTextColor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "c",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "setTextBackgroundColor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "f",
++                                "type": "QFont"
++                            }
++                        ],
++                        "name": "setCurrentFont",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "a",
++                                "type": "Qt::Alignment"
++                            }
++                        ],
++                        "name": "setAlignment",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setPlainText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setHtml",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "markdown",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setMarkdown",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "cut",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "copy",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "paste",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "undo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "redo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectAll",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "insertPlainText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "insertHtml",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "append",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "name",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "scrollToAnchor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "range",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "zoomIn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "zoomIn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "range",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "zoomOut",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "zoomOut",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "r",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "_q_repaintContents",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QTextCharFormat"
++                            }
++                        ],
++                        "name": "_q_currentCharFormatChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_adjustScrollbars",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "_q_ensureVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_cursorPositionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QTextBlock"
++                            }
++                        ],
++                        "name": "_q_hoveredBlockWithMarkerChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractScrollArea"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtextedit.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTextBrowser",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "source",
++                        "read": "source",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QUrl",
++                        "user": false,
++                        "write": "setSource"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sourceType",
++                        "read": "sourceType",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QTextDocument::ResourceType",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "searchPaths",
++                        "read": "searchPaths",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QStringList",
++                        "user": false,
++                        "write": "setSearchPaths"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "openExternalLinks",
++                        "read": "openExternalLinks",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setOpenExternalLinks"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "openLinks",
++                        "read": "openLinks",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setOpenLinks"
++                    }
++                ],
++                "qualifiedClassName": "QTextBrowser",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "backwardAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "forwardAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "historyChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "sourceChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "highlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "highlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "anchorClicked",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "name",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "setSource",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "name",
++                                "type": "QUrl"
++                            },
++                            {
++                                "name": "type",
++                                "type": "QTextDocument::ResourceType"
++                            }
++                        ],
++                        "name": "setSource",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "backward",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "forward",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "home",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "reload",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_documentModified",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_activateAnchor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_highlightLink",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QTextEdit"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtextbrowser.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTabWidget",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TabPosition",
++                        "values": [
++                            "North",
++                            "South",
++                            "West",
++                            "East"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "TabShape",
++                        "values": [
++                            "Rounded",
++                            "Triangular"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabPosition",
++                        "read": "tabPosition",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "TabPosition",
++                        "user": false,
++                        "write": "setTabPosition"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabShape",
++                        "read": "tabShape",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "TabShape",
++                        "user": false,
++                        "write": "setTabShape"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentIndex",
++                        "notify": "currentChanged",
++                        "read": "currentIndex",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentIndex"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "count",
++                        "read": "count",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconSize",
++                        "read": "iconSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setIconSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "elideMode",
++                        "read": "elideMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextElideMode",
++                        "user": false,
++                        "write": "setElideMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "usesScrollButtons",
++                        "read": "usesScrollButtons",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUsesScrollButtons"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "documentMode",
++                        "read": "documentMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDocumentMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabsClosable",
++                        "read": "tabsClosable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTabsClosable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "movable",
++                        "read": "isMovable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setMovable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabBarAutoHide",
++                        "read": "tabBarAutoHide",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTabBarAutoHide"
++                    }
++                ],
++                "qualifiedClassName": "QTabWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "tabCloseRequested",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "tabBarClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "tabBarDoubleClicked",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "widget",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "setCurrentWidget",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_showTab",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_removeTab",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_tabMoved",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtabwidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QToolBar",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "movable",
++                        "notify": "movableChanged",
++                        "read": "isMovable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setMovable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "allowedAreas",
++                        "notify": "allowedAreasChanged",
++                        "read": "allowedAreas",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ToolBarAreas",
++                        "user": false,
++                        "write": "setAllowedAreas"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "orientation",
++                        "notify": "orientationChanged",
++                        "read": "orientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Orientation",
++                        "user": false,
++                        "write": "setOrientation"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconSize",
++                        "notify": "iconSizeChanged",
++                        "read": "iconSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setIconSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "toolButtonStyle",
++                        "notify": "toolButtonStyleChanged",
++                        "read": "toolButtonStyle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ToolButtonStyle",
++                        "user": false,
++                        "write": "setToolButtonStyle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "floating",
++                        "read": "isFloating",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "floatable",
++                        "read": "isFloatable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFloatable"
++                    }
++                ],
++                "qualifiedClassName": "QToolBar",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "actionTriggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "movable",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "movableChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "allowedAreas",
++                                "type": "Qt::ToolBarAreas"
++                            }
++                        ],
++                        "name": "allowedAreasChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "orientation",
++                                "type": "Qt::Orientation"
++                            }
++                        ],
++                        "name": "orientationChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "iconSize",
++                                "type": "QSize"
++                            }
++                        ],
++                        "name": "iconSizeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "toolButtonStyle",
++                                "type": "Qt::ToolButtonStyle"
++                            }
++                        ],
++                        "name": "toolButtonStyleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "topLevel",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "topLevelChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visible",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "visibilityChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "iconSize",
++                                "type": "QSize"
++                            }
++                        ],
++                        "name": "setIconSize",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "toolButtonStyle",
++                                "type": "Qt::ToolButtonStyle"
++                            }
++                        ],
++                        "name": "setToolButtonStyle",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "_q_toggleView",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QSize"
++                            }
++                        ],
++                        "name": "_q_updateIconSize",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "Qt::ToolButtonStyle"
++                            }
++                        ],
++                        "name": "_q_updateToolButtonStyle",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtoolbar.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QToolBarLayout",
++                "object": true,
++                "qualifiedClassName": "QToolBarLayout",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setExpanded",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QLayout"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtoolbarlayout_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QToolBarSeparator",
++                "object": true,
++                "qualifiedClassName": "QToolBarSeparator",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "orientation",
++                                "type": "Qt::Orientation"
++                            }
++                        ],
++                        "name": "setOrientation",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtoolbarseparator_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QToolBox",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentIndex",
++                        "notify": "currentChanged",
++                        "read": "currentIndex",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentIndex"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "count",
++                        "read": "count",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QToolBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "widget",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "setCurrentWidget",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_buttonClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "_q_widgetDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFrame"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtoolbox.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QToolButton",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ToolButtonPopupMode",
++                        "values": [
++                            "DelayedPopup",
++                            "MenuButtonPopup",
++                            "InstantPopup"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "popupMode",
++                        "read": "popupMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ToolButtonPopupMode",
++                        "user": false,
++                        "write": "setPopupMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "toolButtonStyle",
++                        "read": "toolButtonStyle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ToolButtonStyle",
++                        "user": false,
++                        "write": "setToolButtonStyle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoRaise",
++                        "read": "autoRaise",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoRaise"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "arrowType",
++                        "read": "arrowType",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ArrowType",
++                        "user": false,
++                        "write": "setArrowType"
++                    }
++                ],
++                "qualifiedClassName": "QToolButton",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "triggered",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "showMenu",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "style",
++                                "type": "Qt::ToolButtonStyle"
++                            }
++                        ],
++                        "name": "setToolButtonStyle",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "setDefaultAction",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_buttonPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_buttonReleased",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateButtonDown",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "_q_menuTriggered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_actionTriggered",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtoolbutton.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QToolBarExtension",
++                "object": true,
++                "qualifiedClassName": "QToolBarExtension",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "o",
++                                "type": "Qt::Orientation"
++                            }
++                        ],
++                        "name": "setOrientation",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QToolButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtoolbarextension_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWidgetTextControl",
++                "methods": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "type",
++                                "type": "int"
++                            },
++                            {
++                                "name": "name",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "loadResource",
++                        "returnType": "QVariant"
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "html",
++                        "notify": "textChanged",
++                        "read": "toHtml",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": true,
++                        "write": "setHtml"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "overwriteMode",
++                        "read": "overwriteMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setOverwriteMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "acceptRichText",
++                        "read": "acceptRichText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAcceptRichText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cursorWidth",
++                        "read": "cursorWidth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCursorWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textInteractionFlags",
++                        "read": "textInteractionFlags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextInteractionFlags",
++                        "user": false,
++                        "write": "setTextInteractionFlags"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "openExternalLinks",
++                        "read": "openExternalLinks",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setOpenExternalLinks"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "ignoreUnusedNavigationEvents",
++                        "read": "ignoreUnusedNavigationEvents",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setIgnoreUnusedNavigationEvents"
++                    }
++                ],
++                "qualifiedClassName": "QWidgetTextControl",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "undoAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "redoAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "format",
++                                "type": "QTextCharFormat"
++                            }
++                        ],
++                        "name": "currentCharFormatChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "b",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "copyAvailable",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "cursorPositionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "updateRequest",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "updateRequest",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QSizeF"
++                            }
++                        ],
++                        "name": "documentSizeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newBlockCount",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "blockCountChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "visibilityRequest",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "microFocusChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "link",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "linkActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "linkHovered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "block",
++                                "type": "QTextBlock"
++                            }
++                        ],
++                        "name": "blockMarkerHovered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "m",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "modificationChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setPlainText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setMarkdown",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setHtml",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "cut",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "copy",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "mode",
++                                "type": "QClipboard::Mode"
++                            }
++                        ],
++                        "name": "paste",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "paste",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "undo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "redo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectAll",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "insertPlainText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "insertHtml",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "append",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "html",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "appendHtml",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "appendPlainText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "adjustSize",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateCurrentCharFormatAndSelection",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QTextCursor"
++                            }
++                        ],
++                        "name": "_q_emitCursorPosChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_deleteSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_copyLink",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QTextBlock"
++                            }
++                        ],
++                        "name": "_q_updateBlock",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_documentLayoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_contentsChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QInputControl"
++                    }
++                ]
++            },
++            {
++                "className": "QUnicodeControlCharacterMenu",
++                "object": true,
++                "qualifiedClassName": "QUnicodeControlCharacterMenu",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "menuActionTriggered",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QMenu"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwidgettextcontrol_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QColorDialog",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ColorDialogOption",
++                        "values": [
++                            "ShowAlphaChannel",
++                            "NoButtons",
++                            "DontUseNativeDialog"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentColor",
++                        "notify": "currentColorChanged",
++                        "read": "currentColor",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QColor",
++                        "user": false,
++                        "write": "setCurrentColor"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "options",
++                        "read": "options",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ColorDialogOptions",
++                        "user": false,
++                        "write": "setOptions"
++                    }
++                ],
++                "qualifiedClassName": "QColorDialog",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "color",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "currentColorChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "color",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "colorSelected",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_addCustom",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "h",
++                                "type": "int"
++                            },
++                            {
++                                "name": "s",
++                                "type": "int"
++                            },
++                            {
++                                "name": "v",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_newHsv",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "rgb",
++                                "type": "QRgb"
++                            }
++                        ],
++                        "name": "_q_newColorTypedIn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_nextCustom",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_newCustom",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_newStandard",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_pickScreenColor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateColorPicking",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDialog"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcolordialog.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDialog",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizeGripEnabled",
++                        "read": "isSizeGripEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSizeGripEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "modal",
++                        "read": "isModal",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setModal"
++                    }
++                ],
++                "qualifiedClassName": "QDialog",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "result",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "finished",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "accepted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "rejected",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "open",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "exec",
++                        "returnType": "int"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "done",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "accept",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "reject",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "showExtension",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdialog.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QErrorMessage",
++                "object": true,
++                "qualifiedClassName": "QErrorMessage",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "message",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "message",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "type",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDialog"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qerrormessage.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFileDialog",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ViewMode",
++                        "values": [
++                            "Detail",
++                            "List"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "FileMode",
++                        "values": [
++                            "AnyFile",
++                            "ExistingFile",
++                            "Directory",
++                            "ExistingFiles",
++                            "DirectoryOnly"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "AcceptMode",
++                        "values": [
++                            "AcceptOpen",
++                            "AcceptSave"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Option",
++                        "values": [
++                            "ShowDirsOnly",
++                            "DontResolveSymlinks",
++                            "DontConfirmOverwrite",
++                            "DontUseSheet",
++                            "DontUseNativeDialog",
++                            "ReadOnly",
++                            "HideNameFilterDetails",
++                            "DontUseCustomDirectoryIcons"
++                        ]
++                    },
++                    {
++                        "alias": "Option",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "Options",
++                        "values": [
++                            "ShowDirsOnly",
++                            "DontResolveSymlinks",
++                            "DontConfirmOverwrite",
++                            "DontUseSheet",
++                            "DontUseNativeDialog",
++                            "ReadOnly",
++                            "HideNameFilterDetails",
++                            "DontUseCustomDirectoryIcons"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "viewMode",
++                        "read": "viewMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ViewMode",
++                        "user": false,
++                        "write": "setViewMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "fileMode",
++                        "read": "fileMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "FileMode",
++                        "user": false,
++                        "write": "setFileMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "acceptMode",
++                        "read": "acceptMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "AcceptMode",
++                        "user": false,
++                        "write": "setAcceptMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "defaultSuffix",
++                        "read": "defaultSuffix",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setDefaultSuffix"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "readOnly",
++                        "read": "isReadOnly",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setReadOnly"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "confirmOverwrite",
++                        "read": "confirmOverwrite",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setConfirmOverwrite"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "resolveSymlinks",
++                        "read": "resolveSymlinks",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setResolveSymlinks"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "nameFilterDetailsVisible",
++                        "read": "isNameFilterDetailsVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setNameFilterDetailsVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "options",
++                        "read": "options",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Options",
++                        "user": false,
++                        "write": "setOptions"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "supportedSchemes",
++                        "read": "supportedSchemes",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QStringList",
++                        "user": false,
++                        "write": "setSupportedSchemes"
++                    }
++                ],
++                "qualifiedClassName": "QFileDialog",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "file",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "fileSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "files",
++                                "type": "QStringList"
++                            }
++                        ],
++                        "name": "filesSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "directory",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "directoryEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "url",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "urlSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "urls",
++                                "type": "QList<QUrl>"
++                            }
++                        ],
++                        "name": "urlsSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "url",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "currentUrlChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "directory",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "directoryUrlEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "filter",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "filterSelected",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_pathChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_navigateBackward",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_navigateForward",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_navigateToParent",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_createDirectory",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_showListView",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_showDetailsView",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QPoint"
++                            }
++                        ],
++                        "name": "_q_showContextMenu",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_renameCurrent",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_deleteCurrent",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_showHidden",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateOkButton",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_enterDirectory",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "_q_emitUrlSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QList<QUrl>"
++                            }
++                        ],
++                        "name": "_q_emitUrlsSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "_q_nativeCurrentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "_q_nativeEnterDirectory",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_goToDirectory",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_useNameFilter",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "url",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "_q_goToUrl",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_goHome",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "_q_showHeader",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_autoCompleteFileName",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_rowsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "oldName",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "newName",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_fileRenamed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDialog"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfiledialog.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QUrlModel",
++                "object": true,
++                "qualifiedClassName": "QUrlModel",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "topLeft",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "bottomRight",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "dataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "layoutChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QStandardItemModel"
++                    }
++                ]
++            },
++            {
++                "className": "QSidebar",
++                "object": true,
++                "qualifiedClassName": "QSidebar",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "url",
++                                "type": "QUrl"
++                            }
++                        ],
++                        "name": "goToUrl",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "position",
++                                "type": "QPoint"
++                            }
++                        ],
++                        "name": "showContextMenu",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "removeEntry",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QListView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsidebar_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFileSystemModel",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Option",
++                        "values": [
++                            "DontWatchForChanges",
++                            "DontResolveSymlinks",
++                            "DontUseCustomDirectoryIcons"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "resolveSymlinks",
++                        "read": "resolveSymlinks",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setResolveSymlinks"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "readOnly",
++                        "read": "isReadOnly",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setReadOnly"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "nameFilterDisables",
++                        "read": "nameFilterDisables",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setNameFilterDisables"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "options",
++                        "read": "options",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Options",
++                        "user": false,
++                        "write": "setOptions"
++                    }
++                ],
++                "qualifiedClassName": "QFileSystemModel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newPath",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "rootPathChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "oldName",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "newName",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "fileRenamed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "directoryLoaded",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "directory",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "list",
++                                "type": "QStringList"
++                            }
++                        ],
++                        "name": "_q_directoryChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_performDelayedSort",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            },
++                            {
++                                "type": "QVector<QPair<QString,QFileInfo> >"
++                            }
++                        ],
++                        "name": "_q_fileSystemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "fileName",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "resolvedName",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_resolvedName",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfilesystemmodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFileInfoGatherer",
++                "object": true,
++                "qualifiedClassName": "QFileInfoGatherer",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "directory",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "updates",
++                                "type": "QVector<QPair<QString,QFileInfo> >"
++                            }
++                        ],
++                        "name": "updates",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "directory",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "listOfFiles",
++                                "type": "QStringList"
++                            }
++                        ],
++                        "name": "newListOfFiles",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "fileName",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "resolvedName",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "nameResolved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "directoryLoaded",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "directoryPath",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "list",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "files",
++                                "type": "QStringList"
++                            }
++                        ],
++                        "name": "fetchExtendedInformation",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "path",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "updateFile",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "enable",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setResolveSymlinks",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "provider",
++                                "type": "QFileIconProvider*"
++                            }
++                        ],
++                        "name": "setIconProvider",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "driveAdded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "driveRemoved",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QThread"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfileinfogatherer_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFontDialog",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "FontDialogOption",
++                        "values": [
++                            "NoButtons",
++                            "DontUseNativeDialog",
++                            "ScalableFonts",
++                            "NonScalableFonts",
++                            "MonospacedFonts",
++                            "ProportionalFonts"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentFont",
++                        "notify": "currentFontChanged",
++                        "read": "currentFont",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QFont",
++                        "user": false,
++                        "write": "setCurrentFont"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "options",
++                        "read": "options",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "FontDialogOptions",
++                        "user": false,
++                        "write": "setOptions"
++                    }
++                ],
++                "qualifiedClassName": "QFontDialog",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "font",
++                                "type": "QFont"
++                            }
++                        ],
++                        "name": "currentFontChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "font",
++                                "type": "QFont"
++                            }
++                        ],
++                        "name": "fontSelected",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_sizeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_familyHighlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_writingSystemHighlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_styleHighlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sizeHighlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateSample",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDialog"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfontdialog.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QInputDialog",
++                "object": true,
++                "qualifiedClassName": "QInputDialog",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textValueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "textValueSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "intValueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "intValueSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "double"
++                            }
++                        ],
++                        "name": "doubleValueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "double"
++                            }
++                        ],
++                        "name": "doubleValueSelected",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_textChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_plainTextEditTextChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_currentRowChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDialog"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qinputdialog.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMessageBox",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Icon",
++                        "values": [
++                            "NoIcon",
++                            "Information",
++                            "Warning",
++                            "Critical",
++                            "Question"
++                        ]
++                    },
++                    {
++                        "alias": "StandardButton",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "StandardButtons",
++                        "values": [
++                            "NoButton",
++                            "Ok",
++                            "Save",
++                            "SaveAll",
++                            "Open",
++                            "Yes",
++                            "YesToAll",
++                            "No",
++                            "NoToAll",
++                            "Abort",
++                            "Retry",
++                            "Ignore",
++                            "Close",
++                            "Cancel",
++                            "Discard",
++                            "Help",
++                            "Apply",
++                            "Reset",
++                            "RestoreDefaults",
++                            "FirstButton",
++                            "LastButton",
++                            "YesAll",
++                            "NoAll",
++                            "Default",
++                            "Escape",
++                            "FlagMask",
++                            "ButtonMask"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "text",
++                        "read": "text",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "icon",
++                        "read": "icon",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Icon",
++                        "user": false,
++                        "write": "setIcon"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconPixmap",
++                        "read": "iconPixmap",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPixmap",
++                        "user": false,
++                        "write": "setIconPixmap"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textFormat",
++                        "read": "textFormat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextFormat",
++                        "user": false,
++                        "write": "setTextFormat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "standardButtons",
++                        "read": "standardButtons",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "StandardButtons",
++                        "user": false,
++                        "write": "setStandardButtons"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "detailedText",
++                        "read": "detailedText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setDetailedText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "informativeText",
++                        "read": "informativeText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setInformativeText"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textInteractionFlags",
++                        "read": "textInteractionFlags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextInteractionFlags",
++                        "user": false,
++                        "write": "setTextInteractionFlags"
++                    }
++                ],
++                "qualifiedClassName": "QMessageBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "button",
++                                "type": "QAbstractButton*"
++                            }
++                        ],
++                        "name": "buttonClicked",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QAbstractButton*"
++                            }
++                        ],
++                        "name": "_q_buttonClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QPlatformDialogHelper::StandardButton"
++                            },
++                            {
++                                "type": "QPlatformDialogHelper::ButtonRole"
++                            }
++                        ],
++                        "name": "_q_clicked",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDialog"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmessagebox.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QProgressDialog",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wasCanceled",
++                        "read": "wasCanceled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimum",
++                        "read": "minimum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximum",
++                        "read": "maximum",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximum"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "value",
++                        "read": "value",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setValue"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoReset",
++                        "read": "autoReset",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoReset"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoClose",
++                        "read": "autoClose",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoClose"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumDuration",
++                        "read": "minimumDuration",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimumDuration"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "labelText",
++                        "read": "labelText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setLabelText"
++                    }
++                ],
++                "qualifiedClassName": "QProgressDialog",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "canceled",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "cancel",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "reset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "maximum",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setMaximum",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "minimum",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setMinimum",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "minimum",
++                                "type": "int"
++                            },
++                            {
++                                "name": "maximum",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setRange",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "progress",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setValue",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setLabelText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setCancelButtonText",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "ms",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setMinimumDuration",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "name": "forceShow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_disconnectOnClose",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDialog"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qprogressdialog.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWizard",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "WizardStyle",
++                        "values": [
++                            "ClassicStyle",
++                            "ModernStyle",
++                            "MacStyle",
++                            "AeroStyle",
++                            "NStyles"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "WizardOption",
++                        "values": [
++                            "IndependentPages",
++                            "IgnoreSubTitles",
++                            "ExtendedWatermarkPixmap",
++                            "NoDefaultButton",
++                            "NoBackButtonOnStartPage",
++                            "NoBackButtonOnLastPage",
++                            "DisabledBackButtonOnLastPage",
++                            "HaveNextButtonOnLastPage",
++                            "HaveFinishButtonOnEarlyPages",
++                            "NoCancelButton",
++                            "CancelButtonOnLeft",
++                            "HaveHelpButton",
++                            "HelpButtonOnRight",
++                            "HaveCustomButton1",
++                            "HaveCustomButton2",
++                            "HaveCustomButton3",
++                            "NoCancelButtonOnLastPage"
++                        ]
++                    },
++                    {
++                        "alias": "WizardOption",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "WizardOptions",
++                        "values": [
++                            "IndependentPages",
++                            "IgnoreSubTitles",
++                            "ExtendedWatermarkPixmap",
++                            "NoDefaultButton",
++                            "NoBackButtonOnStartPage",
++                            "NoBackButtonOnLastPage",
++                            "DisabledBackButtonOnLastPage",
++                            "HaveNextButtonOnLastPage",
++                            "HaveFinishButtonOnEarlyPages",
++                            "NoCancelButton",
++                            "CancelButtonOnLeft",
++                            "HaveHelpButton",
++                            "HelpButtonOnRight",
++                            "HaveCustomButton1",
++                            "HaveCustomButton2",
++                            "HaveCustomButton3",
++                            "NoCancelButtonOnLastPage"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wizardStyle",
++                        "read": "wizardStyle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "WizardStyle",
++                        "user": false,
++                        "write": "setWizardStyle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "options",
++                        "read": "options",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "WizardOptions",
++                        "user": false,
++                        "write": "setOptions"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "titleFormat",
++                        "read": "titleFormat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextFormat",
++                        "user": false,
++                        "write": "setTitleFormat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "subTitleFormat",
++                        "read": "subTitleFormat",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextFormat",
++                        "user": false,
++                        "write": "setSubTitleFormat"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "startId",
++                        "read": "startId",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setStartId"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentId",
++                        "notify": "currentIdChanged",
++                        "read": "currentId",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QWizard",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "id",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentIdChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "helpRequested",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "which",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "customButtonClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "id",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "pageAdded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "id",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "pageRemoved",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "back",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "next",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "restart",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_emitCustomButtonClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateButtonStates",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "_q_handleFieldObjectDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDialog"
++                    }
++                ]
++            },
++            {
++                "className": "QWizardPage",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "title",
++                        "read": "title",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setTitle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "subTitle",
++                        "read": "subTitle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setSubTitle"
++                    }
++                ],
++                "qualifiedClassName": "QWizardPage",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "completeChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "_q_maybeEmitCompleteChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateCachedCompleteState",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwizard.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractItemView",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SelectionMode",
++                        "values": [
++                            "NoSelection",
++                            "SingleSelection",
++                            "MultiSelection",
++                            "ExtendedSelection",
++                            "ContiguousSelection"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SelectionBehavior",
++                        "values": [
++                            "SelectItems",
++                            "SelectRows",
++                            "SelectColumns"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ScrollHint",
++                        "values": [
++                            "EnsureVisible",
++                            "PositionAtTop",
++                            "PositionAtBottom",
++                            "PositionAtCenter"
++                        ]
++                    },
++                    {
++                        "alias": "EditTrigger",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "EditTriggers",
++                        "values": [
++                            "NoEditTriggers",
++                            "CurrentChanged",
++                            "DoubleClicked",
++                            "SelectedClicked",
++                            "EditKeyPressed",
++                            "AnyKeyPressed",
++                            "AllEditTriggers"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ScrollMode",
++                        "values": [
++                            "ScrollPerItem",
++                            "ScrollPerPixel"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "DragDropMode",
++                        "values": [
++                            "NoDragDrop",
++                            "DragOnly",
++                            "DropOnly",
++                            "DragDrop",
++                            "InternalMove"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoScroll",
++                        "read": "hasAutoScroll",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoScroll"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoScrollMargin",
++                        "read": "autoScrollMargin",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setAutoScrollMargin"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "editTriggers",
++                        "read": "editTriggers",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "EditTriggers",
++                        "user": false,
++                        "write": "setEditTriggers"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "tabKeyNavigation",
++                        "read": "tabKeyNavigation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setTabKeyNavigation"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "showDropIndicator",
++                        "read": "showDropIndicator",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDropIndicatorShown"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dragEnabled",
++                        "read": "dragEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDragEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dragDropOverwriteMode",
++                        "read": "dragDropOverwriteMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setDragDropOverwriteMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dragDropMode",
++                        "read": "dragDropMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "DragDropMode",
++                        "user": false,
++                        "write": "setDragDropMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "defaultDropAction",
++                        "read": "defaultDropAction",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::DropAction",
++                        "user": false,
++                        "write": "setDefaultDropAction"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "alternatingRowColors",
++                        "read": "alternatingRowColors",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAlternatingRowColors"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectionMode",
++                        "read": "selectionMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "SelectionMode",
++                        "user": false,
++                        "write": "setSelectionMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectionBehavior",
++                        "read": "selectionBehavior",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "SelectionBehavior",
++                        "user": false,
++                        "write": "setSelectionBehavior"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "iconSize",
++                        "notify": "iconSizeChanged",
++                        "read": "iconSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setIconSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "textElideMode",
++                        "read": "textElideMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::TextElideMode",
++                        "user": false,
++                        "write": "setTextElideMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "verticalScrollMode",
++                        "read": "verticalScrollMode",
++                        "required": false,
++                        "reset": "resetVerticalScrollMode()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ScrollMode",
++                        "user": false,
++                        "write": "setVerticalScrollMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "horizontalScrollMode",
++                        "read": "horizontalScrollMode",
++                        "required": false,
++                        "reset": "resetHorizontalScrollMode()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ScrollMode",
++                        "user": false,
++                        "write": "setHorizontalScrollMode"
++                    }
++                ],
++                "qualifiedClassName": "QAbstractItemView",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "pressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "doubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "entered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "viewportEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "size",
++                                "type": "QSize"
++                            }
++                        ],
++                        "name": "iconSizeChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "reset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "setRootIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "doItemsLayout",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectAll",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "edit",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clearSelection",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "setCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "scrollToTop",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "scrollToBottom",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "update",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "topLeft",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "bottomRight",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "roles",
++                                "type": "QVector<int>"
++                            }
++                        ],
++                        "name": "dataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "topLeft",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "bottomRight",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "dataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "start",
++                                "type": "int"
++                            },
++                            {
++                                "name": "end",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "selected",
++                                "type": "QItemSelection"
++                            },
++                            {
++                                "name": "deselected",
++                                "type": "QItemSelection"
++                            }
++                        ],
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "current",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "previous",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "name": "updateEditorData",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "name": "updateEditorGeometries",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "name": "updateGeometries",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "verticalScrollbarAction",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "horizontalScrollbarAction",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "verticalScrollbarValueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "horizontalScrollbarValueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "editor",
++                                "type": "QWidget*"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemDelegate::EndEditHint"
++                            }
++                        ],
++                        "name": "closeEditor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "editor",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "commitData",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "editor",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "editorDestroyed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_columnsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_columnsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_columnsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_rowsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_rowsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_columnsMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_rowsMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_modelDestroyed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_layoutChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_headerDataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_scrollerStateChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractScrollArea"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractitemview.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QHeaderView",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ResizeMode",
++                        "values": [
++                            "Interactive",
++                            "Stretch",
++                            "Fixed",
++                            "ResizeToContents",
++                            "Custom"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "firstSectionMovable",
++                        "read": "isFirstSectionMovable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFirstSectionMovable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "showSortIndicator",
++                        "read": "isSortIndicatorShown",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSortIndicatorShown"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "highlightSections",
++                        "read": "highlightSections",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setHighlightSections"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "stretchLastSection",
++                        "read": "stretchLastSection",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setStretchLastSection"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cascadingSectionResizes",
++                        "read": "cascadingSectionResizes",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setCascadingSectionResizes"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "defaultSectionSize",
++                        "read": "defaultSectionSize",
++                        "required": false,
++                        "reset": "resetDefaultSectionSize()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setDefaultSectionSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumSectionSize",
++                        "read": "minimumSectionSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMinimumSectionSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumSectionSize",
++                        "read": "maximumSectionSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaximumSectionSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "defaultAlignment",
++                        "read": "defaultAlignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setDefaultAlignment"
++                    }
++                ],
++                "qualifiedClassName": "QHeaderView",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "logicalIndex",
++                                "type": "int"
++                            },
++                            {
++                                "name": "oldVisualIndex",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newVisualIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "logicalIndex",
++                                "type": "int"
++                            },
++                            {
++                                "name": "oldSize",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newSize",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionResized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "logicalIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "logicalIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "logicalIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "logicalIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionDoubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "oldCount",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newCount",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionCountChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "logicalIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionHandleDoubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "geometriesChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "logicalIndex",
++                                "type": "int"
++                            },
++                            {
++                                "name": "order",
++                                "type": "Qt::SortOrder"
++                            }
++                        ],
++                        "name": "sortIndicatorChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "offset",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setOffset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visualIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setOffsetToSectionPosition",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "setOffsetToLastSection",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "orientation",
++                                "type": "Qt::Orientation"
++                            },
++                            {
++                                "name": "logicalFirst",
++                                "type": "int"
++                            },
++                            {
++                                "name": "logicalLast",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "headerDataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "logicalIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "updateSection",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "name": "resizeSections",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "logicalFirst",
++                                "type": "int"
++                            },
++                            {
++                                "name": "logicalLast",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "logicalFirst",
++                                "type": "int"
++                            },
++                            {
++                                "name": "logicalLast",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sectionsAboutToBeRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "logicalFirst",
++                                "type": "int"
++                            },
++                            {
++                                "name": "logicalLast",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sectionsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "sourceParent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "logicalStart",
++                                "type": "int"
++                            },
++                            {
++                                "name": "logicalEnd",
++                                "type": "int"
++                            },
++                            {
++                                "name": "destinationParent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "logicalDestination",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sectionsAboutToBeMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "sourceParent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "logicalStart",
++                                "type": "int"
++                            },
++                            {
++                                "name": "logicalEnd",
++                                "type": "int"
++                            },
++                            {
++                                "name": "destinationParent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "logicalDestination",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_sectionsMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_sectionsAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            }
++                        ],
++                        "name": "_q_sectionsAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sectionsAboutToBeChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemModel::LayoutChangeHint"
++                            }
++                        ],
++                        "name": "_q_sectionsChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "parents",
++                                "type": "QList<QPersistentModelIndex>"
++                            }
++                        ],
++                        "name": "_q_sectionsChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sectionsChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qheaderview.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAbstractItemDelegate",
++                "object": true,
++                "qualifiedClassName": "QAbstractItemDelegate",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "editor",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "commitData",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "editor",
++                                "type": "QWidget*"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemDelegate::EndEditHint"
++                            }
++                        ],
++                        "name": "closeEditor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "editor",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "closeEditor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "sizeHintChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "_q_commitDataAndCloseEditor",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qabstractitemdelegate.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QItemDelegate",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "clipping",
++                        "read": "hasClipping",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setClipping"
++                    }
++                ],
++                "qualifiedClassName": "QItemDelegate",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemDelegate"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qitemdelegate.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QExpandingLineEdit",
++                "object": true,
++                "qualifiedClassName": "QExpandingLineEdit",
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "resizeToContents",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QLineEdit"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qitemeditorfactory_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QStyledItemDelegate",
++                "object": true,
++                "qualifiedClassName": "QStyledItemDelegate",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemDelegate"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qstyleditemdelegate.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QColumnViewGrip",
++                "object": true,
++                "qualifiedClassName": "QColumnViewGrip",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "offset",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "gripMoved",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcolumnviewgrip_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QColumnView",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "resizeGripsVisible",
++                        "read": "resizeGripsVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setResizeGripsVisible"
++                    }
++                ],
++                "qualifiedClassName": "QColumnView",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "updatePreviewWidget",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_gripMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_changeCurrentColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_clicked",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcolumnview.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDataWidgetMapper",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "SubmitPolicy",
++                        "values": [
++                            "AutoSubmit",
++                            "ManualSubmit"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentIndex",
++                        "notify": "currentIndexChanged",
++                        "read": "currentIndex",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCurrentIndex"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "orientation",
++                        "read": "orientation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Orientation",
++                        "user": false,
++                        "write": "setOrientation"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "submitPolicy",
++                        "read": "submitPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "SubmitPolicy",
++                        "user": false,
++                        "write": "setSubmitPolicy"
++                    }
++                ],
++                "qualifiedClassName": "QDataWidgetMapper",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentIndexChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "revert",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "submit",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "public",
++                        "name": "toFirst",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "toLast",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "toNext",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "toPrevious",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCurrentIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "setCurrentModelIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "QVector<int>"
++                            }
++                        ],
++                        "name": "_q_dataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "_q_commitData",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QWidget*"
++                            },
++                            {
++                                "type": "QAbstractItemDelegate::EndEditHint"
++                            }
++                        ],
++                        "name": "_q_closeEditor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_modelDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdatawidgetmapper.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDirModel",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "resolveSymlinks",
++                        "read": "resolveSymlinks",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setResolveSymlinks"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "readOnly",
++                        "read": "isReadOnly",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setReadOnly"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "lazyChildCount",
++                        "read": "lazyChildCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setLazyChildCount"
++                    }
++                ],
++                "qualifiedClassName": "QDirModel",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "refresh",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "refresh",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_refresh",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdirmodel.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QListView",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Movement",
++                        "values": [
++                            "Static",
++                            "Free",
++                            "Snap"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "Flow",
++                        "values": [
++                            "LeftToRight",
++                            "TopToBottom"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ResizeMode",
++                        "values": [
++                            "Fixed",
++                            "Adjust"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "LayoutMode",
++                        "values": [
++                            "SinglePass",
++                            "Batched"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ViewMode",
++                        "values": [
++                            "ListMode",
++                            "IconMode"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "movement",
++                        "read": "movement",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Movement",
++                        "user": false,
++                        "write": "setMovement"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "flow",
++                        "read": "flow",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Flow",
++                        "user": false,
++                        "write": "setFlow"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "isWrapping",
++                        "read": "isWrapping",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWrapping"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "resizeMode",
++                        "read": "resizeMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ResizeMode",
++                        "user": false,
++                        "write": "setResizeMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "layoutMode",
++                        "read": "layoutMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "LayoutMode",
++                        "user": false,
++                        "write": "setLayoutMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "spacing",
++                        "read": "spacing",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setSpacing"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "gridSize",
++                        "read": "gridSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSize",
++                        "user": false,
++                        "write": "setGridSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "viewMode",
++                        "read": "viewMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ViewMode",
++                        "user": false,
++                        "write": "setViewMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "modelColumn",
++                        "read": "modelColumn",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setModelColumn"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "uniformItemSizes",
++                        "read": "uniformItemSizes",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUniformItemSizes"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "batchSize",
++                        "read": "batchSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setBatchSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wordWrap",
++                        "read": "wordWrap",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWordWrap"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectionRectVisible",
++                        "read": "isSelectionRectVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSelectionRectVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "itemAlignment",
++                        "read": "itemAlignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setItemAlignment"
++                    }
++                ],
++                "qualifiedClassName": "QListView",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "indexes",
++                                "type": "QModelIndexList"
++                            }
++                        ],
++                        "name": "indexesMoved",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlistview.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QListWidget",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "count",
++                        "read": "count",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "currentRow",
++                        "notify": "currentRowChanged",
++                        "read": "currentRow",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": true,
++                        "write": "setCurrentRow"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sortingEnabled",
++                        "read": "isSortingEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSortingEnabled"
++                    }
++                ],
++                "qualifiedClassName": "QListWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QListWidgetItem*"
++                            }
++                        ],
++                        "name": "itemPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QListWidgetItem*"
++                            }
++                        ],
++                        "name": "itemClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QListWidgetItem*"
++                            }
++                        ],
++                        "name": "itemDoubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QListWidgetItem*"
++                            }
++                        ],
++                        "name": "itemActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QListWidgetItem*"
++                            }
++                        ],
++                        "name": "itemEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QListWidgetItem*"
++                            }
++                        ],
++                        "name": "itemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "current",
++                                "type": "QListWidgetItem*"
++                            },
++                            {
++                                "name": "previous",
++                                "type": "QListWidgetItem*"
++                            }
++                        ],
++                        "name": "currentItemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "currentText",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "currentTextChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "currentRow",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentRowChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "itemSelectionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "const QListWidgetItem*"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemView::ScrollHint"
++                            }
++                        ],
++                        "name": "scrollToItem",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "const QListWidgetItem*"
++                            }
++                        ],
++                        "name": "scrollToItem",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemDoubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "previous",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "current",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitCurrentItemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sort",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "topLeft",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "bottomRight",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_dataChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QListView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlistwidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QListModel",
++                "object": true,
++                "qualifiedClassName": "QListModel",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractListModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlistwidget_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTableView",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "showGrid",
++                        "read": "showGrid",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setShowGrid"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "gridStyle",
++                        "read": "gridStyle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::PenStyle",
++                        "user": false,
++                        "write": "setGridStyle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sortingEnabled",
++                        "read": "isSortingEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSortingEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wordWrap",
++                        "read": "wordWrap",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWordWrap"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cornerButtonEnabled",
++                        "read": "isCornerButtonEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setCornerButtonEnabled"
++                    }
++                ],
++                "qualifiedClassName": "QTableView",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "selectRow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "selectColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "hideRow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "hideColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "showRow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "showColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "resizeRowToContents",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resizeRowsToContents",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "resizeColumnToContents",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resizeColumnsToContents",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sortByColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "order",
++                                "type": "Qt::SortOrder"
++                            }
++                        ],
++                        "name": "sortByColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "show",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setShowGrid",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "oldIndex",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "oldIndex",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newIndex",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "oldHeight",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newHeight",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowResized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "oldWidth",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newWidth",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnResized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "oldCount",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newCount",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowCountChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "oldCount",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newCount",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnCountChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_selectRow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_selectColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_updateSpanInsertedRows",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_updateSpanInsertedColumns",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_updateSpanRemovedRows",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "type": "int"
++                            },
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "_q_updateSpanRemovedColumns",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "order",
++                                "type": "Qt::SortOrder"
++                            }
++                        ],
++                        "name": "_q_sortIndicatorChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtableview.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTableWidget",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "rowCount",
++                        "read": "rowCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setRowCount"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "columnCount",
++                        "read": "columnCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setColumnCount"
++                    }
++                ],
++                "qualifiedClassName": "QTableWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTableWidgetItem*"
++                            }
++                        ],
++                        "name": "itemPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTableWidgetItem*"
++                            }
++                        ],
++                        "name": "itemClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTableWidgetItem*"
++                            }
++                        ],
++                        "name": "itemDoubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTableWidgetItem*"
++                            }
++                        ],
++                        "name": "itemActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTableWidgetItem*"
++                            }
++                        ],
++                        "name": "itemEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTableWidgetItem*"
++                            }
++                        ],
++                        "name": "itemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "current",
++                                "type": "QTableWidgetItem*"
++                            },
++                            {
++                                "name": "previous",
++                                "type": "QTableWidgetItem*"
++                            }
++                        ],
++                        "name": "currentItemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "itemSelectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "cellPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "cellClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "cellDoubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "cellActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "cellEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "cellChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "currentRow",
++                                "type": "int"
++                            },
++                            {
++                                "name": "currentColumn",
++                                "type": "int"
++                            },
++                            {
++                                "name": "previousRow",
++                                "type": "int"
++                            },
++                            {
++                                "name": "previousColumn",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentCellChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "const QTableWidgetItem*"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemView::ScrollHint"
++                            }
++                        ],
++                        "name": "scrollToItem",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "const QTableWidgetItem*"
++                            }
++                        ],
++                        "name": "scrollToItem",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "insertRow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "insertColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "removeRow",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "removeColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clearContents",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemDoubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "previous",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "current",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitCurrentItemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sort",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "topLeft",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "bottomRight",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_dataChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QTableView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtablewidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTableWidgetMimeData",
++                "object": true,
++                "qualifiedClassName": "QTableWidgetMimeData",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QMimeData"
++                    }
++                ]
++            },
++            {
++                "className": "QTableModel",
++                "object": true,
++                "qualifiedClassName": "QTableModel",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTableModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtablewidget_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTreeView",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoExpandDelay",
++                        "read": "autoExpandDelay",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setAutoExpandDelay"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "indentation",
++                        "read": "indentation",
++                        "required": false,
++                        "reset": "resetIndentation()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setIndentation"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "rootIsDecorated",
++                        "read": "rootIsDecorated",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setRootIsDecorated"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "uniformRowHeights",
++                        "read": "uniformRowHeights",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setUniformRowHeights"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "itemsExpandable",
++                        "read": "itemsExpandable",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setItemsExpandable"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sortingEnabled",
++                        "read": "isSortingEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSortingEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "animated",
++                        "read": "isAnimated",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAnimated"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "allColumnsShowFocus",
++                        "read": "allColumnsShowFocus",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAllColumnsShowFocus"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wordWrap",
++                        "read": "wordWrap",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWordWrap"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "headerHidden",
++                        "read": "isHeaderHidden",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setHeaderHidden"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "expandsOnDoubleClick",
++                        "read": "expandsOnDoubleClick",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setExpandsOnDoubleClick"
++                    }
++                ],
++                "qualifiedClassName": "QTreeView",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "expanded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "collapsed",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "hideColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "showColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "expand",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "collapse",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "resizeColumnToContents",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "sortByColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "order",
++                                "type": "Qt::SortOrder"
++                            }
++                        ],
++                        "name": "sortByColumn",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "expandAll",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "depth",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "expandRecursively",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "expandRecursively",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "collapseAll",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "depth",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "expandToDepth",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "oldSize",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newSize",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnResized",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "oldCount",
++                                "type": "int"
++                            },
++                            {
++                                "name": "newCount",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "columnCountChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "name": "columnMoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "name": "reexpand",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "parent",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "first",
++                                "type": "int"
++                            },
++                            {
++                                "name": "last",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "rowsRemoved",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "value",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "verticalScrollbarValueChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_endAnimatedOperation",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_modelAboutToBeReset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "column",
++                                "type": "int"
++                            },
++                            {
++                                "name": "order",
++                                "type": "Qt::SortOrder"
++                            }
++                        ],
++                        "name": "_q_sortIndicatorChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtreeview.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTreeWidget",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "columnCount",
++                        "read": "columnCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setColumnCount"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "topLevelItemCount",
++                        "read": "topLevelItemCount",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QTreeWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTreeWidgetItem*"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "itemPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTreeWidgetItem*"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "itemClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTreeWidgetItem*"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "itemDoubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTreeWidgetItem*"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "itemActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTreeWidgetItem*"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "itemEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTreeWidgetItem*"
++                            },
++                            {
++                                "name": "column",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "itemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTreeWidgetItem*"
++                            }
++                        ],
++                        "name": "itemExpanded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "QTreeWidgetItem*"
++                            }
++                        ],
++                        "name": "itemCollapsed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "current",
++                                "type": "QTreeWidgetItem*"
++                            },
++                            {
++                                "name": "previous",
++                                "type": "QTreeWidgetItem*"
++                            }
++                        ],
++                        "name": "currentItemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "itemSelectionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "const QTreeWidgetItem*"
++                            },
++                            {
++                                "name": "hint",
++                                "type": "QAbstractItemView::ScrollHint"
++                            }
++                        ],
++                        "name": "scrollToItem",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "const QTreeWidgetItem*"
++                            }
++                        ],
++                        "name": "scrollToItem",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "const QTreeWidgetItem*"
++                            }
++                        ],
++                        "name": "expandItem",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "item",
++                                "type": "const QTreeWidgetItem*"
++                            }
++                        ],
++                        "name": "collapseItem",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemPressed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemDoubleClicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemEntered",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemExpanded",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitItemCollapsed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "previous",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "current",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_emitCurrentItemChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_sort",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "topLeft",
++                                "type": "QModelIndex"
++                            },
++                            {
++                                "name": "bottomRight",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_dataChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "selected",
++                                "type": "QItemSelection"
++                            },
++                            {
++                                "name": "deselected",
++                                "type": "QItemSelection"
++                            }
++                        ],
++                        "name": "_q_selectionChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QTreeView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtreewidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTreeModel",
++                "object": true,
++                "qualifiedClassName": "QTreeModel",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtreewidget_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "classInfos": [
++                    {
++                        "name": "DefaultProperty",
++                        "value": "children"
++                    }
++                ],
++                "className": "QGraphicsObject",
++                "interfaces": [
++                    [
++                        {
++                            "className": "QGraphicsItem",
++                            "id": "\"org.qt-project.Qt.QGraphicsItem\""
++                        }
++                    ]
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "parent",
++                        "notify": "parentChanged",
++                        "read": "parentObject",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QGraphicsObject*",
++                        "user": false,
++                        "write": "setParentItem"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "opacity",
++                        "notify": "opacityChanged",
++                        "read": "opacity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setOpacity"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "enabled",
++                        "notify": "enabledChanged",
++                        "read": "isEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "visible",
++                        "notify": "visibleChanged",
++                        "read": "isVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setVisible"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "pos",
++                        "read": "pos",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setPos"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "x",
++                        "notify": "xChanged",
++                        "read": "x",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setX"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "y",
++                        "notify": "yChanged",
++                        "read": "y",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setY"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "z",
++                        "notify": "zChanged",
++                        "read": "zValue",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setZValue"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "rotation",
++                        "notify": "rotationChanged",
++                        "read": "rotation",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setRotation"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "scale",
++                        "notify": "scaleChanged",
++                        "read": "scale",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setScale"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "transformOriginPoint",
++                        "read": "transformOriginPoint",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setTransformOriginPoint"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "effect",
++                        "read": "graphicsEffect",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QGraphicsEffect*",
++                        "user": false,
++                        "write": "setGraphicsEffect"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "children",
++                        "notify": "childrenChanged",
++                        "privateClass": "QGraphicsItem::d_func()",
++                        "read": "childrenList",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QDeclarativeListProperty<QGraphicsObject>",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "width",
++                        "notify": "widthChanged",
++                        "privateClass": "QGraphicsItem::d_func()",
++                        "read": "width",
++                        "required": false,
++                        "reset": "resetWidth()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setWidth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": true,
++                        "name": "height",
++                        "notify": "heightChanged",
++                        "privateClass": "QGraphicsItem::d_func()",
++                        "read": "height",
++                        "required": false,
++                        "reset": "resetHeight()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setHeight"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsObject",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "parentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "opacityChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "visibleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "enabledChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "xChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "yChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "zChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "rotationChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "scaleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "childrenChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "widthChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "heightChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "protected",
++                        "name": "updateMicroFocus",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QGraphicsItem"
++                    }
++                ]
++            },
++            {
++                "className": "QGraphicsTextItem",
++                "object": true,
++                "qualifiedClassName": "QGraphicsTextItem",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "linkActivated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "linkHovered",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QSizeF"
++                            }
++                        ],
++                        "name": "_q_updateBoundingRect",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "_q_update",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "_q_ensureVisible",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicsitem.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsProxyWidget",
++                "object": true,
++                "qualifiedClassName": "QGraphicsProxyWidget",
++                "slots": [
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "type": "const QWidget*"
++                            }
++                        ],
++                        "name": "newProxyWidget",
++                        "returnType": "QGraphicsProxyWidget*"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_removeWidgetSlot",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicsproxywidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsScene",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ItemIndexMethod",
++                        "values": [
++                            "BspTreeIndex",
++                            "NoIndex"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "backgroundBrush",
++                        "read": "backgroundBrush",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QBrush",
++                        "user": false,
++                        "write": "setBackgroundBrush"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "foregroundBrush",
++                        "read": "foregroundBrush",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QBrush",
++                        "user": false,
++                        "write": "setForegroundBrush"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "itemIndexMethod",
++                        "read": "itemIndexMethod",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ItemIndexMethod",
++                        "user": false,
++                        "write": "setItemIndexMethod"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sceneRect",
++                        "read": "sceneRect",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRectF",
++                        "user": false,
++                        "write": "setSceneRect"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "bspTreeDepth",
++                        "read": "bspTreeDepth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setBspTreeDepth"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "palette",
++                        "read": "palette",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPalette",
++                        "user": false,
++                        "write": "setPalette"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "font",
++                        "read": "font",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QFont",
++                        "user": false,
++                        "write": "setFont"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sortCacheEnabled",
++                        "read": "isSortCacheEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setSortCacheEnabled"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "stickyFocus",
++                        "read": "stickyFocus",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setStickyFocus"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumRenderSize",
++                        "read": "minimumRenderSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setMinimumRenderSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "focusOnTouch",
++                        "read": "focusOnTouch",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setFocusOnTouch"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsScene",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "region",
++                                "type": "QList<QRectF>"
++                            }
++                        ],
++                        "name": "changed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "sceneRectChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "selectionChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newFocus",
++                                "type": "QGraphicsItem*"
++                            },
++                            {
++                                "name": "oldFocus",
++                                "type": "QGraphicsItem*"
++                            },
++                            {
++                                "name": "reason",
++                                "type": "Qt::FocusReason"
++                            }
++                        ],
++                        "name": "focusItemChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "update",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "update",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            },
++                            {
++                                "name": "layers",
++                                "type": "SceneLayers"
++                            }
++                        ],
++                        "name": "invalidate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "invalidate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "invalidate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "advance",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clearSelection",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "clear",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "next",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "focusNextPrevChild",
++                        "returnType": "bool"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_emitUpdated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_polishItems",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_processDirtyItems",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateScenePosDescendants",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicsscene.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsSceneBspTreeIndex",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "bspTreeDepth",
++                        "read": "bspTreeDepth",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setBspTreeDepth"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsSceneBspTreeIndex",
++                "slots": [
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "updateSceneRect",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateSortCache",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_updateIndex",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsSceneIndex"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicsscenebsptreeindex_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsSceneIndex",
++                "object": true,
++                "qualifiedClassName": "QGraphicsSceneIndex",
++                "slots": [
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "updateSceneRect",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicssceneindex_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsSceneLinearIndex",
++                "object": true,
++                "qualifiedClassName": "QGraphicsSceneLinearIndex",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsSceneIndex"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicsscenelinearindex_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsTransform",
++                "object": true,
++                "qualifiedClassName": "QGraphicsTransform",
++                "slots": [
++                    {
++                        "access": "protected",
++                        "name": "update",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QGraphicsScale",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "origin",
++                        "notify": "originChanged",
++                        "read": "origin",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QVector3D",
++                        "user": false,
++                        "write": "setOrigin"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "xScale",
++                        "notify": "xScaleChanged",
++                        "read": "xScale",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setXScale"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "yScale",
++                        "notify": "yScaleChanged",
++                        "read": "yScale",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setYScale"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "zScale",
++                        "notify": "zScaleChanged",
++                        "read": "zScale",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setZScale"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsScale",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "originChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "xScaleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "yScaleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "zScaleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "scaleChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsTransform"
++                    }
++                ]
++            },
++            {
++                "className": "QGraphicsRotation",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "origin",
++                        "notify": "originChanged",
++                        "read": "origin",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QVector3D",
++                        "user": false,
++                        "write": "setOrigin"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "angle",
++                        "notify": "angleChanged",
++                        "read": "angle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setAngle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "axis",
++                        "notify": "axisChanged",
++                        "read": "axis",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QVector3D",
++                        "user": false,
++                        "write": "setAxis"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsRotation",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "originChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "angleChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "axisChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsTransform"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicstransform.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsView",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ViewportAnchor",
++                        "values": [
++                            "NoAnchor",
++                            "AnchorViewCenter",
++                            "AnchorUnderMouse"
++                        ]
++                    },
++                    {
++                        "alias": "CacheModeFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "CacheMode",
++                        "values": [
++                            "CacheNone",
++                            "CacheBackground"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "DragMode",
++                        "values": [
++                            "NoDrag",
++                            "ScrollHandDrag",
++                            "RubberBandDrag"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ViewportUpdateMode",
++                        "values": [
++                            "FullViewportUpdate",
++                            "MinimalViewportUpdate",
++                            "SmartViewportUpdate",
++                            "NoViewportUpdate",
++                            "BoundingRectViewportUpdate"
++                        ]
++                    },
++                    {
++                        "alias": "OptimizationFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "OptimizationFlags",
++                        "values": [
++                            "DontClipPainter",
++                            "DontSavePainterState",
++                            "DontAdjustForAntialiasing",
++                            "IndirectPainting"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "backgroundBrush",
++                        "read": "backgroundBrush",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QBrush",
++                        "user": false,
++                        "write": "setBackgroundBrush"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "foregroundBrush",
++                        "read": "foregroundBrush",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QBrush",
++                        "user": false,
++                        "write": "setForegroundBrush"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "interactive",
++                        "read": "isInteractive",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setInteractive"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sceneRect",
++                        "read": "sceneRect",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRectF",
++                        "user": false,
++                        "write": "setSceneRect"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "alignment",
++                        "read": "alignment",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::Alignment",
++                        "user": false,
++                        "write": "setAlignment"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "renderHints",
++                        "read": "renderHints",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPainter::RenderHints",
++                        "user": false,
++                        "write": "setRenderHints"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "dragMode",
++                        "read": "dragMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "DragMode",
++                        "user": false,
++                        "write": "setDragMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cacheMode",
++                        "read": "cacheMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "CacheMode",
++                        "user": false,
++                        "write": "setCacheMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "transformationAnchor",
++                        "read": "transformationAnchor",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ViewportAnchor",
++                        "user": false,
++                        "write": "setTransformationAnchor"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "resizeAnchor",
++                        "read": "resizeAnchor",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ViewportAnchor",
++                        "user": false,
++                        "write": "setResizeAnchor"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "viewportUpdateMode",
++                        "read": "viewportUpdateMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ViewportUpdateMode",
++                        "user": false,
++                        "write": "setViewportUpdateMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "rubberBandSelectionMode",
++                        "read": "rubberBandSelectionMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::ItemSelectionMode",
++                        "user": false,
++                        "write": "setRubberBandSelectionMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "optimizationFlags",
++                        "read": "optimizationFlags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "OptimizationFlags",
++                        "user": false,
++                        "write": "setOptimizationFlags"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsView",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "viewportRect",
++                                "type": "QRect"
++                            },
++                            {
++                                "name": "fromScenePoint",
++                                "type": "QPointF"
++                            },
++                            {
++                                "name": "toScenePoint",
++                                "type": "QPointF"
++                            }
++                        ],
++                        "name": "rubberBandChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rects",
++                                "type": "QList<QRectF>"
++                            }
++                        ],
++                        "name": "updateScene",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            },
++                            {
++                                "name": "layers",
++                                "type": "QGraphicsScene::SceneLayers"
++                            }
++                        ],
++                        "name": "invalidateScene",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "invalidateScene",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "invalidateScene",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            }
++                        ],
++                        "name": "updateSceneRect",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "protected",
++                        "arguments": [
++                            {
++                                "name": "widget",
++                                "type": "QWidget*"
++                            }
++                        ],
++                        "name": "setupViewport",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QCursor"
++                            }
++                        ],
++                        "name": "_q_setViewportCursor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_unsetViewportCursor",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractScrollArea"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicsview.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsWidget",
++                "interfaces": [
++                    [
++                        {
++                            "className": "QGraphicsItem",
++                            "id": "\"org.qt-project.Qt.QGraphicsItem\""
++                        }
++                    ],
++                    [
++                        {
++                            "className": "QGraphicsLayoutItem",
++                            "id": "\"org.qt-project.Qt.QGraphicsLayoutItem\""
++                        }
++                    ]
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "palette",
++                        "read": "palette",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPalette",
++                        "user": false,
++                        "write": "setPalette"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "font",
++                        "read": "font",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QFont",
++                        "user": false,
++                        "write": "setFont"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "layoutDirection",
++                        "read": "layoutDirection",
++                        "required": false,
++                        "reset": "unsetLayoutDirection()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::LayoutDirection",
++                        "user": false,
++                        "write": "setLayoutDirection"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "size",
++                        "notify": "geometryChanged",
++                        "read": "size",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizeF",
++                        "user": false,
++                        "write": "resize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "minimumSize",
++                        "read": "minimumSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizeF",
++                        "user": false,
++                        "write": "setMinimumSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "preferredSize",
++                        "read": "preferredSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizeF",
++                        "user": false,
++                        "write": "setPreferredSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maximumSize",
++                        "read": "maximumSize",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizeF",
++                        "user": false,
++                        "write": "setMaximumSize"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizePolicy",
++                        "read": "sizePolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizePolicy",
++                        "user": false,
++                        "write": "setSizePolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "focusPolicy",
++                        "read": "focusPolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::FocusPolicy",
++                        "user": false,
++                        "write": "setFocusPolicy"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowFlags",
++                        "read": "windowFlags",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::WindowFlags",
++                        "user": false,
++                        "write": "setWindowFlags"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "windowTitle",
++                        "read": "windowTitle",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setWindowTitle"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "geometry",
++                        "notify": "geometryChanged",
++                        "read": "geometry",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QRectF",
++                        "user": false,
++                        "write": "setGeometry"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "autoFillBackground",
++                        "read": "autoFillBackground",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setAutoFillBackground"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "layout",
++                        "notify": "layoutChanged",
++                        "read": "layout",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QGraphicsLayout*",
++                        "user": false,
++                        "write": "setLayout"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "geometryChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "layoutChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "close",
++                        "returnType": "bool"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsObject"
++                    },
++                    {
++                        "access": "public",
++                        "name": "QGraphicsLayoutItem"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicswidget.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsAnchor",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "spacing",
++                        "read": "spacing",
++                        "required": false,
++                        "reset": "unsetSpacing()",
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setSpacing"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "sizePolicy",
++                        "read": "sizePolicy",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QSizePolicy::Policy",
++                        "user": false,
++                        "write": "setSizePolicy"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsAnchor",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicsanchorlayout.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsItemAnimation",
++                "object": true,
++                "qualifiedClassName": "QGraphicsItemAnimation",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "x",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setStep",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "reset",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicsitemanimation.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QSystemTrayIcon",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "toolTip",
++                        "read": "toolTip",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setToolTip"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "icon",
++                        "read": "icon",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QIcon",
++                        "user": false,
++                        "write": "setIcon"
++                    },
++                    {
++                        "constant": false,
++                        "designable": false,
++                        "final": false,
++                        "name": "visible",
++                        "read": "isVisible",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setVisible"
++                    }
++                ],
++                "qualifiedClassName": "QSystemTrayIcon",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "reason",
++                                "type": "QSystemTrayIcon::ActivationReason"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "messageClicked",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "visible",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "show",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "hide",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "title",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "msg",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "icon",
++                                "type": "QIcon"
++                            },
++                            {
++                                "name": "msecs",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "title",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "msg",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "icon",
++                                "type": "QIcon"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "title",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "msg",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "icon",
++                                "type": "QSystemTrayIcon::MessageIcon"
++                            },
++                            {
++                                "name": "msecs",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "title",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "msg",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "icon",
++                                "type": "QSystemTrayIcon::MessageIcon"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "title",
++                                "type": "QString"
++                            },
++                            {
++                                "name": "msg",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "showMessage",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QPlatformSystemTrayIcon::ActivationReason"
++                            }
++                        ],
++                        "name": "_q_emitActivated",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsystemtrayicon.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QBalloonTip",
++                "object": true,
++                "qualifiedClassName": "QBalloonTip",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qsystemtrayicon_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCompleter",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "CompletionMode",
++                        "values": [
++                            "PopupCompletion",
++                            "UnfilteredPopupCompletion",
++                            "InlineCompletion"
++                        ]
++                    },
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "ModelSorting",
++                        "values": [
++                            "UnsortedModel",
++                            "CaseSensitivelySortedModel",
++                            "CaseInsensitivelySortedModel"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "completionPrefix",
++                        "read": "completionPrefix",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setCompletionPrefix"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "modelSorting",
++                        "read": "modelSorting",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "ModelSorting",
++                        "user": false,
++                        "write": "setModelSorting"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "filterMode",
++                        "read": "filterMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::MatchFlags",
++                        "user": false,
++                        "write": "setFilterMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "completionMode",
++                        "read": "completionMode",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "CompletionMode",
++                        "user": false,
++                        "write": "setCompletionMode"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "completionColumn",
++                        "read": "completionColumn",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCompletionColumn"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "completionRole",
++                        "read": "completionRole",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setCompletionRole"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "maxVisibleItems",
++                        "read": "maxVisibleItems",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setMaxVisibleItems"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "caseSensitivity",
++                        "read": "caseSensitivity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::CaseSensitivity",
++                        "user": false,
++                        "write": "setCaseSensitivity"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "wrapAround",
++                        "read": "wrapAround",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setWrapAround"
++                    }
++                ],
++                "qualifiedClassName": "QCompleter",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "activated",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "highlighted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "highlighted",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "prefix",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setCompletionPrefix",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRect"
++                            }
++                        ],
++                        "name": "complete",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "complete",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "wrap",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setWrapAround",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "_q_complete",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QItemSelection"
++                            }
++                        ],
++                        "name": "_q_completionSelected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "_q_autoResizePopup",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "_q_fileSystemModelDirectoryLoaded",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcompleter.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCompletionModel",
++                "object": true,
++                "qualifiedClassName": "QCompletionModel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "rowsAdded",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "invalidate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "rowsInserted",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "modelDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractProxyModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcompleter_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QScroller",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": false,
++                        "name": "State",
++                        "values": [
++                            "Inactive",
++                            "Pressed",
++                            "Dragging",
++                            "Scrolling"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "state",
++                        "notify": "stateChanged",
++                        "read": "state",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "State",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "scrollerProperties",
++                        "notify": "scrollerPropertiesChanged",
++                        "read": "scrollerProperties",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QScrollerProperties",
++                        "user": false,
++                        "write": "setScrollerProperties"
++                    }
++                ],
++                "qualifiedClassName": "QScroller",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "newstate",
++                                "type": "QScroller::State"
++                            }
++                        ],
++                        "name": "stateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QScrollerProperties"
++                            }
++                        ],
++                        "name": "scrollerPropertiesChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "prop",
++                                "type": "QScrollerProperties"
++                            }
++                        ],
++                        "name": "setScrollerProperties",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pos",
++                                "type": "QPointF"
++                            }
++                        ],
++                        "name": "scrollTo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "pos",
++                                "type": "QPointF"
++                            },
++                            {
++                                "name": "scrollTime",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "scrollTo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            },
++                            {
++                                "name": "xmargin",
++                                "type": "qreal"
++                            },
++                            {
++                                "name": "ymargin",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "ensureVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rect",
++                                "type": "QRectF"
++                            },
++                            {
++                                "name": "xmargin",
++                                "type": "qreal"
++                            },
++                            {
++                                "name": "ymargin",
++                                "type": "qreal"
++                            },
++                            {
++                                "name": "scrollTime",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "ensureVisible",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resendPrepareEvent",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qscroller.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QScrollerPrivate",
++                "object": true,
++                "qualifiedClassName": "QScrollerPrivate",
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "targetDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qscroller_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFlickGesture",
++                "object": true,
++                "qualifiedClassName": "QFlickGesture",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGesture"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qflickgesture_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QUndoStack",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "active",
++                        "read": "isActive",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setActive"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "undoLimit",
++                        "read": "undoLimit",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setUndoLimit"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "canUndo",
++                        "notify": "canUndoChanged",
++                        "read": "canUndo",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "canRedo",
++                        "notify": "canRedoChanged",
++                        "read": "canRedo",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "undoText",
++                        "notify": "undoTextChanged",
++                        "read": "undoText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "redoText",
++                        "notify": "redoTextChanged",
++                        "read": "redoText",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "clean",
++                        "notify": "cleanChanged",
++                        "read": "isClean",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QUndoStack",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "idx",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "indexChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "clean",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "cleanChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "canUndo",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "canUndoChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "canRedo",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "canRedoChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "undoText",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "undoTextChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "redoText",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "redoTextChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "setClean",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "resetClean",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "idx",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setIndex",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "undo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "redo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "active",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setActive",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "setActive",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qundostack.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QUndoAction",
++                "object": true,
++                "qualifiedClassName": "QUndoAction",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "text",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "setPrefixedText",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAction"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qundostack_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QUndoGroup",
++                "object": true,
++                "qualifiedClassName": "QUndoGroup",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "stack",
++                                "type": "QUndoStack*"
++                            }
++                        ],
++                        "name": "activeStackChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "idx",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "indexChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "clean",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "cleanChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "canUndo",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "canUndoChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "canRedo",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "canRedoChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "undoText",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "undoTextChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "redoText",
++                                "type": "QString"
++                            }
++                        ],
++                        "name": "redoTextChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "undo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "redo",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "stack",
++                                "type": "QUndoStack*"
++                            }
++                        ],
++                        "name": "setActiveStack",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qundogroup.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QUndoView",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "emptyLabel",
++                        "read": "emptyLabel",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QString",
++                        "user": false,
++                        "write": "setEmptyLabel"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "cleanIcon",
++                        "read": "cleanIcon",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QIcon",
++                        "user": false,
++                        "write": "setCleanIcon"
++                    }
++                ],
++                "qualifiedClassName": "QUndoView",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "stack",
++                                "type": "QUndoStack*"
++                            }
++                        ],
++                        "name": "setStack",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "group",
++                                "type": "QUndoGroup*"
++                            }
++                        ],
++                        "name": "setGroup",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QListView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qundoview.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QKeyEventTransition",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "key",
++                        "read": "key",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false,
++                        "write": "setKey"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "modifierMask",
++                        "read": "modifierMask",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::KeyboardModifiers",
++                        "user": false,
++                        "write": "setModifierMask"
++                    }
++                ],
++                "qualifiedClassName": "QKeyEventTransition",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QEventTransition"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qkeyeventtransition.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMouseEventTransition",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "button",
++                        "read": "button",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::MouseButton",
++                        "user": false,
++                        "write": "setButton"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "modifierMask",
++                        "read": "modifierMask",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "Qt::KeyboardModifiers",
++                        "user": false,
++                        "write": "setModifierMask"
++                    }
++                ],
++                "qualifiedClassName": "QMouseEventTransition",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QEventTransition"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmouseeventtransition.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QBasicKeyEventTransition",
++                "object": true,
++                "qualifiedClassName": "QBasicKeyEventTransition",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTransition"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qbasickeyeventtransition_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QBasicMouseEventTransition",
++                "object": true,
++                "qualifiedClassName": "QBasicMouseEventTransition",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTransition"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qbasicmouseeventtransition_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsEffect",
++                "enums": [
++                    {
++                        "alias": "ChangeFlag",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "ChangeFlags",
++                        "values": [
++                            "SourceAttached",
++                            "SourceDetached",
++                            "SourceBoundingRectChanged",
++                            "SourceInvalidated"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "enabled",
++                        "notify": "enabledChanged",
++                        "read": "isEnabled",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": false,
++                        "write": "setEnabled"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsEffect",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "enabled",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "enabledChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "enable",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "setEnabled",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "update",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QGraphicsColorizeEffect",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "color",
++                        "notify": "colorChanged",
++                        "read": "color",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QColor",
++                        "user": false,
++                        "write": "setColor"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "strength",
++                        "notify": "strengthChanged",
++                        "read": "strength",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setStrength"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsColorizeEffect",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "color",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "colorChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "strength",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "strengthChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "c",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "setColor",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "strength",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setStrength",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsEffect"
++                    }
++                ]
++            },
++            {
++                "className": "QGraphicsBlurEffect",
++                "enums": [
++                    {
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "BlurHint",
++                        "values": [
++                            "PerformanceHint",
++                            "QualityHint",
++                            "AnimationHint"
++                        ]
++                    },
++                    {
++                        "alias": "BlurHint",
++                        "isClass": false,
++                        "isFlag": true,
++                        "name": "BlurHints",
++                        "values": [
++                            "PerformanceHint",
++                            "QualityHint",
++                            "AnimationHint"
++                        ]
++                    }
++                ],
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "blurRadius",
++                        "notify": "blurRadiusChanged",
++                        "read": "blurRadius",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setBlurRadius"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "blurHints",
++                        "notify": "blurHintsChanged",
++                        "read": "blurHints",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "BlurHints",
++                        "user": false,
++                        "write": "setBlurHints"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsBlurEffect",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "blurRadius",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "blurRadiusChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "hints",
++                                "type": "BlurHints"
++                            }
++                        ],
++                        "name": "blurHintsChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "blurRadius",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setBlurRadius",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "hints",
++                                "type": "BlurHints"
++                            }
++                        ],
++                        "name": "setBlurHints",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsEffect"
++                    }
++                ]
++            },
++            {
++                "className": "QGraphicsDropShadowEffect",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "offset",
++                        "notify": "offsetChanged",
++                        "read": "offset",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QPointF",
++                        "user": false,
++                        "write": "setOffset"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "xOffset",
++                        "notify": "offsetChanged",
++                        "read": "xOffset",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setXOffset"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "yOffset",
++                        "notify": "offsetChanged",
++                        "read": "yOffset",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setYOffset"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "blurRadius",
++                        "notify": "blurRadiusChanged",
++                        "read": "blurRadius",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setBlurRadius"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "color",
++                        "notify": "colorChanged",
++                        "read": "color",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QColor",
++                        "user": false,
++                        "write": "setColor"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsDropShadowEffect",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "offset",
++                                "type": "QPointF"
++                            }
++                        ],
++                        "name": "offsetChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "blurRadius",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "blurRadiusChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "color",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "colorChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "ofs",
++                                "type": "QPointF"
++                            }
++                        ],
++                        "name": "setOffset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "dx",
++                                "type": "qreal"
++                            },
++                            {
++                                "name": "dy",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setOffset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "d",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setOffset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "dx",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setXOffset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "dy",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setYOffset",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "blurRadius",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setBlurRadius",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "color",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "setColor",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsEffect"
++                    }
++                ]
++            },
++            {
++                "className": "QGraphicsOpacityEffect",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "opacity",
++                        "notify": "opacityChanged",
++                        "read": "opacity",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "qreal",
++                        "user": false,
++                        "write": "setOpacity"
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "opacityMask",
++                        "notify": "opacityMaskChanged",
++                        "read": "opacityMask",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "QBrush",
++                        "user": false,
++                        "write": "setOpacityMask"
++                    }
++                ],
++                "qualifiedClassName": "QGraphicsOpacityEffect",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "opacity",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "opacityChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "mask",
++                                "type": "QBrush"
++                            }
++                        ],
++                        "name": "opacityMaskChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "opacity",
++                                "type": "qreal"
++                            }
++                        ],
++                        "name": "setOpacity",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "mask",
++                                "type": "QBrush"
++                            }
++                        ],
++                        "name": "setOpacityMask",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QGraphicsEffect"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicseffect.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QGraphicsEffectSource",
++                "object": true,
++                "qualifiedClassName": "QGraphicsEffectSource",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qgraphicseffect_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QPixmapFilter",
++                "object": true,
++                "qualifiedClassName": "QPixmapFilter",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QPixmapConvolutionFilter",
++                "object": true,
++                "qualifiedClassName": "QPixmapConvolutionFilter",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPixmapFilter"
++                    }
++                ]
++            },
++            {
++                "className": "QPixmapBlurFilter",
++                "object": true,
++                "qualifiedClassName": "QPixmapBlurFilter",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPixmapFilter"
++                    }
++                ]
++            },
++            {
++                "className": "QPixmapColorizeFilter",
++                "object": true,
++                "qualifiedClassName": "QPixmapColorizeFilter",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPixmapFilter"
++                    }
++                ]
++            },
++            {
++                "className": "QPixmapDropShadowFilter",
++                "object": true,
++                "qualifiedClassName": "QPixmapDropShadowFilter",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QPixmapFilter"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qpixmapfilter_p.h",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTipLabel",
++                "object": true,
++                "qualifiedClassName": "QTipLabel",
++                "slots": [
++                    {
++                        "access": "public",
++                        "name": "styleSheetParentDestroyed",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QLabel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtooltip.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWhatsThat",
++                "object": true,
++                "qualifiedClassName": "QWhatsThat",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            },
++            {
++                "className": "QWhatsThisAction",
++                "object": true,
++                "qualifiedClassName": "QWhatsThisAction",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "actionTriggered",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAction"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qwhatsthis.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QCalendarTextNavigator",
++                "object": true,
++                "qualifiedClassName": "QCalendarTextNavigator",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "dateChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "editingFinished",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QObject"
++                    }
++                ]
++            },
++            {
++                "className": "QCalendarModel",
++                "object": true,
++                "qualifiedClassName": "QCalendarModel",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractTableModel"
++                    }
++                ]
++            },
++            {
++                "className": "QCalendarView",
++                "object": true,
++                "qualifiedClassName": "QCalendarView",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "showDate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            },
++                            {
++                                "name": "changeMonth",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "changeDate",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "date",
++                                "type": "QDate"
++                            }
++                        ],
++                        "name": "clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "editingFinished",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QTableView"
++                    }
++                ]
++            },
++            {
++                "className": "QCalendarDelegate",
++                "object": true,
++                "qualifiedClassName": "QCalendarDelegate",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QItemDelegate"
++                    }
++                ]
++            },
++            {
++                "className": "QPrevNextCalButton",
++                "object": true,
++                "qualifiedClassName": "QPrevNextCalButton",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QToolButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcalendarwidget.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QDockWidgetTitleButton",
++                "object": true,
++                "qualifiedClassName": "QDockWidgetTitleButton",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qdockwidget.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QAlphaWidget",
++                "object": true,
++                "qualifiedClassName": "QAlphaWidget",
++                "slots": [
++                    {
++                        "access": "protected",
++                        "name": "render",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    },
++                    {
++                        "access": "private",
++                        "name": "QEffects"
++                    }
++                ]
++            },
++            {
++                "className": "QRollEffect",
++                "object": true,
++                "qualifiedClassName": "QRollEffect",
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "scroll",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    },
++                    {
++                        "access": "private",
++                        "name": "QEffects"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qeffects.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFontFamilyDelegate",
++                "object": true,
++                "qualifiedClassName": "QFontFamilyDelegate",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemDelegate"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfontcombobox.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "ControlLabel",
++                "object": true,
++                "qualifiedClassName": "QMdi::ControlLabel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "_q_clicked",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "_q_doubleClicked",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            },
++            {
++                "className": "ControllerWidget",
++                "object": true,
++                "qualifiedClassName": "QMdi::ControllerWidget",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "_q_minimize",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "_q_restore",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "name": "_q_close",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmdisubwindow.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTornOffMenu",
++                "object": true,
++                "qualifiedClassName": "QTornOffMenu",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "onTrigger",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "action",
++                                "type": "QAction*"
++                            }
++                        ],
++                        "name": "onHovered",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QMenu"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmenu.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "CloseButton",
++                "object": true,
++                "qualifiedClassName": "CloseButton",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtabbar.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QToolBoxButton",
++                "object": true,
++                "qualifiedClassName": "QToolBoxButton",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtoolbox.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QWellArray",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectedColumn",
++                        "read": "selectedColumn",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    },
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "selectedRow",
++                        "read": "selectedRow",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "int",
++                        "user": false
++                    }
++                ],
++                "qualifiedClassName": "QWellArray",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "col",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "selected",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "row",
++                                "type": "int"
++                            },
++                            {
++                                "name": "col",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "currentChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "int"
++                            },
++                            {
++                                "name": "color",
++                                "type": "QRgb"
++                            }
++                        ],
++                        "name": "colorChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            },
++            {
++                "className": "QColorPicker",
++                "object": true,
++                "qualifiedClassName": "QColorPicker",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "h",
++                                "type": "int"
++                            },
++                            {
++                                "name": "s",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "newCol",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "h",
++                                "type": "int"
++                            },
++                            {
++                                "name": "s",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCol",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFrame"
++                    }
++                ]
++            },
++            {
++                "className": "QColorLuminancePicker",
++                "object": true,
++                "qualifiedClassName": "QColorLuminancePicker",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "h",
++                                "type": "int"
++                            },
++                            {
++                                "name": "s",
++                                "type": "int"
++                            },
++                            {
++                                "name": "v",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "newHsv",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "h",
++                                "type": "int"
++                            },
++                            {
++                                "name": "s",
++                                "type": "int"
++                            },
++                            {
++                                "name": "v",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCol",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "h",
++                                "type": "int"
++                            },
++                            {
++                                "name": "s",
++                                "type": "int"
++                            }
++                        ],
++                        "name": "setCol",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            },
++            {
++                "className": "QColorShower",
++                "object": true,
++                "qualifiedClassName": "QColorShower",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rgb",
++                                "type": "QRgb"
++                            }
++                        ],
++                        "name": "newCol",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "color",
++                                "type": "QColor"
++                            }
++                        ],
++                        "name": "currentColorChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "rgb",
++                                "type": "QRgb"
++                            }
++                        ],
++                        "name": "setRgb",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "rgbEd",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "hsvEd",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "htmlEd",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            },
++            {
++                "className": "QColorShowLabel",
++                "object": true,
++                "qualifiedClassName": "QColorShowLabel",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "QRgb"
++                            }
++                        ],
++                        "name": "colorDropped",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QFrame"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qcolordialog.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QFontListView",
++                "object": true,
++                "qualifiedClassName": "QFontListView",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "int"
++                            }
++                        ],
++                        "name": "highlighted",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QListView"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qfontdialog.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QInputDialogSpinBox",
++                "object": true,
++                "qualifiedClassName": "QInputDialogSpinBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "textChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "notifyTextChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QSpinBox"
++                    }
++                ]
++            },
++            {
++                "className": "QInputDialogDoubleSpinBox",
++                "object": true,
++                "qualifiedClassName": "QInputDialogDoubleSpinBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "textChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "slots": [
++                    {
++                        "access": "private",
++                        "name": "notifyTextChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QDoubleSpinBox"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qinputdialog.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QMessageBoxDetailsText",
++                "object": true,
++                "qualifiedClassName": "QMessageBoxDetailsText",
++                "slots": [
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "available",
++                                "type": "bool"
++                            }
++                        ],
++                        "name": "textCopyAvailable",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QWidget"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qmessagebox.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QBooleanComboBox",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "value",
++                        "read": "value",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "bool",
++                        "user": true,
++                        "write": "setValue"
++                    }
++                ],
++                "qualifiedClassName": "QBooleanComboBox",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QComboBox"
++                    }
++                ]
++            },
++            {
++                "className": "QUIntSpinBox",
++                "object": true,
++                "properties": [
++                    {
++                        "constant": false,
++                        "designable": true,
++                        "final": false,
++                        "name": "value",
++                        "notify": "uintValueChanged",
++                        "read": "uintValue",
++                        "required": false,
++                        "scriptable": true,
++                        "stored": true,
++                        "type": "uint",
++                        "user": true,
++                        "write": "setUIntValue"
++                    }
++                ],
++                "qualifiedClassName": "QUIntSpinBox",
++                "signals": [
++                    {
++                        "access": "public",
++                        "name": "uintValueChanged",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QSpinBox"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qitemeditorfactory.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QListWidgetMimeData",
++                "object": true,
++                "qualifiedClassName": "QListWidgetMimeData",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QMimeData"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qlistwidget.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QTableCornerButton",
++                "object": true,
++                "qualifiedClassName": "QTableCornerButton",
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractButton"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qtableview.cpp",
++        "outputRevision": 67
++    },
++    {
++        "classes": [
++            {
++                "className": "QUndoModel",
++                "object": true,
++                "qualifiedClassName": "QUndoModel",
++                "slots": [
++                    {
++                        "access": "public",
++                        "arguments": [
++                            {
++                                "name": "stack",
++                                "type": "QUndoStack*"
++                            }
++                        ],
++                        "name": "setStack",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "name": "stackChanged",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "obj",
++                                "type": "QObject*"
++                            }
++                        ],
++                        "name": "stackDestroyed",
++                        "returnType": "void"
++                    },
++                    {
++                        "access": "private",
++                        "arguments": [
++                            {
++                                "name": "index",
++                                "type": "QModelIndex"
++                            }
++                        ],
++                        "name": "setStackCurrentIndex",
++                        "returnType": "void"
++                    }
++                ],
++                "superClasses": [
++                    {
++                        "access": "public",
++                        "name": "QAbstractItemModel"
++                    }
++                ]
++            }
++        ],
++        "inputFile": "qundoview.cpp",
++        "outputRevision": 67
++    }
++]
+-- 
+2.40.1
+
diff --git a/src/patches/qt5/qtbase/0002-mkspecs-add-linux-riscv64-musl-g-target.patch b/src/patches/qt5/qtbase/0002-mkspecs-add-linux-riscv64-musl-g-target.patch
new file mode 100644
index 0000000..619d1a3
--- /dev/null
+++ b/src/patches/qt5/qtbase/0002-mkspecs-add-linux-riscv64-musl-g-target.patch
@@ -0,0 +1,94 @@
+From 012956abfc7ed81ca0e8c4934ed02fd156aa56fa Mon Sep 17 00:00:00 2001
+From: Lu Hui <luhui@sipeed.com>
+Date: Wed, 21 Feb 2024 13:42:11 +0800
+Subject: [PATCH 2/2] mkspecs: add linux-riscv64-musl-g++ target
+
+---
+ mkspecs/linux-riscv64-musl-g++/qmake.conf     | 27 +++++++++++++
+ .../linux-riscv64-musl-g++/qplatformdefs.h    | 40 +++++++++++++++++++
+ 2 files changed, 67 insertions(+)
+ create mode 100644 mkspecs/linux-riscv64-musl-g++/qmake.conf
+ create mode 100644 mkspecs/linux-riscv64-musl-g++/qplatformdefs.h
+
+diff --git a/mkspecs/linux-riscv64-musl-g++/qmake.conf b/mkspecs/linux-riscv64-musl-g++/qmake.conf
+new file mode 100644
+index 0000000000..be3a130406
+--- /dev/null
++++ b/mkspecs/linux-riscv64-musl-g++/qmake.conf
+@@ -0,0 +1,27 @@
++#
++# qmake configuration for building with aarch64-linux-gnu-g++
++#
++
++MAKEFILE_GENERATOR      = UNIX
++CONFIG                 += incremental
++QMAKE_INCREMENTAL_STYLE = sublib
++
++include(../common/linux.conf)
++include(../common/gcc-base-unix.conf)
++include(../common/g++-unix.conf)
++
++QMAKE_CXXFLAGS += -std=c++20 -Os
++
++# modifications to g++.conf
++QMAKE_CC                = riscv64-unknown-linux-musl-gcc
++QMAKE_CXX               = riscv64-unknown-linux-musl-g++
++QMAKE_LINK              = riscv64-unknown-linux-musl-g++
++QMAKE_LINK_SHLIB        = riscv64-unknown-linux-musl-g++
++
++
++# modifications to linux.conf
++QMAKE_AR                = riscv64-unknown-linux-musl-ar cqs
++QMAKE_OBJCOPY           = riscv64-unknown-linux-musl-objcopy
++QMAKE_NM                = riscv64-unknown-linux-musl-nm -P
++QMAKE_STRIP             = riscv64-unknown-linux-musl-strip
++load(qt_config)
+diff --git a/mkspecs/linux-riscv64-musl-g++/qplatformdefs.h b/mkspecs/linux-riscv64-musl-g++/qplatformdefs.h
+new file mode 100644
+index 0000000000..2697a75e44
+--- /dev/null
++++ b/mkspecs/linux-riscv64-musl-g++/qplatformdefs.h
+@@ -0,0 +1,40 @@
++/****************************************************************************
++**
++** Copyright (C) 2017 The Qt Company Ltd.
++** Contact: https://www.qt.io/licensing/
++**
++** This file is part of the qmake spec of the Qt Toolkit.
++**
++** $QT_BEGIN_LICENSE:LGPL$
++** Commercial License Usage
++** Licensees holding valid commercial Qt licenses may use this file in
++** accordance with the commercial license agreement provided with the
++** Software or, alternatively, in accordance with the terms contained in
++** a written agreement between you and The Qt Company. For licensing terms
++** and conditions see https://www.qt.io/terms-conditions. For further
++** information use the contact form at https://www.qt.io/contact-us.
++**
++** GNU Lesser General Public License Usage
++** Alternatively, this file may be used under the terms of the GNU Lesser
++** General Public License version 3 as published by the Free Software
++** Foundation and appearing in the file LICENSE.LGPL3 included in the
++** packaging of this file. Please review the following information to
++** ensure the GNU Lesser General Public License version 3 requirements
++** will be met: https://www.gnu.org/licenses/lgpl-3.0.html.
++**
++** GNU General Public License Usage
++** Alternatively, this file may be used under the terms of the GNU
++** General Public License version 2.0 or (at your option) the GNU General
++** Public license version 3 or any later version approved by the KDE Free
++** Qt Foundation. The licenses are as published by the Free Software
++** Foundation and appearing in the file LICENSE.GPL2 and LICENSE.GPL3
++** included in the packaging of this file. Please review the following
++** information to ensure the GNU General Public License requirements will
++** be met: https://www.gnu.org/licenses/gpl-2.0.html and
++** https://www.gnu.org/licenses/gpl-3.0.html.
++**
++** $QT_END_LICENSE$
++**
++****************************************************************************/
++
++#include "../linux-g++/qplatformdefs.h"
+-- 
+2.40.1
+
diff --git a/src/qt5 b/src/qt5
new file mode 160000
index 0000000..9b43a43
--- /dev/null
+++ b/src/qt5
@@ -0,0 +1 @@
+Subproject commit 9b43a43ee96198674060c6b9591e515e2d27c28f
diff --git a/src/qt5.org b/src/qt5.org
new file mode 100644
index 0000000..e1850f2
--- /dev/null
+++ b/src/qt5.org
@@ -0,0 +1,32 @@
+* qt5
+
+** get source
+
+#+BEGIN_SRC shell
+git submodule update --recursive
+cd src/qt5
+#END_SRC
+
+** apply patches
+
+#+BEGIN_SRC shell
+../qt5_apply_patches.sh
+#+END_SRC
+
+** cross compile
+
+#+BEGIN_SRC shell
+./configure \
+	-xplatform linux-riscv64-musl-g++ -prefix /usr/qt5 \
+	-sysroot $(riscv64-unknown-linux-musl-gcc -print-sysroot)\
+	-opensource -release -confirm-license \
+	-compile-examples -widgets -ltcg -ccache \
+	-linuxfb -qpa linuxfb -no-opengl -gui \
+make -j`nproc`
+#+END_SRC
+
+** install into sysroot
+
+#+BEGIN_SRC shell
+make install
+#+END_SRC
diff --git a/src/qt5_apply_patches.sh b/src/qt5_apply_patches.sh
new file mode 100755
index 0000000..35322d6
--- /dev/null
+++ b/src/qt5_apply_patches.sh
@@ -0,0 +1,8 @@
+#!/bin/sh
+
+cd qtbase
+# fix header missing
+git am ../../patches/qt5/qtbase/0001-src-fix-header-missing.patch
+# add riscv64 linux musl mkspecs
+git am ../../patches/qt5/qtbase/0002-mkspecs-add-linux-riscv64-musl-g-target.patch
+cd ..
-- 
2.40.1

